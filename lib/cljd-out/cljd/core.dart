import "dart:core" as dc;
import "core.dart" as lcoc_core;
import "dart:math" as d_math;
import "dart:collection" as d_collection;
import "dart:io" as d_io;

// BEGIN $C$Function$$IWithMeta$D$$cext
class $C$Function$$IWithMeta$D$$cext extends dc.Object implements lcoc_core.IWithMeta$ext {

const $C$Function$$IWithMeta$D$$cext():super();

dc.dynamic $_with_meta$1(dc.dynamic f$1, dc.dynamic m$1, ){
final dc.dynamic maybe_f$1=f$1;
late final dc.Function wrapper_f$1;
if((maybe_f$1 is dc.Function)){
wrapper_f$1=maybe_f$1;
}else{
wrapper_f$1=(){
if((maybe_f$1 is dc.Function)){
return (maybe_f$1 as dc.Function)();
}
if((maybe_f$1 is lcoc_core.IFn$iface)){
return ((maybe_f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$1, ).$_invoke$0(maybe_f$1, ));
};
}
final dc.Function f$2=wrapper_f$1;
final dc.dynamic f$3=lcoc_core.Reify$2(null, f$2, );
final dc.dynamic o7517$1=f$3;
final dc.dynamic meta7518$1=m$1;
if((o7517$1 is lcoc_core.IWithMeta$iface)){
return ((o7517$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7518$1, ));
}
return ((lcoc_core.IWithMeta.extensions((o7517$1 as dc.dynamic), ) as lcoc_core.IWithMeta$ext).$_with_meta$1((o7517$1 as dc.dynamic), meta7518$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Function$$IWithMeta$D$$cext

// BEGIN $C$Function$$IWithMeta$D$$extension
var $C$Function$$IWithMeta$D$$extension=lcoc_core.$C$Function$$IWithMeta$D$$cext();

// END $C$Function$$IWithMeta$D$$extension

// BEGIN $C$Iterable$$ISeqable$D$$cext
class $C$Iterable$$ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$Iterable$$ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
final dc.Iterable coll$2=(coll$1 as dc.Iterable);
return lcoc_core.iterator_seq(coll$2.iterator, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Iterable$$ISeqable$D$$cext

// BEGIN $C$Iterable$$ISeqable$D$$extension
var $C$Iterable$$ISeqable$D$$extension=lcoc_core.$C$Iterable$$ISeqable$D$$cext();

// END $C$Iterable$$ISeqable$D$$extension

// BEGIN $C$List$$IIndexed$D$$cext
class $C$List$$IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$List$$IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic l$1, dc.dynamic n$1, ){
final dc.List l$2=(l$1 as dc.List);
return (l$2[(n$1 as dc.int)]);
}

dc.dynamic $_nth$2(dc.dynamic l$3, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.List l$4=(l$3 as dc.List);
final dc.num n$3=(n$2 as dc.num);
final dc.bool and$7187_$AUTO_$1=(0<=n$3);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(n$3<l$4.length);
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
return (l$4[(n$3 as dc.int)]);
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$List$$IIndexed$D$$cext

// BEGIN $C$List$$IIndexed$D$$extension
var $C$List$$IIndexed$D$$extension=lcoc_core.$C$List$$IIndexed$D$$cext();

// END $C$List$$IIndexed$D$$extension

// BEGIN $C$List$$ILookup$D$$cext
class $C$List$$ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$List$$ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic o$1, dc.dynamic k$1, ){
final dc.List o$2=(o$1 as dc.List);
if((k$1 is dc.num)){
final dc.int k$2=((k$1 as dc.num).toInt());
final dc.bool and$7187_$AUTO_$1=(0<=k$2);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(k$2<o$2.length);
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
return (o$2[k$2]);
}
return null;
}
return null;
}

dc.dynamic $_lookup$2(dc.dynamic o$3, dc.dynamic k$3, dc.dynamic not_found$1, ){
final dc.List o$4=(o$3 as dc.List);
final dc.List o7490$1=o$4;
final dc.dynamic k7491$1=k$3;
late final dc.dynamic temp$7200_$AUTO_$1;
if((o7490$1 is lcoc_core.ILookup$iface)){
temp$7200_$AUTO_$1=((o7490$1 as lcoc_core.ILookup$iface).$_lookup$1(k7491$1, ));
}else{
temp$7200_$AUTO_$1=((lcoc_core.ILookup.extensions(o7490$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7490$1, k7491$1, ));
}
if((null==temp$7200_$AUTO_$1)){
return not_found$1;
}
final dc.dynamic v$1=temp$7200_$AUTO_$1;
return v$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$5, dc.dynamic k$4, ){
final dc.List o$6=(o$5 as dc.List);
if((k$4 is dc.num)){
}else{
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("contains? not supported on type", k$4.runtimeType, )), );
}
final dc.int k$5=((k$4 as dc.num).toInt());
final dc.bool and$7187_$AUTO_$2=(0<=k$5);
if(and$7187_$AUTO_$2){
return (k$5<o$6.length);
}
return and$7187_$AUTO_$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$List$$ILookup$D$$cext

// BEGIN $C$List$$ILookup$D$$extension
var $C$List$$ILookup$D$$extension=lcoc_core.$C$List$$ILookup$D$$cext();

// END $C$List$$ILookup$D$$extension

// BEGIN $C$Map$$ILookup$D$$cext
class $C$Map$$ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$Map$$ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic m$1, dc.dynamic k$1, ){
final dc.Map m$2=(m$1 as dc.Map);
return (m$2[k$1]);
}

dc.dynamic $_lookup$2(dc.dynamic m$3, dc.dynamic k$2, dc.dynamic not_found$1, ){
final dc.Map m$4=(m$3 as dc.Map);
if((m$4.containsKey(k$2, ))){
return (m$4[k$2]);
}
return not_found$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic m$5, dc.dynamic k$3, ){
final dc.Map m$6=(m$5 as dc.Map);
return (m$6.containsKey(k$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Map$$ILookup$D$$cext

// BEGIN $C$Map$$ILookup$D$$extension
var $C$Map$$ILookup$D$$extension=lcoc_core.$C$Map$$ILookup$D$$cext();

// END $C$Map$$ILookup$D$$extension

// BEGIN $C$Map$$ISeqable$D$$cext
class $C$Map$$ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$Map$$ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
final dc.Map coll$2=(coll$1 as dc.Map);
return lcoc_core.iterator_seq(coll$2.entries.iterator, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Map$$ISeqable$D$$cext

// BEGIN $C$Map$$ISeqable$D$$extension
var $C$Map$$ISeqable$D$$extension=lcoc_core.$C$Map$$ISeqable$D$$cext();

// END $C$Map$$ISeqable$D$$extension

// BEGIN $C$MapEntry$$ICounted$D$$cext
class $C$MapEntry$$ICounted$D$$cext extends dc.Object implements lcoc_core.ICounted$ext {

const $C$MapEntry$$ICounted$D$$cext():super();

dc.dynamic $_count$0(dc.dynamic $UNDERSCORE_$1, ){
final dc.MapEntry $UNDERSCORE_$2=($UNDERSCORE_$1 as dc.MapEntry);
return 2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$MapEntry$$ICounted$D$$cext

// BEGIN $C$MapEntry$$ICounted$D$$extension
var $C$MapEntry$$ICounted$D$$extension=lcoc_core.$C$MapEntry$$ICounted$D$$cext();

// END $C$MapEntry$$ICounted$D$$extension

// BEGIN $C$MapEntry$$IIndexed$D$$cext
class $C$MapEntry$$IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$MapEntry$$IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic node$5, dc.dynamic n$1, ){
final dc.MapEntry node$6=(node$5 as dc.MapEntry);
if((n$1==0)){
return node$6.key;
}
if((n$1==1)){
return node$6.value;
}
throw dc.ArgumentError("Index out of bounds", );
}

dc.dynamic $_nth$2(dc.dynamic node$7, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.MapEntry node$8=(node$7 as dc.MapEntry);
if((n$2==0)){
return node$8.key;
}
if((n$2==1)){
return node$8.value;
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$MapEntry$$IIndexed$D$$cext

// BEGIN $C$MapEntry$$IIndexed$D$$extension
var $C$MapEntry$$IIndexed$D$$extension=lcoc_core.$C$MapEntry$$IIndexed$D$$cext();

// END $C$MapEntry$$IIndexed$D$$extension

// BEGIN $C$MapEntry$$IMapEntry$D$$cext
class $C$MapEntry$$IMapEntry$D$$cext extends dc.Object implements lcoc_core.IMapEntry$ext {

const $C$MapEntry$$IMapEntry$D$$cext():super();

dc.dynamic $_key$0(dc.dynamic node$1, ){
final dc.MapEntry node$2=(node$1 as dc.MapEntry);
return node$2.key;
}

dc.dynamic $_val$0(dc.dynamic node$3, ){
final dc.MapEntry node$4=(node$3 as dc.MapEntry);
return node$4.value;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$MapEntry$$IMapEntry$D$$cext

// BEGIN $C$MapEntry$$IMapEntry$D$$extension
var $C$MapEntry$$IMapEntry$D$$extension=lcoc_core.$C$MapEntry$$IMapEntry$D$$cext();

// END $C$MapEntry$$IMapEntry$D$$extension

// BEGIN $C$Match$$ICounted$D$$cext
class $C$Match$$ICounted$D$$cext extends dc.Object implements lcoc_core.ICounted$ext {

const $C$Match$$ICounted$D$$cext():super();

dc.dynamic $_count$0(dc.dynamic m$1, ){
final dc.Match m$2=(m$1 as dc.Match);
return (1+m$2.groupCount);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Match$$ICounted$D$$cext

// BEGIN $C$Match$$ICounted$D$$extension
var $C$Match$$ICounted$D$$extension=lcoc_core.$C$Match$$ICounted$D$$cext();

// END $C$Match$$ICounted$D$$extension

// BEGIN $C$Match$$IIndexed$D$$cext
class $C$Match$$IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$Match$$IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic m$3, dc.dynamic n$1, ){
final dc.Match m$4=(m$3 as dc.Match);
return (m$4.group((n$1 as dc.int), ));
}

dc.dynamic $_nth$2(dc.dynamic m$5, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.Match m$6=(m$5 as dc.Match);
final dc.int num$COLON_$LT_$EQ_8771$1=0;
final dc.int num$COLON_$LT_$EQ_8772$1=(n$2 as dc.int);
final dc.int num$COLON_$LT_$EQ_8773$1=m$6.groupCount;
final dc.bool $1=((num$COLON_$LT_$EQ_8771$1<=num$COLON_$LT_$EQ_8772$1)&&(num$COLON_$LT_$EQ_8772$1<=num$COLON_$LT_$EQ_8773$1));
if($1){
return (m$6.group((n$2 as dc.int), ));
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Match$$IIndexed$D$$cext

// BEGIN $C$Match$$IIndexed$D$$extension
var $C$Match$$IIndexed$D$$extension=lcoc_core.$C$Match$$IIndexed$D$$cext();

// END $C$Match$$IIndexed$D$$extension

// BEGIN $C$Null$$IAssociative$D$$cext
class $C$Null$$IAssociative$D$$cext extends dc.Object implements lcoc_core.IAssociative$ext {

const $C$Null$$IAssociative$D$$cext():super();

dc.dynamic $_assoc$2(dc.dynamic coll$1, dc.dynamic k$1, dc.dynamic v$1, ){
final dc.Null coll$2=(coll$1 as dc.Null);
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, k$1, ));
fl$1[1]=v$1;
return lcoc_core.$_map_lit(fl$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$IAssociative$D$$cext

// BEGIN $C$Null$$IAssociative$D$$extension
var $C$Null$$IAssociative$D$$extension=lcoc_core.$C$Null$$IAssociative$D$$cext();

// END $C$Null$$IAssociative$D$$extension

// BEGIN $C$Null$$ICollection$D$$cext
class $C$Null$$ICollection$D$$cext extends dc.Object implements lcoc_core.ICollection$ext {

const $C$Null$$ICollection$D$$cext():super();

dc.dynamic $_conj$1(dc.dynamic coll$1, dc.dynamic o$1, ){
final dc.Null coll$2=(coll$1 as dc.Null);
return lcoc_core.cons(o$1, null, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$ICollection$D$$cext

// BEGIN $C$Null$$ICollection$D$$extension
var $C$Null$$ICollection$D$$extension=lcoc_core.$C$Null$$ICollection$D$$cext();

// END $C$Null$$ICollection$D$$extension

// BEGIN $C$Null$$IHash$D$$cext
class $C$Null$$IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$Null$$IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.Null o$2=(o$1 as dc.Null);
return 0;
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$3, ){
final dc.Null o$4=(o$3 as dc.Null);
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$IHash$D$$cext

// BEGIN $C$Null$$IHash$D$$extension
var $C$Null$$IHash$D$$extension=lcoc_core.$C$Null$$IHash$D$$cext();

// END $C$Null$$IHash$D$$extension

// BEGIN $C$Null$$IIndexed$D$$cext
class $C$Null$$IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$Null$$IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic m$1, dc.dynamic n$1, ){
final dc.Null m$2=(m$1 as dc.Null);
return null;
}

dc.dynamic $_nth$2(dc.dynamic m$3, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.Null m$4=(m$3 as dc.Null);
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$IIndexed$D$$cext

// BEGIN $C$Null$$IIndexed$D$$extension
var $C$Null$$IIndexed$D$$extension=lcoc_core.$C$Null$$IIndexed$D$$cext();

// END $C$Null$$IIndexed$D$$extension

// BEGIN $C$Null$$IKVReduce$D$$cext
class $C$Null$$IKVReduce$D$$cext extends dc.Object implements lcoc_core.IKVReduce$ext {

const $C$Null$$IKVReduce$D$$cext():super();

dc.dynamic $_kv_reduce$2(dc.dynamic coll$1, dc.dynamic f$1, dc.dynamic init$1, ){
final dc.Null coll$2=(coll$1 as dc.Null);
return init$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$IKVReduce$D$$cext

// BEGIN $C$Null$$IKVReduce$D$$extension
var $C$Null$$IKVReduce$D$$extension=lcoc_core.$C$Null$$IKVReduce$D$$cext();

// END $C$Null$$IKVReduce$D$$extension

// BEGIN $C$Null$$IPrint$D$$cext
class $C$Null$$IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$Null$$IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
final dc.Null o$2=(o$1 as dc.Null);
return ((sink$1 as dc.StringSink).write("nil", ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$IPrint$D$$cext

// BEGIN $C$Null$$IPrint$D$$extension
var $C$Null$$IPrint$D$$extension=lcoc_core.$C$Null$$IPrint$D$$cext();

// END $C$Null$$IPrint$D$$extension

// BEGIN $C$Null$$ISeq$D$$cext
class $C$Null$$ISeq$D$$cext extends dc.Object implements lcoc_core.ISeq$ext {

const $C$Null$$ISeq$D$$cext():super();

dc.dynamic $_first$0(dc.dynamic coll$3, ){
final dc.Null coll$4=(coll$3 as dc.Null);
return null;
}

dc.dynamic $_rest$0(dc.dynamic coll$5, ){
final dc.Null coll$6=(coll$5 as dc.Null);
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_next$0(dc.dynamic coll$7, ){
final dc.Null coll$8=(coll$7 as dc.Null);
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$ISeq$D$$cext

// BEGIN $C$Null$$ISeq$D$$extension
var $C$Null$$ISeq$D$$extension=lcoc_core.$C$Null$$ISeq$D$$cext();

// END $C$Null$$ISeq$D$$extension

// BEGIN $C$Null$$ISeqable$D$$cext
class $C$Null$$ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$Null$$ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
final dc.Null coll$2=(coll$1 as dc.Null);
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$ISeqable$D$$cext

// BEGIN $C$Null$$ISeqable$D$$extension
var $C$Null$$ISeqable$D$$extension=lcoc_core.$C$Null$$ISeqable$D$$cext();

// END $C$Null$$ISeqable$D$$extension

// BEGIN $C$Null$$ISet$D$$cext
class $C$Null$$ISet$D$$cext extends dc.Object implements lcoc_core.ISet$ext {

const $C$Null$$ISet$D$$cext():super();

dc.dynamic $_disjoin$1(dc.dynamic coll$1, dc.dynamic v$1, ){
final dc.Null coll$2=(coll$1 as dc.Null);
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Null$$ISet$D$$cext

// BEGIN $C$Null$$ISet$D$$extension
var $C$Null$$ISet$D$$extension=lcoc_core.$C$Null$$ISet$D$$cext();

// END $C$Null$$ISet$D$$extension

// BEGIN $C$Object$$IHash$D$$cext
class $C$Object$$IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$Object$$IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.Object o$2=(o$1 as dc.Object);
return lcoc_core.m3_hash_int(o$2.hashCode, );
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$3, ){
final dc.Object o$4=(o$3 as dc.Object);
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$Object$$IHash$D$$cext

// BEGIN $C$Object$$IHash$D$$extension
var $C$Object$$IHash$D$$extension=lcoc_core.$C$Object$$IHash$D$$cext();

// END $C$Object$$IHash$D$$extension

// BEGIN $C$RegExp$$IPrint$D$$cext
class $C$RegExp$$IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$RegExp$$IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
final dc.RegExp o$2=(o$1 as dc.RegExp);
return ((sink$1 as dc.StringSink).write(o$2.pattern, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$RegExp$$IPrint$D$$cext

// BEGIN $C$RegExp$$IPrint$D$$extension
var $C$RegExp$$IPrint$D$$extension=lcoc_core.$C$RegExp$$IPrint$D$$cext();

// END $C$RegExp$$IPrint$D$$extension

// BEGIN $C$String$$IHash$D$$cext
class $C$String$$IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$String$$IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.String o$2=(o$1 as dc.String);
return lcoc_core.hash_string(o$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$String$$IHash$D$$cext

// BEGIN $C$String$$IHash$D$$extension
var $C$String$$IHash$D$$extension=lcoc_core.$C$String$$IHash$D$$cext();

// END $C$String$$IHash$D$$extension

// BEGIN $C$String$$IIndexed$D$$cext
class $C$String$$IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$String$$IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic l$1, dc.dynamic n$1, ){
final dc.String l$2=(l$1 as dc.String);
return (l$2[(n$1 as dc.int)]);
}

dc.dynamic $_nth$2(dc.dynamic l$3, dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.String l$4=(l$3 as dc.String);
final dc.num n$3=(n$2 as dc.num);
final dc.bool and$7187_$AUTO_$1=(0<=n$3);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(n$3<l$4.length);
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
return (l$4[(n$3 as dc.int)]);
}
return not_found$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$String$$IIndexed$D$$cext

// BEGIN $C$String$$IIndexed$D$$extension
var $C$String$$IIndexed$D$$extension=lcoc_core.$C$String$$IIndexed$D$$cext();

// END $C$String$$IIndexed$D$$extension

// BEGIN $C$String$$ILookup$D$$cext
class $C$String$$ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$String$$ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic o$1, dc.dynamic k$1, ){
final dc.String o$2=(o$1 as dc.String);
if((k$1 is dc.num)){
final dc.int k$2=((k$1 as dc.num).toInt());
final dc.bool and$7187_$AUTO_$1=(0<=k$2);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(k$2<o$2.length);
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
return (o$2[k$2]);
}
return null;
}
return null;
}

dc.dynamic $_lookup$2(dc.dynamic o$3, dc.dynamic k$3, dc.dynamic not_found$1, ){
final dc.String o$4=(o$3 as dc.String);
final dc.String o7490$1=o$4;
final dc.dynamic k7491$1=k$3;
late final dc.dynamic temp$7200_$AUTO_$1;
if((o7490$1 is lcoc_core.ILookup$iface)){
temp$7200_$AUTO_$1=((o7490$1 as lcoc_core.ILookup$iface).$_lookup$1(k7491$1, ));
}else{
temp$7200_$AUTO_$1=((lcoc_core.ILookup.extensions(o7490$1, ) as lcoc_core.ILookup$ext).$_lookup$1(o7490$1, k7491$1, ));
}
if((null==temp$7200_$AUTO_$1)){
return not_found$1;
}
final dc.dynamic v$1=temp$7200_$AUTO_$1;
return v$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$5, dc.dynamic k$4, ){
final dc.String o$6=(o$5 as dc.String);
if((k$4 is dc.num)){
}else{
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("contains? not supported on type", k$4.runtimeType, )), );
}
final dc.int k$5=((k$4 as dc.num).toInt());
final dc.bool and$7187_$AUTO_$2=(0<=k$5);
if(and$7187_$AUTO_$2){
return (k$5<o$6.length);
}
return and$7187_$AUTO_$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$String$$ILookup$D$$cext

// BEGIN $C$String$$ILookup$D$$extension
var $C$String$$ILookup$D$$extension=lcoc_core.$C$String$$ILookup$D$$cext();

// END $C$String$$ILookup$D$$extension

// BEGIN $C$String$$IPrint$D$$cext
class $C$String$$IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$String$$IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic s$1, dc.dynamic sink$1, ){
final dc.String s$2=(s$1 as dc.String);
final dc.StringSink sink$2=(sink$1 as dc.StringSink);
final dc.dynamic or$7228_$AUTO_$1=lcoc_core.$STAR_print_dup$STAR_;
late final dc.dynamic $if_$1;
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=lcoc_core.$STAR_print_readably$STAR_;
}
if((($if_$1!=false)&&($if_$1!=null))){
sink$2.write("\"", );
final dc.String coll7390$1=s$2;
late final dc.int n$7923_$AUTO_$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
n$7923_$AUTO_$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
n$7923_$AUTO_$1=(((lcoc_core.ICounted.extensions(coll7390$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7390$1, )) as dc.int);
}
dc.int n$1=0;
do {
if((n$1<n$7923_$AUTO_$1)){
final dc.String c$1=(s$2[n$1]);
late final dc.Object? cast$1;
switch(c$1){
case "\n":
cast$1=("\\n" as dc.Object?);
break;
case "\t":
cast$1=("\\t" as dc.Object?);
break;
case "\r":
cast$1=("\\r" as dc.Object?);
break;
case "\"":
cast$1=("\\\"" as dc.Object?);
break;
case "\\":
cast$1=("\\\\" as dc.Object?);
break;
case "\f":
cast$1=("\\f" as dc.Object?);
break;
case "\b":
cast$1=("\\b" as dc.Object?);
break;
_default: default:
cast$1=(c$1 as dc.Object?);
}
sink$2.write(cast$1, );
n$1=(1+n$1);
continue;
}
break;
} while(true);
sink$2.write("\"", );
}else{
sink$2.write(s$2, );
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$String$$IPrint$D$$cext

// BEGIN $C$String$$IPrint$D$$extension
var $C$String$$IPrint$D$$extension=lcoc_core.$C$String$$IPrint$D$$cext();

// END $C$String$$IPrint$D$$extension

// BEGIN $C$String$$IReduce$D$$cext
class $C$String$$IReduce$D$$cext extends dc.Object implements lcoc_core.IReduce$ext {

const $C$String$$IReduce$D$$cext():super();

dc.dynamic $_reduce$1(dc.dynamic s$1, dc.dynamic f$1, ){
final dc.String s$2=(s$1 as dc.String);
final dc.int n$1=s$2.length;
if((0<n$1)){
dc.dynamic acc$1=(s$2[0]);
dc.int i$1=1;
do {
if((i$1<n$1)){
final dc.String arg$1=(s$2[i$1]);
late final dc.dynamic acc$2;
if((f$1 is dc.Function)){
acc$2=(f$1 as dc.Function)(acc$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
acc$2=((f$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.unreduced(acc$2, );
}
acc$1=acc$2;
i$1=(1+i$1);
continue;
}
return acc$1;
} while(true);
}else if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic s$3, dc.dynamic f$2, dc.dynamic start$1, ){
final dc.String s$4=(s$3 as dc.String);
final dc.int n$2=s$4.length;
dc.dynamic acc$3=start$1;
dc.int i$2=0;
do {
if((i$2<n$2)){
final dc.String arg$2=(s$4[i$2]);
late final dc.dynamic acc$4;
if((f$2 is dc.Function)){
acc$4=(f$2 as dc.Function)(acc$3, arg$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
acc$4=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$3, arg$2, ));
}else{
acc$4=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$3, arg$2, ));
}
if(lcoc_core.reduced$QMARK_(acc$4, )){
return lcoc_core.unreduced(acc$4, );
}
acc$3=acc$4;
i$2=(1+i$2);
continue;
}
return acc$3;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$String$$IReduce$D$$cext

// BEGIN $C$String$$IReduce$D$$extension
var $C$String$$IReduce$D$$extension=lcoc_core.$C$String$$IReduce$D$$cext();

// END $C$String$$IReduce$D$$extension

// BEGIN $C$String$$ISeqable$D$$cext
class $C$String$$ISeqable$D$$cext extends dc.Object implements lcoc_core.ISeqable$ext {

const $C$String$$ISeqable$D$$cext():super();

dc.dynamic $_seq$0(dc.dynamic coll$1, ){
final dc.String coll$2=(coll$1 as dc.String);
if(coll$2.isNotEmpty){
return lcoc_core.StringSeq(coll$2, 0, null, -1, );
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$String$$ISeqable$D$$cext

// BEGIN $C$String$$ISeqable$D$$extension
var $C$String$$ISeqable$D$$extension=lcoc_core.$C$String$$ISeqable$D$$cext();

// END $C$String$$ISeqable$D$$extension

// BEGIN $C$bool$$IHash$D$$cext
class $C$bool$$IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$bool$$IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.bool o$2=(o$1 as dc.bool);
if(dc.identical(o$2, true, )){
return 1231;
}
if(dc.identical(o$2, false, )){
return 1237;
}
return null;
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$3, ){
final dc.bool o$4=(o$3 as dc.bool);
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$bool$$IHash$D$$cext

// BEGIN $C$bool$$IHash$D$$extension
var $C$bool$$IHash$D$$extension=lcoc_core.$C$bool$$IHash$D$$cext();

// END $C$bool$$IHash$D$$extension

// BEGIN $C$double$$IHash$D$$cext
class $C$double$$IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$double$$IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.double o$2=(o$1 as dc.double);
if((dc.double.negativeInfinity==o$2)){
return -1048576;
}
if((dc.double.infinity==o$2)){
return 2146435072;
}
if((dc.double.nan==o$2)){
return 2146959360;
}
return lcoc_core.m3_hash_int(o$2.hashCode, );
}

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$3, ){
final dc.double o$4=(o$3 as dc.double);
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$double$$IHash$D$$cext

// BEGIN $C$double$$IHash$D$$extension
var $C$double$$IHash$D$$extension=lcoc_core.$C$double$$IHash$D$$cext();

// END $C$double$$IHash$D$$extension

// BEGIN $C$fallback$$ICounted$D$$cext
class $C$fallback$$ICounted$D$$cext extends dc.Object implements lcoc_core.ICounted$ext {

const $C$fallback$$ICounted$D$$cext():super();

dc.dynamic $_count$0(dc.dynamic coll$1, ){
final dc.dynamic coll7370$1=coll$1;
dc.num f7371$1(dc.dynamic n$1, dc.dynamic $UNDERSCORE_$1, ){
return (1+(n$1 as dc.num));
}
final dc.int start7372$1=0;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7370$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7370$1, f7371$1, start7372$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$ICounted$D$$cext

// BEGIN $C$fallback$$ICounted$D$$extension
var $C$fallback$$ICounted$D$$extension=lcoc_core.$C$fallback$$ICounted$D$$cext();

// END $C$fallback$$ICounted$D$$extension

// BEGIN $C$fallback$$IEmptyableCollection$D$$cext
class $C$fallback$$IEmptyableCollection$D$$cext extends dc.Object implements lcoc_core.IEmptyableCollection$ext {

const $C$fallback$$IEmptyableCollection$D$$cext():super();

dc.dynamic $_empty$0(dc.dynamic coll$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IEmptyableCollection$D$$cext

// BEGIN $C$fallback$$IEmptyableCollection$D$$extension
var $C$fallback$$IEmptyableCollection$D$$extension=lcoc_core.$C$fallback$$IEmptyableCollection$D$$cext();

// END $C$fallback$$IEmptyableCollection$D$$extension

// BEGIN $C$fallback$$IEquiv$D$$cext
class $C$fallback$$IEquiv$D$$cext extends dc.Object implements lcoc_core.IEquiv$ext {

const $C$fallback$$IEquiv$D$$cext():super();

dc.dynamic $_equiv$1(dc.dynamic o$1, dc.dynamic other$1, ){
return (o$1==other$1);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IEquiv$D$$cext

// BEGIN $C$fallback$$IEquiv$D$$extension
var $C$fallback$$IEquiv$D$$extension=lcoc_core.$C$fallback$$IEquiv$D$$cext();

// END $C$fallback$$IEquiv$D$$extension

// BEGIN $C$fallback$$IExceptionInfo$D$$cext
class $C$fallback$$IExceptionInfo$D$$cext extends dc.Object implements lcoc_core.IExceptionInfo$ext {

const $C$fallback$$IExceptionInfo$D$$cext():super();

dc.dynamic $_ex_data$0(dc.dynamic e$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IExceptionInfo$D$$cext

// BEGIN $C$fallback$$IExceptionInfo$D$$extension
var $C$fallback$$IExceptionInfo$D$$extension=lcoc_core.$C$fallback$$IExceptionInfo$D$$cext();

// END $C$fallback$$IExceptionInfo$D$$extension

// BEGIN $C$fallback$$IFind$D$$cext
class $C$fallback$$IFind$D$$cext extends dc.Object implements lcoc_core.IFind$ext {

const $C$fallback$$IFind$D$$cext():super();

dc.dynamic $_find$1(dc.dynamic coll$1, dc.dynamic k$1, ){
if((null==coll$1)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Find not supported on ", coll$1.runtimeType, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IFind$D$$cext

// BEGIN $C$fallback$$IFind$D$$extension
var $C$fallback$$IFind$D$$extension=lcoc_core.$C$fallback$$IFind$D$$cext();

// END $C$fallback$$IFind$D$$extension

// BEGIN $C$fallback$$IIndexed$D$$cext
class $C$fallback$$IIndexed$D$$cext extends dc.Object implements lcoc_core.IIndexed$ext {

const $C$fallback$$IIndexed$D$$cext():super();

dc.dynamic $_nth$1(dc.dynamic coll$1, dc.dynamic n$1, ){
if((0>(n$1 as dc.num))){
throw dc.ArgumentError("Index out of bounds", );
}
final dc.dynamic o7310$1=coll$1;
dc.dynamic xs$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
dc.int i$1=(n$1 as dc.int);
do {
if((null==(xs$1 as dc.dynamic))){
throw dc.ArgumentError("Index out of bounds", );
}
if((0==i$1)){
return lcoc_core.first(xs$1, );
}
xs$1=lcoc_core.next(xs$1, );
i$1=(i$1-1);
continue;
} while(true);
}

dc.dynamic $_nth$2(dc.dynamic coll$2, dc.dynamic n$2, dc.dynamic not_found$1, ){
if((0>(n$2 as dc.num))){
return not_found$1;
}
final dc.dynamic o7310$2=coll$2;
dc.dynamic xs$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
xs$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
dc.int i$2=(n$2 as dc.int);
do {
if((null==(xs$2 as dc.dynamic))){
return not_found$1;
}
if((0==i$2)){
return lcoc_core.first(xs$2, );
}
xs$2=lcoc_core.next(xs$2, );
i$2=(i$2-1);
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IIndexed$D$$cext

// BEGIN $C$fallback$$IIndexed$D$$extension
var $C$fallback$$IIndexed$D$$extension=lcoc_core.$C$fallback$$IIndexed$D$$cext();

// END $C$fallback$$IIndexed$D$$extension

// BEGIN $C$fallback$$ILookup$D$$cext
class $C$fallback$$ILookup$D$$cext extends dc.Object implements lcoc_core.ILookup$ext {

const $C$fallback$$ILookup$D$$cext():super();

dc.dynamic $_lookup$1(dc.dynamic o$1, dc.dynamic k$1, ){
final dc.bool and$7187_$AUTO_$1=(k$1 is dc.int);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=((lcoc_core.IIndexed.satisfies(o$1, )) as dc.bool);
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
final dc.dynamic coll7477$1=o$1;
final dc.dynamic n7478$1=k$1;
final dc.Null not_found7479$1=null;
if((coll7477$1 is lcoc_core.IIndexed$iface)){
return ((coll7477$1 as lcoc_core.IIndexed$iface).$_nth$2(n7478$1, not_found7479$1, ));
}
return ((lcoc_core.IIndexed.extensions(coll7477$1, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7477$1, n7478$1, not_found7479$1, ));
}
return null;
}

dc.dynamic $_lookup$2(dc.dynamic o$2, dc.dynamic k$2, dc.dynamic not_found$1, ){
final dc.bool and$7187_$AUTO_$2=(k$2 is dc.int);
late final dc.bool $if_$2;
if(and$7187_$AUTO_$2){
$if_$2=((lcoc_core.IIndexed.satisfies(o$2, )) as dc.bool);
}else{
$if_$2=and$7187_$AUTO_$2;
}
if($if_$2){
final dc.dynamic coll7477$2=o$2;
final dc.dynamic n7478$2=k$2;
final dc.dynamic not_found7479$2=not_found$1;
if((coll7477$2 is lcoc_core.IIndexed$iface)){
return ((coll7477$2 as lcoc_core.IIndexed$iface).$_nth$2(n7478$2, not_found7479$2, ));
}
return ((lcoc_core.IIndexed.extensions(coll7477$2, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7477$2, n7478$2, not_found7479$2, ));
}
return not_found$1;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$3, dc.dynamic k$3, ){
final dc.bool and$7187_$AUTO_$3=(k$3 is dc.int);
if(and$7187_$AUTO_$3){
final dc.bool and$7187_$AUTO_$4=((lcoc_core.IIndexed.satisfies(o$3, )) as dc.bool);
if(and$7187_$AUTO_$4){
final dc.Object? arg$1=(lcoc_core.sentinel as dc.Object?);
final dc.dynamic coll7477$3=o$3;
final dc.dynamic n7478$3=k$3;
final dc.dynamic not_found7479$3=lcoc_core.sentinel;
late final dc.dynamic $if_$3;
if((coll7477$3 is lcoc_core.IIndexed$iface)){
$if_$3=((coll7477$3 as lcoc_core.IIndexed$iface).$_nth$2(n7478$3, (not_found7479$3 as dc.dynamic), ));
}else{
$if_$3=((lcoc_core.IIndexed.extensions(coll7477$3, ) as lcoc_core.IIndexed$ext).$_nth$2(coll7477$3, n7478$3, (not_found7479$3 as dc.dynamic), ));
}
final dc.bool $1=dc.identical(arg$1, $if_$3, );
if($1){
return false;
}
return true;
}
return and$7187_$AUTO_$4;
}
return and$7187_$AUTO_$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$ILookup$D$$cext

// BEGIN $C$fallback$$ILookup$D$$extension
var $C$fallback$$ILookup$D$$extension=lcoc_core.$C$fallback$$ILookup$D$$cext();

// END $C$fallback$$ILookup$D$$extension

// BEGIN $C$fallback$$IMap$D$$cext
class $C$fallback$$IMap$D$$cext extends dc.Object implements lcoc_core.IMap$ext {

const $C$fallback$$IMap$D$$cext():super();

dc.dynamic $_dissoc$1(dc.dynamic coll$1, dc.dynamic k$1, ){
if((null==coll$1)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Dissoc not supported on ", coll$1.runtimeType, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IMap$D$$cext

// BEGIN $C$fallback$$IMap$D$$extension
var $C$fallback$$IMap$D$$extension=lcoc_core.$C$fallback$$IMap$D$$cext();

// END $C$fallback$$IMap$D$$extension

// BEGIN $C$fallback$$IMeta$D$$cext
class $C$fallback$$IMeta$D$$cext extends dc.Object implements lcoc_core.IMeta$ext {

const $C$fallback$$IMeta$D$$cext():super();

dc.dynamic $_meta$0(dc.dynamic $UNDERSCORE_$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IMeta$D$$cext

// BEGIN $C$fallback$$IMeta$D$$extension
var $C$fallback$$IMeta$D$$extension=lcoc_core.$C$fallback$$IMeta$D$$cext();

// END $C$fallback$$IMeta$D$$extension

// BEGIN $C$fallback$$IPrint$D$$cext
class $C$fallback$$IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$fallback$$IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
return ((sink$1 as dc.StringSink).write((o$1.toString()), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IPrint$D$$cext

// BEGIN $C$fallback$$IPrint$D$$extension
var $C$fallback$$IPrint$D$$extension=lcoc_core.$C$fallback$$IPrint$D$$cext();

// END $C$fallback$$IPrint$D$$extension

// BEGIN $C$fallback$$IReduce$D$$cext
class $C$fallback$$IReduce$D$$cext extends dc.Object implements lcoc_core.IReduce$ext {

const $C$fallback$$IReduce$D$$cext():super();

dc.dynamic $_reduce$1(dc.dynamic coll$1, dc.dynamic f$1, ){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7200_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7200_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7200_$AUTO_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
if((null==temp$7200_$AUTO_$1)){
if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
final dc.dynamic vec$8302_$1=temp$7200_$AUTO_$1;
final dc.dynamic o7310$2=vec$8302_$1;
late final dc.dynamic seq$8303_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
seq$8303_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8303_$1=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
final dc.dynamic first$8304_$1=lcoc_core.first(seq$8303_$1, );
final dc.dynamic seq$8303_$2=lcoc_core.next(seq$8303_$1, );
final dc.dynamic x$1=first$8304_$1;
final dc.dynamic xs$1=seq$8303_$2;
final dc.dynamic temp$7200_$AUTO_$2=xs$1;
if((null==(temp$7200_$AUTO_$2 as dc.dynamic))){
return x$1;
}
final dc.dynamic vec$8305_$1=temp$7200_$AUTO_$2;
final dc.dynamic y$1=(lcoc_core.nth.$_invoke$3(vec$8305_$1, 0, null, ));
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(x$1, y$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(x$1, y$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, x$1, y$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
final dc.dynamic coll7370$1=lcoc_core.next(xs$1, );
final dc.dynamic f7371$1=f$1;
final dc.dynamic start7372$1=val$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic coll$2, dc.dynamic f$2, dc.dynamic start$1, ){
dc.dynamic acc$1=start$1;
final dc.dynamic o7310$3=coll$2;
dc.dynamic xs$2;
if((o7310$3 is lcoc_core.ISeqable$iface)){
xs$2=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$2=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
do {
final dc.dynamic temp$7200_$AUTO_$3=xs$2;
if((null==(temp$7200_$AUTO_$3 as dc.dynamic))){
return acc$1;
}
final dc.dynamic vec$8308_$1=temp$7200_$AUTO_$3;
final dc.dynamic x$2=(lcoc_core.nth.$_invoke$3(vec$8308_$1, 0, null, ));
late final dc.dynamic val$2;
if((f$2 is dc.Function)){
val$2=(f$2 as dc.Function)(acc$1, x$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
val$2=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$1, x$2, ));
}else{
val$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$1, x$2, ));
}
if(lcoc_core.reduced$QMARK_(val$2, )){
return lcoc_core.deref(val$2, );
}
acc$1=val$2;
xs$2=lcoc_core.next(xs$2, );
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IReduce$D$$cext

// BEGIN $C$fallback$$IReduce$D$$extension
var $C$fallback$$IReduce$D$$extension=lcoc_core.$C$fallback$$IReduce$D$$cext();

// END $C$fallback$$IReduce$D$$extension

// BEGIN $C$fallback$$IStack$D$$cext
class $C$fallback$$IStack$D$$cext extends dc.Object implements lcoc_core.IStack$ext {

const $C$fallback$$IStack$D$$cext():super();

dc.dynamic $_peek$0(dc.dynamic coll$1, ){
if((null==coll$1)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Peek not supported on ", coll$1.runtimeType, )), );
}

dc.dynamic $_pop$0(dc.dynamic coll$2, ){
if((null==coll$2)){
return null;
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Pop not supported on ", coll$2.runtimeType, )), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$fallback$$IStack$D$$cext

// BEGIN $C$fallback$$IStack$D$$extension
var $C$fallback$$IStack$D$$extension=lcoc_core.$C$fallback$$IStack$D$$cext();

// END $C$fallback$$IStack$D$$extension

// BEGIN $C$int$$IHash$D$$cext
class $C$int$$IHash$D$$cext extends dc.Object implements lcoc_core.IHash$ext {

const $C$int$$IHash$D$$cext():super();

dc.dynamic $_hash$0(dc.dynamic o$1, ){
final dc.int o$2=(o$1 as dc.int);
return lcoc_core.m3_hash_int(o$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$int$$IHash$D$$cext

// BEGIN $C$int$$IHash$D$$extension
var $C$int$$IHash$D$$extension=lcoc_core.$C$int$$IHash$D$$cext();

// END $C$int$$IHash$D$$extension

// BEGIN $C$num$$IPrint$D$$cext
class $C$num$$IPrint$D$$cext extends dc.Object implements lcoc_core.IPrint$ext {

const $C$num$$IPrint$D$$cext():super();

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic sink$1, ){
final dc.num o$2=(o$1 as dc.num);
final dc.bool and$7187_$AUTO_$1=o$2.isInfinite;
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=o$2.isNegative;
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
return ((sink$1 as dc.StringSink).write("##-Inf", ));
}
if(o$2.isInfinite){
return ((sink$1 as dc.StringSink).write("##Inf", ));
}
if(o$2.isNaN){
return ((sink$1 as dc.StringSink).write("##Nan", ));
}
return ((sink$1 as dc.StringSink).write((o$2.toString()), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $C$num$$IPrint$D$$cext

// BEGIN $C$num$$IPrint$D$$extension
var $C$num$$IPrint$D$$extension=lcoc_core.$C$num$$IPrint$D$$cext();

// END $C$num$$IPrint$D$$extension

// BEGIN $EQ_$EQ_$ifn
class $EQ_$EQ_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $EQ_$EQ_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$EQ_$EQ_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$2, dc.dynamic y$2, dc.dynamic more$2, ){
dc.dynamic x$1=x$2;
dc.dynamic y$1=y$2;
dc.dynamic more$1=more$2;
do {
if((x$1==(y$1 as dc.dynamic))){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$1;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$1==(lcoc_core.first(more$1, ) as dc.dynamic));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$4, dc.dynamic y$3, ){
return (x$4==(y$3 as dc.dynamic));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $EQ_$EQ_$ifn

// BEGIN $EQ_$ifn
class $EQ_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $EQ_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$EQ_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$2, dc.dynamic y$2, dc.dynamic more$2, ){
dc.dynamic x$1=x$2;
dc.dynamic y$1=y$2;
dc.dynamic more$1=more$2;
do {
final dc.dynamic o7471$1=x$1;
final dc.dynamic other7472$1=y$1;
late final dc.dynamic $if_$10;
if((o7471$1 is lcoc_core.IEquiv$iface)){
$if_$10=((o7471$1 as lcoc_core.IEquiv$iface).$_equiv$1((other7472$1 as dc.dynamic), ));
}else{
$if_$10=((lcoc_core.IEquiv.extensions((o7471$1 as dc.dynamic), ) as lcoc_core.IEquiv$ext).$_equiv$1((o7471$1 as dc.dynamic), (other7472$1 as dc.dynamic), ));
}
if((($if_$10!=false)&&($if_$10!=null))){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$1;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
final dc.dynamic o7471$2=y$1;
final dc.dynamic other7472$2=lcoc_core.first(more$1, );
if((o7471$2 is lcoc_core.IEquiv$iface)){
return ((o7471$2 as lcoc_core.IEquiv$iface).$_equiv$1((other7472$2 as dc.dynamic), ));
}
return ((lcoc_core.IEquiv.extensions((o7471$2 as dc.dynamic), ) as lcoc_core.IEquiv$ext).$_equiv$1((o7471$2 as dc.dynamic), (other7472$2 as dc.dynamic), ));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$4, dc.dynamic y$3, ){
final dc.dynamic o7471$3=x$4;
final dc.dynamic other7472$3=y$3;
if((o7471$3 is lcoc_core.IEquiv$iface)){
return ((o7471$3 as lcoc_core.IEquiv$iface).$_equiv$1((other7472$3 as dc.dynamic), ));
}
return ((lcoc_core.IEquiv.extensions((o7471$3 as dc.dynamic), ) as lcoc_core.IEquiv$ext).$_equiv$1((o7471$3 as dc.dynamic), (other7472$3 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $EQ_$ifn

// BEGIN $GT_$EQ_$ifn
class $GT_$EQ_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $GT_$EQ_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$GT_$EQ_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2>=y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2>=(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6>=y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $GT_$EQ_$ifn

// BEGIN $GT_$ifn
class $GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2>y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2>(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6>y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $GT_$ifn

// BEGIN $LT_$EQ_$ifn
class $LT_$EQ_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $LT_$EQ_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$LT_$EQ_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2<=y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2<=(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6<=y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $LT_$EQ_$ifn

// BEGIN $LT_$ifn
class $LT_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $LT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$LT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic y$3, dc.dynamic more$2, ){
dc.dynamic x$1=x$3;
dc.dynamic y$1=y$3;
dc.dynamic more$1=more$2;
do {
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
if((x$2<y$2)){
final dc.dynamic test$1=lcoc_core.next(more$1, );
if(((test$1!=false)&&(test$1!=null))){
x$1=y$2;
y$1=lcoc_core.first(more$1, );
more$1=lcoc_core.next(more$1, );
continue;
}
return (y$2<(lcoc_core.first(more$1, ) as dc.num));
}
return false;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$4, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$5=(y$4 as dc.num);
return (x$6<y$5);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $LT_$ifn

// BEGIN $PLUS_$ifn
class $PLUS_$ifn extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $PLUS_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$PLUS_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.$PLUS_;
final dc.num start7372$1=(x$2+y$2);
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$0(){
return 0;
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6+y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $PLUS_$ifn

// BEGIN $SLASH_$ifn
class $SLASH_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $SLASH_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$SLASH_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.$SLASH_;
final dc.double start7372$1=(x$2/y$2);
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return (1/x$4);
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6/y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $SLASH_$ifn

// BEGIN $STAR_$ifn
class $STAR_$ifn extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $STAR_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$STAR_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.$STAR_;
final dc.num start7372$1=(x$2*y$2);
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$0(){
return 1;
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6*y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $STAR_$ifn

// BEGIN $_$GT_$GT_$ifn
class $_$GT_$GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_$GT_$GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_$GT_$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic forms$1, ){
dc.dynamic x$2=x$1;
dc.dynamic forms$2=forms$1;
do {
if(((forms$2!=false)&&(forms$2!=null))){
final dc.dynamic form$1=lcoc_core.first(forms$2, );
late final dc.dynamic threaded$1;
if(((lcoc_core.ISeq.satisfies((form$1 as dc.dynamic), )) as dc.bool)){
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(lcoc_core.first(form$1, ), )), lcoc_core.next(form$1, ), (lcoc_core.list.$_invoke$1(x$2, )), ));
late final dc.dynamic $if_$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic o7524$1=form$1;
late final dc.dynamic $if_$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
threaded$1=lcoc_core.with_meta($if_$2, $if_$1, );
}else{
threaded$1=(lcoc_core.list.$_invoke$2(form$1, x$2, ));
}
x$2=threaded$1;
forms$2=lcoc_core.next(forms$2, );
continue;
}
return x$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_$GT_$GT_$ifn

// BEGIN $_$GT_$ifn
class $_$GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_$GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic forms$1, ){
dc.dynamic x$2=x$1;
dc.dynamic forms$2=forms$1;
do {
if(((forms$2!=false)&&(forms$2!=null))){
final dc.dynamic form$1=lcoc_core.first(forms$2, );
late final dc.dynamic threaded$1;
if(((lcoc_core.ISeq.satisfies((form$1 as dc.dynamic), )) as dc.bool)){
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(lcoc_core.first(form$1, ), )), (lcoc_core.list.$_invoke$1(x$2, )), lcoc_core.next(form$1, ), ));
late final dc.dynamic $if_$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic o7524$1=form$1;
late final dc.dynamic $if_$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
threaded$1=lcoc_core.with_meta($if_$2, $if_$1, );
}else{
threaded$1=(lcoc_core.list.$_invoke$2(form$1, x$2, ));
}
x$2=threaded$1;
forms$2=lcoc_core.next(forms$2, );
continue;
}
return x$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_$GT_$ifn

// BEGIN $_$ifn
class $_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.$_;
final dc.num start7372$1=(x$2-y$2);
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return (0-x$4);
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return (x$6-y$4);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_$ifn

// BEGIN $_invoke$ifn
class $_invoke$ifn extends dc.Object with lcoc_core.IFnMixin_uXXXXXXXXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_invoke$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_invoke$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$7(dc.dynamic $this_$13, dc.dynamic a$21, dc.dynamic b$19, dc.dynamic c$17, dc.dynamic d$15, dc.dynamic e$13, dc.dynamic f$11, ){
if(($this_$13 is lcoc_core.IFn$iface)){
return (($this_$13 as lcoc_core.IFn$iface).$_invoke$6((a$21 as dc.dynamic), (b$19 as dc.dynamic), (c$17 as dc.dynamic), (d$15 as dc.dynamic), (e$13 as dc.dynamic), (f$11 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$13 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$6(($this_$13 as dc.dynamic), (a$21 as dc.dynamic), (b$19 as dc.dynamic), (c$17 as dc.dynamic), (d$15 as dc.dynamic), (e$13 as dc.dynamic), (f$11 as dc.dynamic), ));
}

dc.dynamic $_invoke$1(dc.dynamic $this_$14, ){
if(($this_$14 is lcoc_core.IFn$iface)){
return (($this_$14 as lcoc_core.IFn$iface).$_invoke$0());
}
return ((lcoc_core.IFn.extensions(($this_$14 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$0(($this_$14 as dc.dynamic), ));
}

dc.dynamic $_invoke$4(dc.dynamic $this_$15, dc.dynamic a$22, dc.dynamic b$20, dc.dynamic c$18, ){
if(($this_$15 is lcoc_core.IFn$iface)){
return (($this_$15 as lcoc_core.IFn$iface).$_invoke$3((a$22 as dc.dynamic), (b$20 as dc.dynamic), (c$18 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$15 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$3(($this_$15 as dc.dynamic), (a$22 as dc.dynamic), (b$20 as dc.dynamic), (c$18 as dc.dynamic), ));
}

dc.dynamic $_invoke$6(dc.dynamic $this_$16, dc.dynamic a$23, dc.dynamic b$21, dc.dynamic c$19, dc.dynamic d$16, dc.dynamic e$14, ){
if(($this_$16 is lcoc_core.IFn$iface)){
return (($this_$16 as lcoc_core.IFn$iface).$_invoke$5((a$23 as dc.dynamic), (b$21 as dc.dynamic), (c$19 as dc.dynamic), (d$16 as dc.dynamic), (e$14 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$16 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$5(($this_$16 as dc.dynamic), (a$23 as dc.dynamic), (b$21 as dc.dynamic), (c$19 as dc.dynamic), (d$16 as dc.dynamic), (e$14 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic $this_$17, dc.dynamic a$24, dc.dynamic b$22, ){
if(($this_$17 is lcoc_core.IFn$iface)){
return (($this_$17 as lcoc_core.IFn$iface).$_invoke$2((a$24 as dc.dynamic), (b$22 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$17 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$2(($this_$17 as dc.dynamic), (a$24 as dc.dynamic), (b$22 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic $this_$18, dc.dynamic a$25, ){
if(($this_$18 is lcoc_core.IFn$iface)){
return (($this_$18 as lcoc_core.IFn$iface).$_invoke$1((a$25 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$18 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$1(($this_$18 as dc.dynamic), (a$25 as dc.dynamic), ));
}

dc.dynamic $_invoke$9(dc.dynamic $this_$19, dc.dynamic a$26, dc.dynamic b$23, dc.dynamic c$20, dc.dynamic d$17, dc.dynamic e$15, dc.dynamic f$12, dc.dynamic g$9, dc.dynamic h$7, ){
if(($this_$19 is lcoc_core.IFn$iface)){
return (($this_$19 as lcoc_core.IFn$iface).$_invoke$8((a$26 as dc.dynamic), (b$23 as dc.dynamic), (c$20 as dc.dynamic), (d$17 as dc.dynamic), (e$15 as dc.dynamic), (f$12 as dc.dynamic), (g$9 as dc.dynamic), (h$7 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$19 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$8(($this_$19 as dc.dynamic), (a$26 as dc.dynamic), (b$23 as dc.dynamic), (c$20 as dc.dynamic), (d$17 as dc.dynamic), (e$15 as dc.dynamic), (f$12 as dc.dynamic), (g$9 as dc.dynamic), (h$7 as dc.dynamic), ));
}

dc.dynamic $_invoke$5(dc.dynamic $this_$20, dc.dynamic a$27, dc.dynamic b$24, dc.dynamic c$21, dc.dynamic d$18, ){
if(($this_$20 is lcoc_core.IFn$iface)){
return (($this_$20 as lcoc_core.IFn$iface).$_invoke$4((a$27 as dc.dynamic), (b$24 as dc.dynamic), (c$21 as dc.dynamic), (d$18 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$20 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$4(($this_$20 as dc.dynamic), (a$27 as dc.dynamic), (b$24 as dc.dynamic), (c$21 as dc.dynamic), (d$18 as dc.dynamic), ));
}

dc.dynamic $_invoke$ext10(dc.dynamic $this_$21, dc.dynamic a$28, dc.dynamic b$25, dc.dynamic c$22, dc.dynamic d$19, dc.dynamic e$16, dc.dynamic f$13, dc.dynamic g$10, dc.dynamic h$8, dc.dynamic i$5, ){
if(($this_$21 is lcoc_core.IFn$iface)){
return (($this_$21 as lcoc_core.IFn$iface).$_invoke$9((a$28 as dc.dynamic), (b$25 as dc.dynamic), (c$22 as dc.dynamic), (d$19 as dc.dynamic), (e$16 as dc.dynamic), (f$13 as dc.dynamic), (g$10 as dc.dynamic), (h$8 as dc.dynamic), (i$5 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$21 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$9(($this_$21 as dc.dynamic), (a$28 as dc.dynamic), (b$25 as dc.dynamic), (c$22 as dc.dynamic), (d$19 as dc.dynamic), (e$16 as dc.dynamic), (f$13 as dc.dynamic), (g$10 as dc.dynamic), (h$8 as dc.dynamic), (i$5 as dc.dynamic), ));
}

dc.dynamic $_invoke$8(dc.dynamic $this_$22, dc.dynamic a$29, dc.dynamic b$26, dc.dynamic c$23, dc.dynamic d$20, dc.dynamic e$17, dc.dynamic f$14, dc.dynamic g$11, ){
if(($this_$22 is lcoc_core.IFn$iface)){
return (($this_$22 as lcoc_core.IFn$iface).$_invoke$7((a$29 as dc.dynamic), (b$26 as dc.dynamic), (c$23 as dc.dynamic), (d$20 as dc.dynamic), (e$17 as dc.dynamic), (f$14 as dc.dynamic), (g$11 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$22 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke$7(($this_$22 as dc.dynamic), (a$29 as dc.dynamic), (b$26 as dc.dynamic), (c$23 as dc.dynamic), (d$20 as dc.dynamic), (e$17 as dc.dynamic), (f$14 as dc.dynamic), (g$11 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_invoke$ifn

// BEGIN $_lookup$ifn
class $_lookup$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_lookup$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_lookup$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$3(dc.dynamic o$4, dc.dynamic k$7, dc.dynamic not_found$3, ){
if((o$4 is lcoc_core.ILookup$iface)){
return ((o$4 as lcoc_core.ILookup$iface).$_lookup$2((k$7 as dc.dynamic), (not_found$3 as dc.dynamic), ));
}
return ((lcoc_core.ILookup.extensions((o$4 as dc.dynamic), ) as lcoc_core.ILookup$ext).$_lookup$2((o$4 as dc.dynamic), (k$7 as dc.dynamic), (not_found$3 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic o$5, dc.dynamic k$8, ){
if((o$5 is lcoc_core.ILookup$iface)){
return ((o$5 as lcoc_core.ILookup$iface).$_lookup$1((k$8 as dc.dynamic), ));
}
return ((lcoc_core.ILookup.extensions((o$5 as dc.dynamic), ) as lcoc_core.ILookup$ext).$_lookup$1((o$5 as dc.dynamic), (k$8 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_lookup$ifn

// BEGIN $_nth$ifn
class $_nth$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_nth$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_nth$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$3(dc.dynamic coll$3, dc.dynamic n$5, dc.dynamic not_found$3, ){
if((coll$3 is lcoc_core.IIndexed$iface)){
return ((coll$3 as lcoc_core.IIndexed$iface).$_nth$2((n$5 as dc.dynamic), (not_found$3 as dc.dynamic), ));
}
return ((lcoc_core.IIndexed.extensions((coll$3 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$2((coll$3 as dc.dynamic), (n$5 as dc.dynamic), (not_found$3 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$4, dc.dynamic n$6, ){
if((coll$4 is lcoc_core.IIndexed$iface)){
return ((coll$4 as lcoc_core.IIndexed$iface).$_nth$1((n$6 as dc.dynamic), ));
}
return ((lcoc_core.IIndexed.extensions((coll$4 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll$4 as dc.dynamic), (n$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_nth$ifn

// BEGIN $_reduce$ifn
class $_reduce$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_reduce$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_reduce$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$3(dc.dynamic coll$3, dc.dynamic f$5, dc.dynamic start$3, ){
if((coll$3 is lcoc_core.IReduce$iface)){
return ((coll$3 as lcoc_core.IReduce$iface).$_reduce$2((f$5 as dc.dynamic), (start$3 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll$3 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll$3 as dc.dynamic), (f$5 as dc.dynamic), (start$3 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$4, dc.dynamic f$6, ){
if((coll$4 is lcoc_core.IReduce$iface)){
return ((coll$4 as lcoc_core.IReduce$iface).$_reduce$1((f$6 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll$4 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$1((coll$4 as dc.dynamic), (f$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_reduce$ifn

// BEGIN $_swap$BANG_$ifn
class $_swap$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uuXXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $_swap$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$_swap$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$5(dc.dynamic o$5, dc.dynamic f$9, dc.dynamic a$7, dc.dynamic b$5, dc.dynamic xs$3, ){
if((o$5 is lcoc_core.ISwap$iface)){
return ((o$5 as lcoc_core.ISwap$iface).$_swap$BANG_$4((f$9 as dc.dynamic), (a$7 as dc.dynamic), (b$5 as dc.dynamic), (xs$3 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o$5 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$4((o$5 as dc.dynamic), (f$9 as dc.dynamic), (a$7 as dc.dynamic), (b$5 as dc.dynamic), (xs$3 as dc.dynamic), ));
}

dc.dynamic $_invoke$4(dc.dynamic o$6, dc.dynamic f$10, dc.dynamic a$8, dc.dynamic b$6, ){
if((o$6 is lcoc_core.ISwap$iface)){
return ((o$6 as lcoc_core.ISwap$iface).$_swap$BANG_$3((f$10 as dc.dynamic), (a$8 as dc.dynamic), (b$6 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o$6 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$3((o$6 as dc.dynamic), (f$10 as dc.dynamic), (a$8 as dc.dynamic), (b$6 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic o$7, dc.dynamic f$11, dc.dynamic a$9, ){
if((o$7 is lcoc_core.ISwap$iface)){
return ((o$7 as lcoc_core.ISwap$iface).$_swap$BANG_$2((f$11 as dc.dynamic), (a$9 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o$7 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$2((o$7 as dc.dynamic), (f$11 as dc.dynamic), (a$9 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic o$8, dc.dynamic f$12, ){
if((o$8 is lcoc_core.ISwap$iface)){
return ((o$8 as lcoc_core.ISwap$iface).$_swap$BANG_$1((f$12 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o$8 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$1((o$8 as dc.dynamic), (f$12 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $_swap$BANG_$ifn

// BEGIN $assert_$ifn
class $assert_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $assert_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$assert_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$3(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, ){
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1(x$1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "str", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1("Assert failed: ", ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "pr-str", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "quote", )), )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $2, ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$5, arg$4, $3, ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic x$2, dc.dynamic message$1, ){
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart", "assert", )), ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), )), (lcoc_core.list.$_invoke$1(x$2, )), (lcoc_core.list.$_invoke$1(true, )), (lcoc_core.list.$_invoke$1(false, )), ));
late final dc.dynamic $if_$4;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$6, $4, (lcoc_core.list.$_invoke$1(message$1, )), ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $assert_$ifn

// BEGIN $case_$ifn
class $case_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $case_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$case_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.bool $if_$1;
if(lcoc_core.symbol$QMARK_(expr$1, )){
$if_$1=false;
}else{
$if_$1=true;
}
if($if_$1){
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "let*", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "test__8157__auto__", )), )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "test__8157__auto__", )), )), clauses$1, ));
late final dc.dynamic $if_$3;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, $2, ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic coll7390$1=clauses$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.bool $4=cast$1.isEven;
if($4){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "case", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1(expr$1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("ArgumentError", "value", )), )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.list.$_invoke$1(null, )), (lcoc_core.list.$_invoke$1("No matching clause.", )), ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$2(arg$2, $5, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$4(arg$4, arg$3, clauses$1, $6, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final lcoc_core.PersistentVector clauses$2=lcoc_core.vec((lcoc_core.partition_all.$_invoke$2(2, clauses$1, )), );
final dc.dynamic vec$8159_$1=lcoc_core.peek(clauses$2, );
final dc.dynamic $default_$1=(lcoc_core.nth.$_invoke$3(vec$8159_$1, 0, null, ));
final dc.dynamic clauses$3=lcoc_core.pop(clauses$2, );
return (lcoc_core.list.$_invoke$4((lcoc_core.symbol.$_invoke$2(null, "case*", )), expr$1, lcoc_core.LazySeq(null, ((){
dc.dynamic iter$8162_$1(dc.dynamic coll$8163_$2, ){
dc.dynamic coll$8163_$1=coll$8163_$2;
do {
if(((coll$8163_$1!=false)&&(coll$8163_$1!=null))){
if(lcoc_core.chunked_seq$QMARK_(coll$8163_$1, )){
final dc.dynamic c$8004_$AUTO_$2=lcoc_core.chunk_first(coll$8163_$1, );
final dc.dynamic coll7390$4=c$8004_$AUTO_$2;
late final dc.int size$8005_$AUTO_$2;
if((coll7390$4 is lcoc_core.ICounted$iface)){
size$8005_$AUTO_$2=(((coll7390$4 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
size$8005_$AUTO_$2=(((lcoc_core.ICounted.extensions((coll7390$4 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$4 as dc.dynamic), )) as dc.int);
}
final lcoc_core.ChunkBuffer buf$8003_$AUTO_$2=lcoc_core.chunk_buffer(size$8005_$AUTO_$2, );
late final dc.dynamic exit$8006_$AUTO_$2;
dc.int i$8007_$AUTO_$2=0;
do {
if((i$8007_$AUTO_$2<size$8005_$AUTO_$2)){
final dc.dynamic coll7481$2=c$8004_$AUTO_$2;
final dc.int n7482$2=i$8007_$AUTO_$2;
late final dc.dynamic vec$8170_$1;
if((coll7481$2 is lcoc_core.IIndexed$iface)){
vec$8170_$1=((coll7481$2 as lcoc_core.IIndexed$iface).$_nth$1(n7482$2, ));
}else{
vec$8170_$1=((lcoc_core.IIndexed.extensions((coll7481$2 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$2 as dc.dynamic), n7482$2, ));
}
final dc.dynamic v$3=(lcoc_core.nth.$_invoke$3(vec$8170_$1, 0, null, ));
final dc.dynamic e$3=(lcoc_core.nth.$_invoke$3(vec$8170_$1, 1, null, ));
late final dc.dynamic $if_$8;
if(((lcoc_core.ISeq.satisfies((v$3 as dc.dynamic), )) as dc.bool)){
$if_$8=v$3;
}else{
$if_$8=(lcoc_core.list.$_invoke$1(v$3, ));
}
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, $if_$8, ));
fl$3[1]=e$3;
final lcoc_core.PersistentVector $10=lcoc_core.$_vec_owning(fl$3, );
final dc.dynamic or$7228_$AUTO_$2=lcoc_core.chunk_append(buf$8003_$AUTO_$2, $10, );
if(((or$7228_$AUTO_$2!=false)&&(or$7228_$AUTO_$2!=null))){
exit$8006_$AUTO_$2=or$7228_$AUTO_$2;
}else{
i$8007_$AUTO_$2=(1+i$8007_$AUTO_$2);
continue;
}
}else{
exit$8006_$AUTO_$2=null;
}
break;
} while(true);
final lcoc_core.ChunkBuffer coll7390$5=buf$8003_$AUTO_$2;
final dc.int cast$3=((coll7390$5.$_count$0()) as dc.int);
final dc.bool $11=(0<cast$3);
if($11){
return lcoc_core.chunk_cons(lcoc_core.chunk(buf$8003_$AUTO_$2, ), lcoc_core.LazySeq(null, ((){
if(((exit$8006_$AUTO_$2!=false)&&(exit$8006_$AUTO_$2!=null))){
return null;
}
return iter$8162_$1(lcoc_core.chunk_next(coll$8163_$1, ), );
} as dc.dynamic), null, -1, ), );
}
if(((exit$8006_$AUTO_$2!=false)&&(exit$8006_$AUTO_$2!=null))){
return null;
}
coll$8163_$1=lcoc_core.chunk_next(coll$8163_$1, );
continue;
}
final dc.dynamic vec$8173_$1=lcoc_core.first(coll$8163_$1, );
final dc.dynamic v$4=(lcoc_core.nth.$_invoke$3(vec$8173_$1, 0, null, ));
final dc.dynamic e$4=(lcoc_core.nth.$_invoke$3(vec$8173_$1, 1, null, ));
late final dc.dynamic $if_$9;
if(((lcoc_core.ISeq.satisfies((v$4 as dc.dynamic), )) as dc.bool)){
$if_$9=v$4;
}else{
$if_$9=(lcoc_core.list.$_invoke$1(v$4, ));
}
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(2, $if_$9, ));
fl$4[1]=e$4;
final lcoc_core.PersistentVector $12=lcoc_core.$_vec_owning(fl$4, );
return lcoc_core.cons($12, lcoc_core.LazySeq(null, ((){
return iter$8162_$1(lcoc_core.next(coll$8163_$1, ), );
} as dc.dynamic), null, -1, ), );
}
return null;
} while(true);
}
final dc.dynamic o7310$7=clauses$3;
late final dc.dynamic $if_$10;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}
return iter$8162_$1($if_$10, );
} as dc.dynamic), null, -1, ), $default_$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $case_$ifn

// BEGIN $get_$ifn
class $get_$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $get_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$get_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic map$1, dc.dynamic key$1, ){
final dc.dynamic o7490$1=map$1;
final dc.dynamic k7491$1=key$1;
if((o7490$1 is lcoc_core.ILookup$iface)){
return ((o7490$1 as lcoc_core.ILookup$iface).$_lookup$1((k7491$1 as dc.dynamic), ));
}
return ((lcoc_core.ILookup.extensions((o7490$1 as dc.dynamic), ) as lcoc_core.ILookup$ext).$_lookup$1((o7490$1 as dc.dynamic), (k7491$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic map$2, dc.dynamic key$2, dc.dynamic not_found$1, ){
final dc.dynamic o7486$1=map$2;
final dc.dynamic k7487$1=key$2;
final dc.dynamic not_found7488$1=not_found$1;
if((o7486$1 is lcoc_core.ILookup$iface)){
return ((o7486$1 as lcoc_core.ILookup$iface).$_lookup$2((k7487$1 as dc.dynamic), (not_found7488$1 as dc.dynamic), ));
}
return ((lcoc_core.ILookup.extensions((o7486$1 as dc.dynamic), ) as lcoc_core.ILookup$ext).$_lookup$2((o7486$1 as dc.dynamic), (k7487$1 as dc.dynamic), (not_found7488$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $get_$ifn

// BEGIN $while_$ifn
class $while_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const $while_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.$while_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, body$1, $2, ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END $while_$ifn

// BEGIN *
lcoc_core.IFn$iface $STAR_=lcoc_core.$STAR_$ifn(null, );

// END *

// BEGIN *data-readers*
var $STAR_data_readers$STAR_$root=lcoc_core.$_EMPTY_MAP;
dc.dynamic get $STAR_data_readers$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*data-readers*", )), $STAR_data_readers$STAR_$root, ) as dc.dynamic);
set $STAR_data_readers$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*data-readers*", )), v, );

// END *data-readers*

// BEGIN *default-data-reader-fn*
var $STAR_default_data_reader_fn$STAR_$root=null;
dc.dynamic get $STAR_default_data_reader_fn$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*default-data-reader-fn*", )), $STAR_default_data_reader_fn$STAR_$root, ) as dc.dynamic);
set $STAR_default_data_reader_fn$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*default-data-reader-fn*", )), v, );

// END *default-data-reader-fn*

// BEGIN *out*
var $STAR_out$STAR_$root=d_io.stdout;
dc.StringSink get $STAR_out$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), $STAR_out$STAR_$root, ) as dc.StringSink);
set $STAR_out$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), v, );

// END *out*

// BEGIN *print-dup*
var $STAR_print_dup$STAR_$root=false;
dc.dynamic get $STAR_print_dup$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-dup*", )), $STAR_print_dup$STAR_$root, ) as dc.dynamic);
set $STAR_print_dup$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-dup*", )), v, );

// END *print-dup*

// BEGIN *print-readably*
var $STAR_print_readably$STAR_$root=true;
dc.dynamic get $STAR_print_readably$STAR_ => (lcoc_core.get_dynamic_binding((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), $STAR_print_readably$STAR_$root, ) as dc.dynamic);
set $STAR_print_readably$STAR_(dc.dynamic v) => lcoc_core.set_dynamic_binding$BANG_((lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), v, );

// END *print-readably*

// BEGIN +
lcoc_core.IFn$iface $PLUS_=lcoc_core.$PLUS_$ifn(null, );

// END +

// BEGIN -
lcoc_core.IFn$iface $_=lcoc_core.$_$ifn(null, );

// END -

// BEGIN ->
lcoc_core.IFn$iface $_$GT_=lcoc_core.$_$GT_$ifn(null, );

// END ->

// BEGIN ->>
lcoc_core.IFn$iface $_$GT_$GT_=lcoc_core.$_$GT_$GT_$ifn(null, );

// END ->>

// BEGIN -DYNAMIC-BINDINGS
var $_DYNAMIC_BINDINGS=lcoc_core.$_EMPTY_MAP;

// END -DYNAMIC-BINDINGS

// BEGIN -EMPTY-LIST
var $_EMPTY_LIST=lcoc_core.PersistentList(null, null, null, 0, -1, );

// END -EMPTY-LIST

// BEGIN -EMPTY-MAP
var $_EMPTY_MAP=lcoc_core.PersistentHashMap(null, lcoc_core.BitmapNode(0, 0, 0, (dc.List.empty()), ), -1, );

// END -EMPTY-MAP

// BEGIN -EMPTY-SET
var $_EMPTY_SET=lcoc_core.PersistentHashSet(null, (lcoc_core.$_EMPTY_MAP as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>), -1, );

// END -EMPTY-SET

// BEGIN -EMPTY-VECTOR
var $_EMPTY_VECTOR=lcoc_core.PersistentVector(null, 0, 5, lcoc_core.VectorNode(null, (dc.List.empty()), ), (dc.List.empty()), -1, );

// END -EMPTY-VECTOR

// BEGIN -add-watch
dc.dynamic $_add_watch(dc.dynamic $this_$5, dc.dynamic key$5, dc.dynamic f$3, ){
if(($this_$5 is lcoc_core.IWatchable$iface)){
return (($this_$5 as lcoc_core.IWatchable$iface).$_add_watch$2((key$5 as dc.dynamic), (f$3 as dc.dynamic), ));
}
return ((lcoc_core.IWatchable.extensions(($this_$5 as dc.dynamic), ) as lcoc_core.IWatchable$ext).$_add_watch$2(($this_$5 as dc.dynamic), (key$5 as dc.dynamic), (f$3 as dc.dynamic), ));
}

// END -add-watch

// BEGIN -apply
dc.dynamic $_apply(dc.dynamic $this_$24, dc.dynamic more$3, ){
if(($this_$24 is lcoc_core.IFn$iface)){
return (($this_$24 as lcoc_core.IFn$iface).$_apply$1((more$3 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$24 as dc.dynamic), ) as lcoc_core.IFn$ext).$_apply$1(($this_$24 as dc.dynamic), (more$3 as dc.dynamic), ));
}

// END -apply

// BEGIN -as-transient
dc.dynamic $_as_transient(dc.dynamic coll$2, ){
if((coll$2 is lcoc_core.IEditableCollection$iface)){
return ((coll$2 as lcoc_core.IEditableCollection$iface).$_as_transient$0());
}
return ((lcoc_core.IEditableCollection.extensions((coll$2 as dc.dynamic), ) as lcoc_core.IEditableCollection$ext).$_as_transient$0((coll$2 as dc.dynamic), ));
}

// END -as-transient

// BEGIN -assoc
dc.dynamic $_assoc(dc.dynamic coll$2, dc.dynamic k$3, dc.dynamic v$3, ){
if((coll$2 is lcoc_core.IAssociative$iface)){
return ((coll$2 as lcoc_core.IAssociative$iface).$_assoc$2((k$3 as dc.dynamic), (v$3 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll$2 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll$2 as dc.dynamic), (k$3 as dc.dynamic), (v$3 as dc.dynamic), ));
}

// END -assoc

// BEGIN -assoc!
dc.dynamic $_assoc$BANG_(dc.dynamic tcoll$2, dc.dynamic key$3, dc.dynamic val$3, ){
if((tcoll$2 is lcoc_core.ITransientAssociative$iface)){
return ((tcoll$2 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2((key$3 as dc.dynamic), (val$3 as dc.dynamic), ));
}
return ((lcoc_core.ITransientAssociative.extensions((tcoll$2 as dc.dynamic), ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2((tcoll$2 as dc.dynamic), (key$3 as dc.dynamic), (val$3 as dc.dynamic), ));
}

// END -assoc!

// BEGIN -assoc-n
dc.dynamic $_assoc_n(dc.dynamic coll$2, dc.dynamic n$3, dc.dynamic val$3, ){
if((coll$2 is lcoc_core.IVector$iface)){
return ((coll$2 as lcoc_core.IVector$iface).$_assoc_n$2((n$3 as dc.dynamic), (val$3 as dc.dynamic), ));
}
return ((lcoc_core.IVector.extensions((coll$2 as dc.dynamic), ) as lcoc_core.IVector$ext).$_assoc_n$2((coll$2 as dc.dynamic), (n$3 as dc.dynamic), (val$3 as dc.dynamic), ));
}

// END -assoc-n

// BEGIN -assoc-n!
dc.dynamic $_assoc_n$BANG_(dc.dynamic tcoll$3, dc.dynamic n$3, dc.dynamic val$3, ){
if((tcoll$3 is lcoc_core.ITransientVector$iface)){
return ((tcoll$3 as lcoc_core.ITransientVector$iface).$_assoc_n$BANG_$2((n$3 as dc.dynamic), (val$3 as dc.dynamic), ));
}
return ((lcoc_core.ITransientVector.extensions((tcoll$3 as dc.dynamic), ) as lcoc_core.ITransientVector$ext).$_assoc_n$BANG_$2((tcoll$3 as dc.dynamic), (n$3 as dc.dynamic), (val$3 as dc.dynamic), ));
}

// END -assoc-n!

// BEGIN -chunk-reduce
dc.dynamic $_chunk_reduce(dc.dynamic coll$4, dc.dynamic f$3, dc.dynamic init$3, ){
if((coll$4 is lcoc_core.IChunk$iface)){
return ((coll$4 as lcoc_core.IChunk$iface).$_chunk_reduce$2((f$3 as dc.dynamic), (init$3 as dc.dynamic), ));
}
return ((lcoc_core.IChunk.extensions((coll$4 as dc.dynamic), ) as lcoc_core.IChunk$ext).$_chunk_reduce$2((coll$4 as dc.dynamic), (f$3 as dc.dynamic), (init$3 as dc.dynamic), ));
}

// END -chunk-reduce

// BEGIN -chunked-first
dc.dynamic $_chunked_first(dc.dynamic coll$4, ){
if((coll$4 is lcoc_core.IChunkedSeq$iface)){
return ((coll$4 as lcoc_core.IChunkedSeq$iface).$_chunked_first$0());
}
return ((lcoc_core.IChunkedSeq.extensions((coll$4 as dc.dynamic), ) as lcoc_core.IChunkedSeq$ext).$_chunked_first$0((coll$4 as dc.dynamic), ));
}

// END -chunked-first

// BEGIN -chunked-next
dc.dynamic $_chunked_next(dc.dynamic coll$6, ){
if((coll$6 is lcoc_core.IChunkedSeq$iface)){
return ((coll$6 as lcoc_core.IChunkedSeq$iface).$_chunked_next$0());
}
return ((lcoc_core.IChunkedSeq.extensions((coll$6 as dc.dynamic), ) as lcoc_core.IChunkedSeq$ext).$_chunked_next$0((coll$6 as dc.dynamic), ));
}

// END -chunked-next

// BEGIN -chunked-rest
dc.dynamic $_chunked_rest(dc.dynamic coll$5, ){
if((coll$5 is lcoc_core.IChunkedSeq$iface)){
return ((coll$5 as lcoc_core.IChunkedSeq$iface).$_chunked_rest$0());
}
return ((lcoc_core.IChunkedSeq.extensions((coll$5 as dc.dynamic), ) as lcoc_core.IChunkedSeq$ext).$_chunked_rest$0((coll$5 as dc.dynamic), ));
}

// END -chunked-rest

// BEGIN -conj
dc.dynamic $_conj(dc.dynamic coll$2, dc.dynamic o$3, ){
if((coll$2 is lcoc_core.ICollection$iface)){
return ((coll$2 as lcoc_core.ICollection$iface).$_conj$1((o$3 as dc.dynamic), ));
}
return ((lcoc_core.ICollection.extensions((coll$2 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll$2 as dc.dynamic), (o$3 as dc.dynamic), ));
}

// END -conj

// BEGIN -conj!
dc.dynamic $_conj$BANG_(dc.dynamic tcoll$3, dc.dynamic val$3, ){
if((tcoll$3 is lcoc_core.ITransientCollection$iface)){
return ((tcoll$3 as lcoc_core.ITransientCollection$iface).$_conj$BANG_$1((val$3 as dc.dynamic), ));
}
return ((lcoc_core.ITransientCollection.extensions((tcoll$3 as dc.dynamic), ) as lcoc_core.ITransientCollection$ext).$_conj$BANG_$1((tcoll$3 as dc.dynamic), (val$3 as dc.dynamic), ));
}

// END -conj!

// BEGIN -contains-key?
dc.dynamic $_contains_key$QMARK_(dc.dynamic o$6, dc.dynamic k$9, ){
if((o$6 is lcoc_core.ILookup$iface)){
return ((o$6 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1((k$9 as dc.dynamic), ));
}
return ((lcoc_core.ILookup.extensions((o$6 as dc.dynamic), ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1((o$6 as dc.dynamic), (k$9 as dc.dynamic), ));
}

// END -contains-key?

// BEGIN -count
dc.dynamic $_count(dc.dynamic coll$2, ){
if((coll$2 is lcoc_core.ICounted$iface)){
return ((coll$2 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions((coll$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll$2 as dc.dynamic), ));
}

// END -count

// BEGIN -deref
dc.dynamic $_deref(dc.dynamic o$2, ){
if((o$2 is lcoc_core.IDeref$iface)){
return ((o$2 as lcoc_core.IDeref$iface).$_deref$0());
}
return ((lcoc_core.IDeref.extensions((o$2 as dc.dynamic), ) as lcoc_core.IDeref$ext).$_deref$0((o$2 as dc.dynamic), ));
}

// END -deref

// BEGIN -disjoin
dc.dynamic $_disjoin(dc.dynamic coll$2, dc.dynamic v$3, ){
if((coll$2 is lcoc_core.ISet$iface)){
return ((coll$2 as lcoc_core.ISet$iface).$_disjoin$1((v$3 as dc.dynamic), ));
}
return ((lcoc_core.ISet.extensions((coll$2 as dc.dynamic), ) as lcoc_core.ISet$ext).$_disjoin$1((coll$2 as dc.dynamic), (v$3 as dc.dynamic), ));
}

// END -disjoin

// BEGIN -disjoin!
dc.dynamic $_disjoin$BANG_(dc.dynamic tcoll$2, dc.dynamic v$3, ){
if((tcoll$2 is lcoc_core.ITransientSet$iface)){
return ((tcoll$2 as lcoc_core.ITransientSet$iface).$_disjoin$BANG_$1((v$3 as dc.dynamic), ));
}
return ((lcoc_core.ITransientSet.extensions((tcoll$2 as dc.dynamic), ) as lcoc_core.ITransientSet$ext).$_disjoin$BANG_$1((tcoll$2 as dc.dynamic), (v$3 as dc.dynamic), ));
}

// END -disjoin!

// BEGIN -dissoc
dc.dynamic $_dissoc(dc.dynamic coll$2, dc.dynamic k$3, ){
if((coll$2 is lcoc_core.IMap$iface)){
return ((coll$2 as lcoc_core.IMap$iface).$_dissoc$1((k$3 as dc.dynamic), ));
}
return ((lcoc_core.IMap.extensions((coll$2 as dc.dynamic), ) as lcoc_core.IMap$ext).$_dissoc$1((coll$2 as dc.dynamic), (k$3 as dc.dynamic), ));
}

// END -dissoc

// BEGIN -dissoc!
dc.dynamic $_dissoc$BANG_(dc.dynamic tcoll$2, dc.dynamic key$3, ){
if((tcoll$2 is lcoc_core.ITransientMap$iface)){
return ((tcoll$2 as lcoc_core.ITransientMap$iface).$_dissoc$BANG_$1((key$3 as dc.dynamic), ));
}
return ((lcoc_core.ITransientMap.extensions((tcoll$2 as dc.dynamic), ) as lcoc_core.ITransientMap$ext).$_dissoc$BANG_$1((tcoll$2 as dc.dynamic), (key$3 as dc.dynamic), ));
}

// END -dissoc!

// BEGIN -drop-first
dc.dynamic $_drop_first(dc.dynamic coll$3, ){
if((coll$3 is lcoc_core.IChunk$iface)){
return ((coll$3 as lcoc_core.IChunk$iface).$_drop_first$0());
}
return ((lcoc_core.IChunk.extensions((coll$3 as dc.dynamic), ) as lcoc_core.IChunk$ext).$_drop_first$0((coll$3 as dc.dynamic), ));
}

// END -drop-first

// BEGIN -empty
dc.dynamic $_empty(dc.dynamic coll$2, ){
if((coll$2 is lcoc_core.IEmptyableCollection$iface)){
return ((coll$2 as lcoc_core.IEmptyableCollection$iface).$_empty$0());
}
return ((lcoc_core.IEmptyableCollection.extensions((coll$2 as dc.dynamic), ) as lcoc_core.IEmptyableCollection$ext).$_empty$0((coll$2 as dc.dynamic), ));
}

// END -empty

// BEGIN -equiv
dc.dynamic $_equiv(dc.dynamic o$2, dc.dynamic other$3, ){
if((o$2 is lcoc_core.IEquiv$iface)){
return ((o$2 as lcoc_core.IEquiv$iface).$_equiv$1((other$3 as dc.dynamic), ));
}
return ((lcoc_core.IEquiv.extensions((o$2 as dc.dynamic), ) as lcoc_core.IEquiv$ext).$_equiv$1((o$2 as dc.dynamic), (other$3 as dc.dynamic), ));
}

// END -equiv

// BEGIN -equiv-map
dc.bool $_equiv_map(dc.dynamic x$1, dc.dynamic y$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.map$QMARK_(y$1, );
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
if(lcoc_core.record$QMARK_(y$1, )){
$if_$1=false;
}else{
$if_$1=true;
}
}else{
$if_$1=and$7187_$AUTO_$1;
}
late final dc.dynamic $if_$2;
if($if_$1){
final dc.dynamic coll7390$1=x$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.dynamic coll7390$2=y$1;
late final dc.int cast$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
final dc.bool $1=(cast$1==cast$2);
if($1){
final dc.Object never_equiv$1=dc.Object();
if(((lcoc_core.IKVReduce.satisfies((x$1 as dc.dynamic), )) as dc.bool)){
$if_$2=lcoc_core.reduce_kv((dc.dynamic $UNDERSCORE_$1, dc.dynamic k$1, dc.dynamic v$1, ){
if((lcoc_core.$EQ_.$_invoke$2((lcoc_core.$get_.$_invoke$3(y$1, k$1, never_equiv$1, )), v$1, ))){
return true;
}
return lcoc_core.reduced(false, );
}, true, x$1, );
}else{
$if_$2=lcoc_core.every$QMARK_((dc.dynamic xkv$1, ){
return (lcoc_core.$EQ_.$_invoke$2((lcoc_core.$get_.$_invoke$3(y$1, lcoc_core.first(xkv$1, ), never_equiv$1, )), lcoc_core.second(xkv$1, ), ));
}, x$1, );
}
}else{
$if_$2=null;
}
}else{
$if_$2=null;
}
return lcoc_core.boolean($if_$2, );
}

// END -equiv-map

// BEGIN -equiv-sequential
dc.bool $_equiv_sequential(dc.dynamic x$1, dc.dynamic y$1, ){
final dc.bool or$7228_$AUTO_$1=((lcoc_core.ISequential.satisfies((y$1 as dc.dynamic), )) as dc.bool);
late final dc.bool and$7187_$AUTO_$1;
if(or$7228_$AUTO_$1){
and$7187_$AUTO_$1=or$7228_$AUTO_$1;
}else{
and$7187_$AUTO_$1=(y$1 is dc.List);
}
if(and$7187_$AUTO_$1){
late final dc.bool or$7228_$AUTO_$2;
if(lcoc_core.counted$QMARK_(x$1, )){
or$7228_$AUTO_$2=false;
}else{
or$7228_$AUTO_$2=true;
}
late final dc.bool and$7187_$AUTO_$2;
if(or$7228_$AUTO_$2){
and$7187_$AUTO_$2=or$7228_$AUTO_$2;
}else{
late final dc.bool or$7228_$AUTO_$3;
if(lcoc_core.counted$QMARK_(y$1, )){
or$7228_$AUTO_$3=false;
}else{
or$7228_$AUTO_$3=true;
}
if(or$7228_$AUTO_$3){
and$7187_$AUTO_$2=or$7228_$AUTO_$3;
}else{
final dc.dynamic coll7390$1=x$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.dynamic coll7390$2=y$1;
late final dc.int cast$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
and$7187_$AUTO_$2=(cast$1==cast$2);
}
}
if(and$7187_$AUTO_$2){
final dc.dynamic o7538$1=x$1;
late final dc.dynamic $if_$1;
if((o7538$1 is lcoc_core.IHash$iface)){
$if_$1=((o7538$1 as lcoc_core.IHash$iface).$_hash_realized$QMARK_$0());
}else{
$if_$1=((lcoc_core.IHash.extensions((o7538$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash_realized$QMARK_$0((o7538$1 as dc.dynamic), ));
}
late final dc.bool or$7228_$AUTO_$4;
if((($if_$1!=false)&&($if_$1!=null))){
or$7228_$AUTO_$4=false;
}else{
or$7228_$AUTO_$4=true;
}
late final dc.bool and$7187_$AUTO_$3;
if(or$7228_$AUTO_$4){
and$7187_$AUTO_$3=or$7228_$AUTO_$4;
}else{
final dc.dynamic o7538$2=y$1;
late final dc.dynamic $if_$2;
if((o7538$2 is lcoc_core.IHash$iface)){
$if_$2=((o7538$2 as lcoc_core.IHash$iface).$_hash_realized$QMARK_$0());
}else{
$if_$2=((lcoc_core.IHash.extensions((o7538$2 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash_realized$QMARK_$0((o7538$2 as dc.dynamic), ));
}
late final dc.bool or$7228_$AUTO_$5;
if((($if_$2!=false)&&($if_$2!=null))){
or$7228_$AUTO_$5=false;
}else{
or$7228_$AUTO_$5=true;
}
if(or$7228_$AUTO_$5){
and$7187_$AUTO_$3=or$7228_$AUTO_$5;
}else{
final dc.dynamic o7533$1=x$1;
late final dc.dynamic $if_$3;
if((o7533$1 is lcoc_core.IHash$iface)){
$if_$3=((o7533$1 as lcoc_core.IHash$iface).$_hash$0());
}else{
$if_$3=((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), ));
}
final dc.dynamic o7533$2=y$1;
late final dc.dynamic $if_$4;
if((o7533$2 is lcoc_core.IHash$iface)){
$if_$4=((o7533$2 as lcoc_core.IHash$iface).$_hash$0());
}else{
$if_$4=((lcoc_core.IHash.extensions((o7533$2 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$2 as dc.dynamic), ));
}
and$7187_$AUTO_$3=($if_$3==$if_$4);
}
}
if(and$7187_$AUTO_$3){
final dc.dynamic o7310$1=x$1;
dc.dynamic xs$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic o7310$2=y$1;
dc.dynamic ys$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
ys$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
ys$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
do {
if((null==(xs$1 as dc.dynamic))){
return (null==(ys$1 as dc.dynamic));
}
if((null==(ys$1 as dc.dynamic))){
return false;
}
if((lcoc_core.$EQ_.$_invoke$2(lcoc_core.first(xs$1, ), lcoc_core.first(ys$1, ), ))){
xs$1=lcoc_core.next(xs$1, );
ys$1=lcoc_core.next(ys$1, );
continue;
}
return false;
} while(true);
}else{
return and$7187_$AUTO_$3;
}
}else{
return and$7187_$AUTO_$2;
}
}else{
return and$7187_$AUTO_$1;
}
}

// END -equiv-sequential

// BEGIN -ex-data
dc.dynamic $_ex_data(dc.dynamic e$2, ){
if((e$2 is lcoc_core.IExceptionInfo$iface)){
return ((e$2 as lcoc_core.IExceptionInfo$iface).$_ex_data$0());
}
return ((lcoc_core.IExceptionInfo.extensions((e$2 as dc.dynamic), ) as lcoc_core.IExceptionInfo$ext).$_ex_data$0((e$2 as dc.dynamic), ));
}

// END -ex-data

// BEGIN -find
dc.dynamic $_find(dc.dynamic coll$2, dc.dynamic k$3, ){
if((coll$2 is lcoc_core.IFind$iface)){
return ((coll$2 as lcoc_core.IFind$iface).$_find$1((k$3 as dc.dynamic), ));
}
return ((lcoc_core.IFind.extensions((coll$2 as dc.dynamic), ) as lcoc_core.IFind$ext).$_find$1((coll$2 as dc.dynamic), (k$3 as dc.dynamic), ));
}

// END -find

// BEGIN -first
dc.dynamic $_first(dc.dynamic coll$4, ){
if((coll$4 is lcoc_core.ISeq$iface)){
return ((coll$4 as lcoc_core.ISeq$iface).$_first$0());
}
return ((lcoc_core.ISeq.extensions((coll$4 as dc.dynamic), ) as lcoc_core.ISeq$ext).$_first$0((coll$4 as dc.dynamic), ));
}

// END -first

// BEGIN -hash
dc.dynamic $_hash(dc.dynamic o$3, ){
if((o$3 is lcoc_core.IHash$iface)){
return ((o$3 as lcoc_core.IHash$iface).$_hash$0());
}
return ((lcoc_core.IHash.extensions((o$3 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o$3 as dc.dynamic), ));
}

// END -hash

// BEGIN -hash-realized?
dc.dynamic $_hash_realized$QMARK_(dc.dynamic o$4, ){
if((o$4 is lcoc_core.IHash$iface)){
return ((o$4 as lcoc_core.IHash$iface).$_hash_realized$QMARK_$0());
}
return ((lcoc_core.IHash.extensions((o$4 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash_realized$QMARK_$0((o$4 as dc.dynamic), ));
}

// END -hash-realized?

// BEGIN -hash-string-cache
var $_hash_string_cache=lcoc_core.HashCache(dc.Map<dc.dynamic, dc.int>(), dc.Map<dc.dynamic, dc.int>(), );

// END -hash-string-cache

// BEGIN -invoke
lcoc_core.IFn$iface $_invoke=lcoc_core.$_invoke$ifn(null, );

// END -invoke

// BEGIN -invoke-more
dc.dynamic $_invoke_more(dc.dynamic $this_$23, dc.dynamic a$30, dc.dynamic b$27, dc.dynamic c$24, dc.dynamic d$21, dc.dynamic e$18, dc.dynamic f$16, dc.dynamic g$12, dc.dynamic h$9, dc.dynamic i$6, dc.dynamic rest$3, ){
if(($this_$23 is lcoc_core.IFn$iface)){
return (($this_$23 as lcoc_core.IFn$iface).$_invoke_more$10((a$30 as dc.dynamic), (b$27 as dc.dynamic), (c$24 as dc.dynamic), (d$21 as dc.dynamic), (e$18 as dc.dynamic), (f$16 as dc.dynamic), (g$12 as dc.dynamic), (h$9 as dc.dynamic), (i$6 as dc.dynamic), (rest$3 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions(($this_$23 as dc.dynamic), ) as lcoc_core.IFn$ext).$_invoke_more$10(($this_$23 as dc.dynamic), (a$30 as dc.dynamic), (b$27 as dc.dynamic), (c$24 as dc.dynamic), (d$21 as dc.dynamic), (e$18 as dc.dynamic), (f$16 as dc.dynamic), (g$12 as dc.dynamic), (h$9 as dc.dynamic), (i$6 as dc.dynamic), (rest$3 as dc.dynamic), ));
}

// END -invoke-more

// BEGIN -key
dc.dynamic $_key(dc.dynamic coll$3, ){
if((coll$3 is lcoc_core.IMapEntry$iface)){
return ((coll$3 as lcoc_core.IMapEntry$iface).$_key$0());
}
return ((lcoc_core.IMapEntry.extensions((coll$3 as dc.dynamic), ) as lcoc_core.IMapEntry$ext).$_key$0((coll$3 as dc.dynamic), ));
}

// END -key

// BEGIN -kv-reduce
dc.dynamic $_kv_reduce(dc.dynamic coll$2, dc.dynamic f$3, dc.dynamic init$3, ){
if((coll$2 is lcoc_core.IKVReduce$iface)){
return ((coll$2 as lcoc_core.IKVReduce$iface).$_kv_reduce$2((f$3 as dc.dynamic), (init$3 as dc.dynamic), ));
}
return ((lcoc_core.IKVReduce.extensions((coll$2 as dc.dynamic), ) as lcoc_core.IKVReduce$ext).$_kv_reduce$2((coll$2 as dc.dynamic), (f$3 as dc.dynamic), (init$3 as dc.dynamic), ));
}

// END -kv-reduce

// BEGIN -list-lit
lcoc_core.PersistentList $_list_lit(dc.dynamic xs$1, ){
lcoc_core.PersistentList l$1=lcoc_core.$_EMPTY_LIST;
dc.int i$1=(xs$1 as dc.List).length;
do {
final dc.int i$2=(i$1-1);
if((0>i$2)){
return l$1;
}
final lcoc_core.PersistentList coll7355$1=l$1;
final dc.dynamic o7356$1=((xs$1 as dc.List)[i$2]);
l$1=(coll7355$1.$_conj$1(o7356$1, ));
i$1=i$2;
continue;
} while(true);
}

// END -list-lit

// BEGIN -lookup
lcoc_core.IFn$iface $_lookup=lcoc_core.$_lookup$ifn(null, );

// END -lookup

// BEGIN -map-lit
lcoc_core.PersistentHashMap $_map_lit(dc.dynamic kvs$1, ){
final lcoc_core.PersistentHashMap coll7563$1=lcoc_core.$_EMPTY_MAP;
lcoc_core.TransientHashMap tm$1=((coll7563$1.$_as_transient$0()) as lcoc_core.TransientHashMap);
dc.int i$1=0;
do {
if((i$1<(kvs$1 as dc.List).length)){
final lcoc_core.TransientHashMap tcoll7452$1=tm$1;
final dc.dynamic key7453$1=((kvs$1 as dc.List)[i$1]);
final dc.dynamic val7454$1=((kvs$1 as dc.List)[(i$1+1)]);
tm$1=(tcoll7452$1.$_assoc$BANG_$2(key7453$1, val7454$1, ));
i$1=(i$1+2);
continue;
}
final lcoc_core.TransientHashMap tcoll7574$1=tm$1;
return ((tcoll7574$1.$_persistent$BANG_$0()) as lcoc_core.PersistentHashMap);
} while(true);
}

// END -map-lit

// BEGIN -meta
dc.dynamic $_meta(dc.dynamic o$2, ){
if((o$2 is lcoc_core.IMeta$iface)){
return ((o$2 as lcoc_core.IMeta$iface).$_meta$0());
}
return ((lcoc_core.IMeta.extensions((o$2 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o$2 as dc.dynamic), ));
}

// END -meta

// BEGIN -name
dc.dynamic $_name(dc.dynamic x$5, ){
if((x$5 is lcoc_core.INamed$iface)){
return ((x$5 as lcoc_core.INamed$iface).$_name$0());
}
return ((lcoc_core.INamed.extensions((x$5 as dc.dynamic), ) as lcoc_core.INamed$ext).$_name$0((x$5 as dc.dynamic), ));
}

// END -name

// BEGIN -namespace
dc.dynamic $_namespace(dc.dynamic x$6, ){
if((x$6 is lcoc_core.INamed$iface)){
return ((x$6 as lcoc_core.INamed$iface).$_namespace$0());
}
return ((lcoc_core.INamed.extensions((x$6 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x$6 as dc.dynamic), ));
}

// END -namespace

// BEGIN -next
dc.dynamic $_next(dc.dynamic coll$6, ){
if((coll$6 is lcoc_core.ISeq$iface)){
return ((coll$6 as lcoc_core.ISeq$iface).$_next$0());
}
return ((lcoc_core.ISeq.extensions((coll$6 as dc.dynamic), ) as lcoc_core.ISeq$ext).$_next$0((coll$6 as dc.dynamic), ));
}

// END -next

// BEGIN -notify-watches
dc.dynamic $_notify_watches(dc.dynamic $this_$4, dc.dynamic oldval$3, dc.dynamic newval$3, ){
if(($this_$4 is lcoc_core.IWatchable$iface)){
return (($this_$4 as lcoc_core.IWatchable$iface).$_notify_watches$2((oldval$3 as dc.dynamic), (newval$3 as dc.dynamic), ));
}
return ((lcoc_core.IWatchable.extensions(($this_$4 as dc.dynamic), ) as lcoc_core.IWatchable$ext).$_notify_watches$2(($this_$4 as dc.dynamic), (oldval$3 as dc.dynamic), (newval$3 as dc.dynamic), ));
}

// END -notify-watches

// BEGIN -nth
lcoc_core.IFn$iface $_nth=lcoc_core.$_nth$ifn(null, );

// END -nth

// BEGIN -peek
dc.dynamic $_peek(dc.dynamic coll$3, ){
if((coll$3 is lcoc_core.IStack$iface)){
return ((coll$3 as lcoc_core.IStack$iface).$_peek$0());
}
return ((lcoc_core.IStack.extensions((coll$3 as dc.dynamic), ) as lcoc_core.IStack$ext).$_peek$0((coll$3 as dc.dynamic), ));
}

// END -peek

// BEGIN -persistent!
dc.dynamic $_persistent$BANG_(dc.dynamic tcoll$4, ){
if((tcoll$4 is lcoc_core.ITransientCollection$iface)){
return ((tcoll$4 as lcoc_core.ITransientCollection$iface).$_persistent$BANG_$0());
}
return ((lcoc_core.ITransientCollection.extensions((tcoll$4 as dc.dynamic), ) as lcoc_core.ITransientCollection$ext).$_persistent$BANG_$0((tcoll$4 as dc.dynamic), ));
}

// END -persistent!

// BEGIN -pop
dc.dynamic $_pop(dc.dynamic coll$4, ){
if((coll$4 is lcoc_core.IStack$iface)){
return ((coll$4 as lcoc_core.IStack$iface).$_pop$0());
}
return ((lcoc_core.IStack.extensions((coll$4 as dc.dynamic), ) as lcoc_core.IStack$ext).$_pop$0((coll$4 as dc.dynamic), ));
}

// END -pop

// BEGIN -pop!
dc.dynamic $_pop$BANG_(dc.dynamic tcoll$4, ){
if((tcoll$4 is lcoc_core.ITransientVector$iface)){
return ((tcoll$4 as lcoc_core.ITransientVector$iface).$_pop$BANG_$0());
}
return ((lcoc_core.ITransientVector.extensions((tcoll$4 as dc.dynamic), ) as lcoc_core.ITransientVector$ext).$_pop$BANG_$0((tcoll$4 as dc.dynamic), ));
}

// END -pop!

// BEGIN -print
dc.dynamic $_print(dc.dynamic o$2, dc.dynamic string_sink$3, ){
if((o$2 is lcoc_core.IPrint$iface)){
return ((o$2 as lcoc_core.IPrint$iface).$_print$1((string_sink$3 as dc.dynamic), ));
}
return ((lcoc_core.IPrint.extensions((o$2 as dc.dynamic), ) as lcoc_core.IPrint$ext).$_print$1((o$2 as dc.dynamic), (string_sink$3 as dc.dynamic), ));
}

// END -print

// BEGIN -realized?
dc.dynamic $_realized$QMARK_(dc.dynamic x$4, ){
if((x$4 is lcoc_core.IPending$iface)){
return ((x$4 as lcoc_core.IPending$iface).$_realized$QMARK_$0());
}
return ((lcoc_core.IPending.extensions((x$4 as dc.dynamic), ) as lcoc_core.IPending$ext).$_realized$QMARK_$0((x$4 as dc.dynamic), ));
}

// END -realized?

// BEGIN -reduce
lcoc_core.IFn$iface $_reduce=lcoc_core.$_reduce$ifn(null, );

// END -reduce

// BEGIN -remove-watch
dc.dynamic $_remove_watch(dc.dynamic $this_$6, dc.dynamic key$6, ){
if(($this_$6 is lcoc_core.IWatchable$iface)){
return (($this_$6 as lcoc_core.IWatchable$iface).$_remove_watch$1((key$6 as dc.dynamic), ));
}
return ((lcoc_core.IWatchable.extensions(($this_$6 as dc.dynamic), ) as lcoc_core.IWatchable$ext).$_remove_watch$1(($this_$6 as dc.dynamic), (key$6 as dc.dynamic), ));
}

// END -remove-watch

// BEGIN -reset!
dc.dynamic $_reset$BANG_(dc.dynamic o$2, dc.dynamic new_value$3, ){
if((o$2 is lcoc_core.IReset$iface)){
return ((o$2 as lcoc_core.IReset$iface).$_reset$BANG_$1((new_value$3 as dc.dynamic), ));
}
return ((lcoc_core.IReset.extensions((o$2 as dc.dynamic), ) as lcoc_core.IReset$ext).$_reset$BANG_$1((o$2 as dc.dynamic), (new_value$3 as dc.dynamic), ));
}

// END -reset!

// BEGIN -rest
dc.dynamic $_rest(dc.dynamic coll$5, ){
if((coll$5 is lcoc_core.ISeq$iface)){
return ((coll$5 as lcoc_core.ISeq$iface).$_rest$0());
}
return ((lcoc_core.ISeq.extensions((coll$5 as dc.dynamic), ) as lcoc_core.ISeq$ext).$_rest$0((coll$5 as dc.dynamic), ));
}

// END -rest

// BEGIN -seq
dc.dynamic $_seq(dc.dynamic o$2, ){
if((o$2 is lcoc_core.ISeqable$iface)){
return ((o$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o$2 as dc.dynamic), ));
}

// END -seq

// BEGIN -subvec
dc.dynamic $_subvec(dc.dynamic vector$2, dc.dynamic start$3, dc.dynamic end$3, ){
if((vector$2 is lcoc_core.ISubvecable$iface)){
return ((vector$2 as lcoc_core.ISubvecable$iface).$_subvec$2((start$3 as dc.dynamic), (end$3 as dc.dynamic), ));
}
return ((lcoc_core.ISubvecable.extensions((vector$2 as dc.dynamic), ) as lcoc_core.ISubvecable$ext).$_subvec$2((vector$2 as dc.dynamic), (start$3 as dc.dynamic), (end$3 as dc.dynamic), ));
}

// END -subvec

// BEGIN -swap!
lcoc_core.IFn$iface $_swap$BANG_=lcoc_core.$_swap$BANG_$ifn(null, );

// END -swap!

// BEGIN -val
dc.dynamic $_val(dc.dynamic coll$4, ){
if((coll$4 is lcoc_core.IMapEntry$iface)){
return ((coll$4 as lcoc_core.IMapEntry$iface).$_val$0());
}
return ((lcoc_core.IMapEntry.extensions((coll$4 as dc.dynamic), ) as lcoc_core.IMapEntry$ext).$_val$0((coll$4 as dc.dynamic), ));
}

// END -val

// BEGIN -vec-owning
lcoc_core.PersistentVector $_vec_owning(dc.dynamic xs$1, ){
assert((){
final dc.List coll7390$1=(xs$1 as dc.List);
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7390$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7390$1, )) as dc.int);
}
final dc.bool $1=(cast$1<=32);
late final dc.bool $if_$1;
if($1){
$if_$1=true;
}else{
$if_$1=false;
}
return $if_$1;
}(), (){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(3, (lcoc_core.symbol.$_invoke$2(null, "<=", )), ));
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "count", )), ));
fl$2[1]=(lcoc_core.symbol.$_invoke$2(null, "xs", ));
final lcoc_core.PersistentList $3=lcoc_core.$_list_lit(fl$2, );
fl$1[1]=$3;
fl$1[2]=32;
final lcoc_core.PersistentList $2=lcoc_core.$_list_lit(fl$1, );
final dc.String $4=(lcoc_core.pr_str.$_invoke$1($2, ));
final dc.String $5=(lcoc_core.str.$_invoke$2("Assert failed: ", $4, ));
return $5;
}());
final dc.List coll7390$2=(xs$1 as dc.List);
late final dc.int cast$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions(coll7390$2, ) as lcoc_core.ICounted$ext).$_count$0(coll7390$2, )) as dc.int);
}
return lcoc_core.PersistentVector(null, cast$2, 5, lcoc_core.$_EMPTY_VECTOR.root, (xs$1 as dc.List), -1, );
}

// END -vec-owning

// BEGIN -vreset!
dc.dynamic $_vreset$BANG_(dc.dynamic o$2, dc.dynamic new_value$3, ){
if((o$2 is lcoc_core.IVolatile$iface)){
return ((o$2 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1((new_value$3 as dc.dynamic), ));
}
return ((lcoc_core.IVolatile.extensions((o$2 as dc.dynamic), ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1((o$2 as dc.dynamic), (new_value$3 as dc.dynamic), ));
}

// END -vreset!

// BEGIN -with-meta
dc.dynamic $_with_meta(dc.dynamic o$2, dc.dynamic meta$3, ){
if((o$2 is lcoc_core.IWithMeta$iface)){
return ((o$2 as lcoc_core.IWithMeta$iface).$_with_meta$1((meta$3 as dc.dynamic), ));
}
return ((lcoc_core.IWithMeta.extensions((o$2 as dc.dynamic), ) as lcoc_core.IWithMeta$ext).$_with_meta$1((o$2 as dc.dynamic), (meta$3 as dc.dynamic), ));
}

// END -with-meta

// BEGIN /
lcoc_core.IFn$iface $SLASH_=lcoc_core.$SLASH_$ifn(null, );

// END /

// BEGIN <
lcoc_core.IFn$iface $LT_=lcoc_core.$LT_$ifn(null, );

// END <

// BEGIN <=
lcoc_core.IFn$iface $LT_$EQ_=lcoc_core.$LT_$EQ_$ifn(null, );

// END <=

// BEGIN =
lcoc_core.IFn$iface $EQ_=lcoc_core.$EQ_$ifn(null, );

// END =

// BEGIN ==
lcoc_core.IFn$iface $EQ_$EQ_=lcoc_core.$EQ_$EQ_$ifn(null, );

// END ==

// BEGIN >
lcoc_core.IFn$iface $GT_=lcoc_core.$GT_$ifn(null, );

// END >

// BEGIN >0?
dc.dynamic $GT_0$QMARK_(dc.dynamic n$1, ){
return (0<(n$1 as dc.num));
}

// END >0?

// BEGIN >1?
dc.dynamic $GT_1$QMARK_(dc.dynamic n$1, ){
return (1<(n$1 as dc.num));
}

// END >1?

// BEGIN >=
lcoc_core.IFn$iface $GT_$EQ_=lcoc_core.$GT_$EQ_$ifn(null, );

// END >=

// BEGIN ArrayChunk
class ArrayChunk extends dc.Object implements lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.IChunk$iface {
final dc.List arr;
final dc.int off;
final dc.int end;

const ArrayChunk(this.arr, this.off, this.end, ):super();

dc.dynamic $_count$0(){
return (end-off);
}

dc.dynamic $_nth$1(dc.dynamic i$1, ){
return (arr[(off+(i$1 as dc.int))]);
}

dc.dynamic $_nth$2(dc.dynamic i$2, dc.dynamic not_found$1, ){
final dc.int i$3=(i$2 as dc.int);
if((i$3<0)){
return not_found$1;
}
if((i$3<(end-off))){
return (arr[(off+i$3)]);
}
return not_found$1;
}

dc.dynamic $_drop_first$0(){
if((off==end)){
throw dc.ArgumentError("-drop-first of empty chunk", );
}
return lcoc_core.ArrayChunk(arr, (1+off), end, );
}

dc.dynamic $_chunk_reduce$2(dc.dynamic f$1, dc.dynamic start$1, ){
dc.dynamic acc$1=start$1;
dc.int idx$1=off;
do {
if((idx$1<end)){
final dc.dynamic arg$1=(arr[idx$1]);
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(acc$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return val$1;
}
acc$1=val$1;
idx$1=(1+idx$1);
continue;
}
return acc$1;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ArrayChunk

// BEGIN Atom
class Atom extends dc.Object implements lcoc_core.IAtom$iface, lcoc_core.IEquiv$iface, lcoc_core.IDeref$iface, lcoc_core.IMeta$iface, lcoc_core.IWatchable$iface, lcoc_core.IHash$iface, lcoc_core.ISwap$iface, lcoc_core.IReset$iface {
var state;
var meta;
var validator;
lcoc_core.PersistentHashMap watches;

Atom(this.state, this.meta, this.validator, this.watches, ):super();

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
return dc.identical(this, (other$1 as dc.Object?), );
}

dc.dynamic $_deref$0(){
return state;
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_notify_watches$2(dc.dynamic oldval$1, dc.dynamic newval$1, ){
final lcoc_core.PersistentHashMap o7310$1=watches;
final dc.dynamic temp$7205_$AUTO_$1=(o7310$1.$_seq$0());
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.dynamic s$1=temp$7205_$AUTO_$1;
final dc.dynamic G$8425_$1=s$1;
final dc.dynamic vec$8426_$1=G$8425_$1;
final dc.dynamic o7310$2=vec$8426_$1;
late final dc.dynamic seq$8427_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
seq$8427_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8427_$1=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
final dc.dynamic first$8428_$1=lcoc_core.first(seq$8427_$1, );
final dc.dynamic seq$8427_$2=lcoc_core.next(seq$8427_$1, );
final dc.dynamic vec$8429_$1=first$8428_$1;
final dc.dynamic key$1=(lcoc_core.nth.$_invoke$3(vec$8429_$1, 0, null, ));
final dc.dynamic f$1=(lcoc_core.nth.$_invoke$3(vec$8429_$1, 1, null, ));
final dc.dynamic r$1=seq$8427_$2;
dc.dynamic G$8425_$2=G$8425_$1;
do {
final dc.dynamic vec$8432_$1=G$8425_$2;
final dc.dynamic o7310$3=vec$8432_$1;
late final dc.dynamic seq$8433_$1;
if((o7310$3 is lcoc_core.ISeqable$iface)){
seq$8433_$1=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8433_$1=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic first$8434_$1=lcoc_core.first(seq$8433_$1, );
final dc.dynamic seq$8433_$2=lcoc_core.next(seq$8433_$1, );
final dc.dynamic vec$8435_$1=first$8434_$1;
final dc.dynamic key$2=(lcoc_core.nth.$_invoke$3(vec$8435_$1, 0, null, ));
final dc.dynamic f$2=(lcoc_core.nth.$_invoke$3(vec$8435_$1, 1, null, ));
final dc.dynamic r$2=seq$8433_$2;
if((f$2 is dc.Function)){
(f$2 as dc.Function)(key$2, this, oldval$1, newval$1, );
}else if((f$2 is lcoc_core.IFn$iface)){
(f$2 as lcoc_core.IFn$iface).$_invoke$4(key$2, this, oldval$1, newval$1, );
}else{
lcoc_core.IFn.extensions(f$2, ).$_invoke$4(f$2, key$2, this, oldval$1, newval$1, );
}
if(((r$2!=false)&&(r$2!=null))){
G$8425_$2=r$2;
continue;
}
return null;
} while(true);
}

dc.dynamic $_add_watch$2(dc.dynamic key$3, dc.dynamic f$3, ){
final lcoc_core.PersistentHashMap coll7440$1=watches;
final dc.dynamic k7441$1=key$3;
final dc.dynamic v7442$1=f$3;
watches=(coll7440$1.$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
return this;
}

dc.dynamic $_remove_watch$1(dc.dynamic key$4, ){
watches=(lcoc_core.dissoc.$_invoke$2(watches, key$4, ));
return this;
}

dc.dynamic $_hash$0(){
return this.hashCode;
}

dc.dynamic $_swap$BANG_$1(dc.dynamic f$4, ){
late final dc.dynamic $if_$1;
if((f$4 is dc.Function)){
$if_$1=(f$4 as dc.Function)(state, );
}else if((f$4 is lcoc_core.IFn$iface)){
$if_$1=((f$4 as lcoc_core.IFn$iface).$_invoke$1(state, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, state, ));
}
return lcoc_core.set_and_validate_atom_state$BANG_(this, $if_$1, );
}

dc.dynamic $_swap$BANG_$2(dc.dynamic f$5, dc.dynamic a$1, ){
late final dc.dynamic $if_$2;
if((f$5 is dc.Function)){
$if_$2=(f$5 as dc.Function)(state, a$1, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$2=((f$5 as lcoc_core.IFn$iface).$_invoke$2(state, a$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$5, ).$_invoke$2(f$5, state, a$1, ));
}
return lcoc_core.set_and_validate_atom_state$BANG_(this, $if_$2, );
}

dc.dynamic $_swap$BANG_$3(dc.dynamic f$6, dc.dynamic a$2, dc.dynamic b$1, ){
late final dc.dynamic $if_$3;
if((f$6 is dc.Function)){
$if_$3=(f$6 as dc.Function)(state, a$2, b$1, );
}else if((f$6 is lcoc_core.IFn$iface)){
$if_$3=((f$6 as lcoc_core.IFn$iface).$_invoke$3(state, a$2, b$1, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$6, ).$_invoke$3(f$6, state, a$2, b$1, ));
}
return lcoc_core.set_and_validate_atom_state$BANG_(this, $if_$3, );
}

dc.dynamic $_swap$BANG_$4(dc.dynamic f$7, dc.dynamic a$3, dc.dynamic b$2, dc.dynamic xs$1, ){
return lcoc_core.set_and_validate_atom_state$BANG_(this, (lcoc_core.apply.$_invoke$5(f$7, state, a$3, b$2, xs$1, )), );
}

dc.dynamic $_reset$BANG_$1(dc.dynamic new_value$1, ){
return lcoc_core.set_and_validate_atom_state$BANG_(this, new_value$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Atom

// BEGIN BitmapIterator
class BitmapIterator<E> extends dc.Object implements dc.Iterator<E> {
lcoc_core.BitmapNode node;
dc.int idx;
dc.int mask;
dc.int kvs;
dc.int depth;
final dc.List<dc.int> masks;
final dc.List<lcoc_core.BitmapNode> nodes;
final mk_value;

BitmapIterator(this.node, this.idx, this.mask, this.kvs, this.depth, this.masks, this.nodes, this.mk_value, ):super();

E get current{
final dc.List arr$1=node.arr;
return mk_value((arr$1[(idx-2)]), (arr$1[(idx-1)]), );
}

dc.bool moveNext(){
do {
final dc.bool and$7187_$AUTO_$1=(depth==7);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(idx<(2*node.cnt));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
idx=(2+idx);
return true;
}
late final dc.bool $if_$2;
if((0==mask)){
$if_$2=false;
}else{
$if_$2=true;
}
if($if_$2){
final dc.int bit$1=(mask&(-mask));
mask=(mask^bit$1);
if((0==(kvs&bit$1))){
final lcoc_core.BitmapNode node$PRIME_$1=((node.arr[idx]) as lcoc_core.BitmapNode);
final dc.int hi$1=node$PRIME_$1.bitmap_hi;
final dc.int lo$1=node$PRIME_$1.bitmap_lo;
final lcoc_core.BitmapNode v$7774_$AUTO_$1=node;
nodes[depth]=v$7774_$AUTO_$1;
final dc.int v$7774_$AUTO_$2=mask;
masks[depth]=v$7774_$AUTO_$2;
node=node$PRIME_$1;
idx=0;
mask=(hi$1|lo$1);
kvs=(hi$1&lo$1);
depth=(1+depth);
continue;
}
idx=(2+idx);
return true;
}
if((0<depth)){
depth=(depth-1);
final lcoc_core.BitmapNode node$PRIME_$2=(nodes[depth]);
final dc.int hi$2=node$PRIME_$2.bitmap_hi;
final dc.int lo$2=node$PRIME_$2.bitmap_lo;
node=node$PRIME_$2;
mask=(masks[depth]);
idx=lcoc_core.u32x2_bit_count((hi$2&(~mask)), (lo$2&(~mask)), );
kvs=(hi$2&lo$2);
continue;
}
return false;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END BitmapIterator

// BEGIN BitmapNode
class BitmapNode extends dc.Object {
dc.int cnt;
dc.int bitmap_hi;
dc.int bitmap_lo;
dc.List arr;

BitmapNode(this.cnt, this.bitmap_hi, this.bitmap_lo, this.arr, ):super();

dc.dynamic inode_lookup(dc.dynamic k$1, dc.dynamic not_found$1, ){
final dc.dynamic o7533$1=k$1;
late final dc.int h$1;
if((o7533$1 is lcoc_core.IHash$iface)){
h$1=(((o7533$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
h$1=(((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), )) as dc.int);
}
lcoc_core.BitmapNode node$1=this;
dc.int shift$1=0;
do {
if((shift$1<32)){
final dc.int bitmap_hi$1=node$1.bitmap_hi;
final dc.int bitmap_lo$1=node$1.bitmap_lo;
final dc.int n$1=((h$1>>(31&shift$1))&31);
final dc.int bit$1=(4294967295&(1<<(31&n$1)));
final dc.int mask$1=(bit$1-1);
final dc.int idx$1=lcoc_core.u32x2_bit_count((mask$1&bitmap_hi$1), (mask$1&bitmap_lo$1), );
final dc.int hi$1=(bitmap_hi$1&bit$1);
final dc.int lo$1=(bitmap_lo$1&bit$1);
if((0==(hi$1|lo$1))){
return not_found$1;
}
if((0==(hi$1&lo$1))){
node$1=(node$1.arr[idx$1]);
shift$1=(5+shift$1);
continue;
}
final dc.List arr$1=node$1.arr;
final dc.dynamic k$PRIME_$1=(arr$1[idx$1]);
if((lcoc_core.$EQ_.$_invoke$2(k$PRIME_$1, k$1, ))){
return (arr$1[(1+idx$1)]);
}
return not_found$1;
}
final dc.int n$2=(2*cnt);
final dc.List arr$2=node$1.arr;
dc.int i$1=0;
do {
if((i$1==n$2)){
return not_found$1;
}
if((lcoc_core.$EQ_.$_invoke$2((arr$2[i$1]), k$1, ))){
return (arr$2[(1+i$1)]);
}
i$1=(2+i$1);
continue;
} while(true);
break;
} while(true);
}

dc.dynamic inode_without(dc.int shift$2, dc.dynamic h$2, dc.dynamic k$2, ){
if((shift$2<32)){
final dc.int n$3=(((h$2 as dc.int)>>(31&shift$2))&31);
final dc.int bit$2=(4294967295&(1<<(31&n$3)));
final dc.int mask$2=(bit$2-1);
final dc.int idx$2=lcoc_core.u32x2_bit_count((mask$2&bitmap_hi), (mask$2&bitmap_lo), );
final dc.int hi$2=(bitmap_hi&bit$2);
final dc.int lo$2=(bitmap_lo&bit$2);
if((0==(hi$2|lo$2))){
return this;
}
if((0==(hi$2&lo$2))){
final lcoc_core.BitmapNode child$1=((arr[idx$2]) as lcoc_core.BitmapNode);
final lcoc_core.BitmapNode new_child$1=((child$1.inode_without((shift$2+5), (h$2 as dc.dynamic), (k$2 as dc.dynamic), )) as lcoc_core.BitmapNode);
if(dc.identical(child$1, new_child$1, )){
return this;
}
final dc.bool and$7187_$AUTO_$1=(1==new_child$1.cnt);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(0==(new_child$1.bitmap_hi^new_child$1.bitmap_lo));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
final dc.dynamic k$3=(new_child$1.arr[0]);
final dc.dynamic v$1=(new_child$1.arr[1]);
final dc.int size$1=(1+lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, ));
final dc.List<dc.dynamic> new_arr$1=(dc.List<dc.dynamic>.filled(size$1, v$1, ));
final dc.int n$7923_$AUTO_$1=idx$2;
dc.int i$2=0;
do {
if((i$2<n$7923_$AUTO_$1)){
final dc.dynamic v$7774_$AUTO_$1=(arr[i$2]);
new_arr$1[i$2]=v$7774_$AUTO_$1;
i$2=(1+i$2);
continue;
}
break;
} while(true);
final dc.dynamic v$7774_$AUTO_$2=k$3;
new_arr$1[idx$2]=v$7774_$AUTO_$2;
dc.int j$1=(1+idx$2);
dc.int i$3=(1+j$1);
do {
if((i$3<size$1)){
final dc.dynamic v$7774_$AUTO_$3=(arr[j$1]);
new_arr$1[i$3]=v$7774_$AUTO_$3;
j$1=(1+j$1);
i$3=(1+i$3);
continue;
}
break;
} while(true);
return lcoc_core.BitmapNode((cnt-1), (bitmap_hi|bit$2), (bitmap_lo|bit$2), new_arr$1, );
}
final dc.int arg$1=(cnt-1);
final dc.List<dc.dynamic> G$8510_$1=(dc.List.from(this.arr, growable: false, ));
final lcoc_core.BitmapNode v$7774_$AUTO_$4=new_child$1;
G$8510_$1[idx$2]=v$7774_$AUTO_$4;
return lcoc_core.BitmapNode(arg$1, bitmap_hi, bitmap_lo, G$8510_$1, );
}
late final dc.bool $if_$2;
if((lcoc_core.$EQ_.$_invoke$2(k$2, (arr[idx$2]), ))){
$if_$2=false;
}else{
$if_$2=true;
}
if($if_$2){
return this;
}
final dc.int size$2=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-2);
final dc.List<dc.dynamic> new_arr$2=(dc.List<dc.dynamic>.filled(size$2, null, ));
final dc.int n$7923_$AUTO_$2=idx$2;
dc.int i$4=0;
do {
if((i$4<n$7923_$AUTO_$2)){
final dc.dynamic v$7774_$AUTO_$5=(arr[i$4]);
new_arr$2[i$4]=v$7774_$AUTO_$5;
i$4=(1+i$4);
continue;
}
break;
} while(true);
dc.int i$5=idx$2;
dc.int j$2=(2+idx$2);
do {
if((i$5<size$2)){
final dc.dynamic v$7774_$AUTO_$6=(arr[j$2]);
new_arr$2[i$5]=v$7774_$AUTO_$6;
i$5=(1+i$5);
j$2=(1+j$2);
continue;
}
break;
} while(true);
return lcoc_core.BitmapNode((cnt-1), (bitmap_hi^bit$2), (bitmap_lo^bit$2), new_arr$2, );
}
final dc.int n$4=(2*cnt);
dc.int i$6=0;
do {
if((i$6==n$4)){
return this;
}
if((lcoc_core.$EQ_.$_invoke$2((arr[i$6]), k$2, ))){
final dc.int n$5=(n$4-2);
final dc.List new_arr$3=lcoc_core.ashrink(arr, n$5, );
if((i$6==n$5)){
}else{
final dc.dynamic v$7774_$AUTO_$7=(arr[n$5]);
new_arr$3[i$6]=v$7774_$AUTO_$7;
final dc.dynamic v$7774_$AUTO_$8=(arr[(1+n$5)]);
new_arr$3[(1+i$6)]=v$7774_$AUTO_$8;
}
return lcoc_core.BitmapNode((cnt-1), 0, 0, new_arr$3, );
}
i$6=(2+i$6);
continue;
} while(true);
}

dc.dynamic inode_assoc(dc.int shift$3, dc.dynamic h$3, dc.dynamic k$4, dc.dynamic v$2, ){
if((shift$3<32)){
final dc.int n$6=(((h$3 as dc.int)>>(31&shift$3))&31);
final dc.int bit$3=(4294967295&(1<<(31&n$6)));
final dc.int mask$3=(bit$3-1);
final dc.int idx$3=lcoc_core.u32x2_bit_count((mask$3&bitmap_hi), (mask$3&bitmap_lo), );
final dc.int hi$3=(bitmap_hi&bit$3);
final dc.int lo$3=(bitmap_lo&bit$3);
if((0==(hi$3|lo$3))){
final dc.int size$3=(2+lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, ));
final dc.List<dc.dynamic> new_arr$4=(dc.List<dc.dynamic>.filled(size$3, (v$2 as dc.dynamic), ));
final dc.int n$7923_$AUTO_$3=idx$3;
dc.int i$7=0;
do {
if((i$7<n$7923_$AUTO_$3)){
final dc.dynamic v$7774_$AUTO_$9=(arr[i$7]);
new_arr$4[i$7]=v$7774_$AUTO_$9;
i$7=(1+i$7);
continue;
}
break;
} while(true);
final dc.dynamic v$7774_$AUTO_$10=k$4;
new_arr$4[idx$3]=(v$7774_$AUTO_$10 as dc.dynamic);
dc.int i$8=(2+idx$3);
dc.int j$3=idx$3;
do {
if((i$8<size$3)){
final dc.dynamic v$7774_$AUTO_$11=(arr[j$3]);
new_arr$4[i$8]=v$7774_$AUTO_$11;
i$8=(1+i$8);
j$3=(1+j$3);
continue;
}
break;
} while(true);
return lcoc_core.BitmapNode((1+cnt), (bitmap_hi^bit$3), (bitmap_lo^bit$3), new_arr$4, );
}
if((0==(hi$3&lo$3))){
final lcoc_core.BitmapNode child$2=((arr[idx$3]) as lcoc_core.BitmapNode);
final lcoc_core.BitmapNode new_child$2=((child$2.inode_assoc((shift$3+5), (h$3 as dc.dynamic), (k$4 as dc.dynamic), (v$2 as dc.dynamic), )) as lcoc_core.BitmapNode);
if(dc.identical(child$2, new_child$2, )){
return this;
}
final dc.int arg$4=(cnt+(new_child$2.cnt-child$2.cnt));
final dc.int arg$3=(bitmap_hi^bit$3);
final dc.int arg$2=(bitmap_lo^bit$3);
final dc.List<dc.dynamic> G$8511_$1=(dc.List.from(this.arr, growable: false, ));
final lcoc_core.BitmapNode v$7774_$AUTO_$12=new_child$2;
G$8511_$1[idx$3]=v$7774_$AUTO_$12;
return lcoc_core.BitmapNode(arg$4, arg$3, arg$2, G$8511_$1, );
}
final dc.dynamic k$PRIME_$2=(arr[idx$3]);
final dc.dynamic v$PRIME_$1=(arr[(1+idx$3)]);
late final dc.bool $if_$3;
if((lcoc_core.$EQ_.$_invoke$2(k$PRIME_$2, k$4, ))){
$if_$3=false;
}else{
$if_$3=true;
}
if($if_$3){
final dc.int size$4=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-1);
final dc.int shift$PRIME_$1=(5+shift$3);
final dc.dynamic o7533$2=k$PRIME_$2;
late final dc.int cast$1;
if((o7533$2 is lcoc_core.IHash$iface)){
cast$1=(((o7533$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions(o7533$2, ) as lcoc_core.IHash$ext).$_hash$0(o7533$2, )) as dc.int);
}
final dc.int $1=(cast$1>>(31&shift$PRIME_$1));
final dc.int n$PRIME_$1=($1&31);
final dc.int bit$PRIME_$1=(4294967295&(1<<(31&n$PRIME_$1)));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, k$PRIME_$2, ));
fl$1[1]=v$PRIME_$1;
final dc.dynamic new_node$1=(lcoc_core.BitmapNode(1, bit$PRIME_$1, bit$PRIME_$1, fl$1, ).inode_assoc(shift$PRIME_$1, (h$3 as dc.dynamic), (k$4 as dc.dynamic), (v$2 as dc.dynamic), ));
final dc.List<dc.dynamic> new_arr$5=(dc.List<dc.dynamic>.filled(size$4, new_node$1, ));
final dc.int n$7923_$AUTO_$4=idx$3;
dc.int i$9=0;
do {
if((i$9<n$7923_$AUTO_$4)){
final dc.dynamic v$7774_$AUTO_$13=(arr[i$9]);
new_arr$5[i$9]=v$7774_$AUTO_$13;
i$9=(1+i$9);
continue;
}
break;
} while(true);
dc.int i$10=(1+idx$3);
dc.int j$4=(1+i$10);
do {
if((i$10<size$4)){
final dc.dynamic v$7774_$AUTO_$14=(arr[j$4]);
new_arr$5[i$10]=v$7774_$AUTO_$14;
i$10=(1+i$10);
j$4=(1+j$4);
continue;
}
break;
} while(true);
return lcoc_core.BitmapNode((1+cnt), bitmap_hi, (bitmap_lo^bit$3), new_arr$5, );
}
if(dc.identical((v$2 as dc.Object?), v$PRIME_$1, )){
return this;
}
final dc.int arg$6=(bitmap_hi&bitmap_lo);
final dc.int arg$5=(bitmap_hi|bitmap_lo);
final dc.List<dc.dynamic> G$8512_$1=(dc.List.from(arr, growable: false, ));
final dc.dynamic v$7774_$AUTO_$15=v$2;
G$8512_$1[(1+idx$3)]=(v$7774_$AUTO_$15 as dc.dynamic);
return lcoc_core.BitmapNode(cnt, arg$6, arg$5, G$8512_$1, );
}
final dc.int n$7=(2*cnt);
dc.int i$11=0;
do {
if((i$11==n$7)){
final dc.int arg$7=(1+cnt);
final dc.List G$8513_$1=lcoc_core.aresize(arr, n$7, (2+n$7), v$2, );
final dc.dynamic v$7774_$AUTO_$16=k$4;
G$8513_$1[n$7]=(v$7774_$AUTO_$16 as dc.dynamic);
return lcoc_core.BitmapNode(arg$7, 0, 0, G$8513_$1, );
}
if((lcoc_core.$EQ_.$_invoke$2((arr[i$11]), k$4, ))){
final dc.int i$PLUS_1$1=(1+i$11);
if(dc.identical((arr[i$PLUS_1$1]), (v$2 as dc.Object?), )){
return this;
}
final dc.List<dc.dynamic> G$8514_$1=(dc.List.from(arr, growable: false, ));
final dc.dynamic v$7774_$AUTO_$17=v$2;
G$8514_$1[i$PLUS_1$1]=(v$7774_$AUTO_$17 as dc.dynamic);
return lcoc_core.BitmapNode(cnt, 0, 0, G$8514_$1, );
}
i$11=(2+i$11);
continue;
} while(true);
}

dc.dynamic inode_assoc_transient(dc.int shift$4, dc.dynamic h$4, dc.dynamic k$5, dc.dynamic v$3, ){
if((shift$4<32)){
final dc.int n$8=(((h$4 as dc.int)>>(31&shift$4))&31);
final dc.int bit$4=(4294967295&(1<<(31&n$8)));
final dc.int mask$4=(bit$4-1);
final dc.int idx$4=lcoc_core.u32x2_bit_count((mask$4&bitmap_hi), (mask$4&bitmap_lo), );
final dc.int hi$4=(bitmap_hi&bit$4);
final dc.int lo$4=(bitmap_lo&bit$4);
if((0==(hi$4|lo$4))){
final dc.int net_size$1=lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, );
final dc.int net_size$PRIME_$1=(2+net_size$1);
final dc.int idx$PRIME_$1=(1+idx$4);
final dc.List from_arr$1=arr;
if((arr.length<net_size$PRIME_$1)){
arr=lcoc_core.aresize(arr, net_size$1, (1+(7|(net_size$PRIME_$1-1))), null, );
}else{
}
dc.int i$12=(net_size$PRIME_$1-1);
dc.int j$5=(net_size$1-1);
do {
if((idx$PRIME_$1<i$12)){
final dc.dynamic v$7774_$AUTO_$18=(from_arr$1[j$5]);
arr[i$12]=v$7774_$AUTO_$18;
i$12=(i$12-1);
j$5=(j$5-1);
continue;
}
break;
} while(true);
final dc.dynamic v$7774_$AUTO_$19=k$5;
arr[idx$4]=(v$7774_$AUTO_$19 as dc.dynamic);
final dc.dynamic v$7774_$AUTO_$20=v$3;
arr[idx$PRIME_$1]=(v$7774_$AUTO_$20 as dc.dynamic);
cnt=(1+cnt);
bitmap_hi=(bitmap_hi|bit$4);
bitmap_lo=(bitmap_lo|bit$4);
}else if((0==(hi$4&lo$4))){
final lcoc_core.BitmapNode child$3=((arr[idx$4]) as lcoc_core.BitmapNode);
if((0==hi$4)){
final lcoc_core.BitmapNode child$PRIME_$1=((child$3.inode_assoc((shift$4+5), (h$4 as dc.dynamic), (k$5 as dc.dynamic), (v$3 as dc.dynamic), )) as lcoc_core.BitmapNode);
if(dc.identical(child$3, child$PRIME_$1, )){
}else{
bitmap_hi=(hi$4^bitmap_hi);
bitmap_lo=(hi$4^bitmap_lo);
final lcoc_core.BitmapNode v$7774_$AUTO_$21=child$PRIME_$1;
arr[idx$4]=v$7774_$AUTO_$21;
cnt=(cnt+(child$PRIME_$1.cnt-child$3.cnt));
}
}else{
final dc.int old_cnt_child$1=child$3.cnt;
child$3.inode_assoc_transient((shift$4+5), (h$4 as dc.dynamic), (k$5 as dc.dynamic), (v$3 as dc.dynamic), );
cnt=(cnt+(child$3.cnt-old_cnt_child$1));
}
}else{
final dc.dynamic k$PRIME_$3=(arr[idx$4]);
final dc.dynamic v$PRIME_$2=(arr[(1+idx$4)]);
late final dc.bool $if_$4;
if((lcoc_core.$EQ_.$_invoke$2(k$PRIME_$3, k$5, ))){
$if_$4=false;
}else{
$if_$4=true;
}
if($if_$4){
final dc.int net_size$2=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-1);
final dc.int gross_size$1=(-8&(7+net_size$2));
final dc.int shift$PRIME_$2=(5+shift$4);
final dc.dynamic o7533$3=k$PRIME_$3;
late final dc.int cast$2;
if((o7533$3 is lcoc_core.IHash$iface)){
cast$2=(((o7533$3 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions(o7533$3, ) as lcoc_core.IHash$ext).$_hash$0(o7533$3, )) as dc.int);
}
final dc.int $2=(cast$2>>(31&shift$PRIME_$2));
final dc.int n$PRIME_$2=($2&31);
final dc.int bit$PRIME_$2=(4294967295&(1<<(31&n$PRIME_$2)));
final dc.List<dc.dynamic> G$8515_$1=(dc.List<dc.dynamic>.filled(8, null, ));
final dc.dynamic v$7774_$AUTO_$22=k$PRIME_$3;
G$8515_$1[0]=v$7774_$AUTO_$22;
final dc.dynamic v$7774_$AUTO_$23=v$PRIME_$2;
G$8515_$1[1]=v$7774_$AUTO_$23;
final dc.dynamic new_node$2=(lcoc_core.BitmapNode(1, bit$PRIME_$2, bit$PRIME_$2, G$8515_$1, ).inode_assoc_transient(shift$PRIME_$2, (h$4 as dc.dynamic), (k$5 as dc.dynamic), (v$3 as dc.dynamic), ));
final dc.List from_arr$2=arr;
if((gross_size$1<arr.length)){
arr=lcoc_core.aresize(arr, idx$4, gross_size$1, null, );
}else{
}
final dc.dynamic v$7774_$AUTO_$24=new_node$2;
arr[idx$4]=v$7774_$AUTO_$24;
dc.int i$13=(1+idx$4);
dc.int j$6=(1+i$13);
do {
if((i$13<net_size$2)){
final dc.dynamic v$7774_$AUTO_$25=(from_arr$2[j$6]);
arr[i$13]=v$7774_$AUTO_$25;
i$13=(1+i$13);
j$6=(1+j$6);
continue;
}
break;
} while(true);
if((net_size$2<gross_size$1)){
final dc.Null v$7774_$AUTO_$26=null;
arr[net_size$2]=v$7774_$AUTO_$26;
}else{
}
cnt=(1+cnt);
bitmap_lo=(bitmap_lo^lo$4);
}else if(dc.identical((v$3 as dc.Object?), v$PRIME_$2, )){
}else{
final dc.dynamic v$7774_$AUTO_$27=v$3;
arr[(1+idx$4)]=(v$7774_$AUTO_$27 as dc.dynamic);
}
}
return this;
}
final dc.int n$9=(2*cnt);
dc.int i$14=0;
do {
if((i$14==n$9)){
cnt=(1+cnt);
final dc.List G$8516_$1=lcoc_core.aresize(arr, n$9, (2+n$9), v$3, );
final dc.dynamic v$7774_$AUTO_$28=k$5;
G$8516_$1[n$9]=(v$7774_$AUTO_$28 as dc.dynamic);
arr=G$8516_$1;
}else if((lcoc_core.$EQ_.$_invoke$2((arr[i$14]), k$5, ))){
final dc.int i$PLUS_1$2=(1+i$14);
if(dc.identical((arr[i$PLUS_1$2]), (v$3 as dc.Object?), )){
}else{
final dc.List<dc.dynamic> G$8517_$1=(dc.List.from(arr, growable: false, ));
final dc.dynamic v$7774_$AUTO_$29=v$3;
G$8517_$1[i$PLUS_1$2]=(v$7774_$AUTO_$29 as dc.dynamic);
arr=G$8517_$1;
}
}else{
i$14=(2+i$14);
continue;
}
break;
} while(true);
return this;
}

dc.dynamic inode_without_transient(dc.int shift$5, dc.dynamic h$5, dc.dynamic k$6, ){
if((shift$5<32)){
final dc.int n$10=(((h$5 as dc.int)>>(31&shift$5))&31);
final dc.int bit$5=(4294967295&(1<<(31&n$10)));
final dc.int mask$5=(bit$5-1);
final dc.int idx$5=lcoc_core.u32x2_bit_count((mask$5&bitmap_hi), (mask$5&bitmap_lo), );
final dc.int hi$5=(bitmap_hi&bit$5);
final dc.int lo$5=(bitmap_lo&bit$5);
if((0==(hi$5|lo$5))){
}else if((0==(hi$5&lo$5))){
final lcoc_core.BitmapNode child$4=((arr[idx$5]) as lcoc_core.BitmapNode);
final dc.int child_cnt$1=child$4.cnt;
late final dc.dynamic $if_$5;
if((0==hi$5)){
final dc.dynamic child$PRIME_$2=(child$4.inode_without(shift$5, (h$5 as dc.dynamic), (k$6 as dc.dynamic), ));
if(dc.identical(child$4, child$PRIME_$2, )){
$if_$5=null;
}else{
$if_$5=child$PRIME_$2;
}
}else{
$if_$5=(child$4.inode_without_transient((shift$5+5), (h$5 as dc.dynamic), (k$6 as dc.dynamic), ));
}
late final lcoc_core.BitmapNode? child$PRIME_$3;
if((null!=$if_$5)){
child$PRIME_$3=($if_$5 as lcoc_core.BitmapNode);
}else{
child$PRIME_$3=null;
}
if((child$PRIME_$3!=null)){
final dc.bool and$7187_$AUTO_$2=(1==(child$PRIME_$3 as lcoc_core.BitmapNode).cnt);
late final dc.bool $if_$6;
if(and$7187_$AUTO_$2){
$if_$6=(0==((child$PRIME_$3 as lcoc_core.BitmapNode).bitmap_hi^(child$PRIME_$3 as lcoc_core.BitmapNode).bitmap_lo));
}else{
$if_$6=and$7187_$AUTO_$2;
}
if($if_$6){
final dc.dynamic k$7=((child$PRIME_$3 as lcoc_core.BitmapNode).arr[0]);
final dc.dynamic v$4=((child$PRIME_$3 as lcoc_core.BitmapNode).arr[1]);
final dc.int net_size$3=(1+lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, ));
final dc.int gross_size$2=(-8&(7+net_size$3));
final dc.List from_arr$3=arr;
if((arr.length<net_size$3)){
arr=lcoc_core.aresize(arr, idx$5, gross_size$2, null, );
}else{
}
dc.int j$7=(1+idx$5);
dc.int i$15=(1+j$7);
do {
if((i$15<net_size$3)){
final dc.dynamic v$7774_$AUTO_$30=(from_arr$3[j$7]);
arr[i$15]=v$7774_$AUTO_$30;
j$7=(1+j$7);
i$15=(1+i$15);
continue;
}
break;
} while(true);
final dc.dynamic v$7774_$AUTO_$31=k$7;
arr[idx$5]=v$7774_$AUTO_$31;
final dc.dynamic v$7774_$AUTO_$32=v$4;
arr[(1+idx$5)]=v$7774_$AUTO_$32;
cnt=(cnt-1);
bitmap_hi=(bitmap_hi|bit$5);
bitmap_lo=(bitmap_lo|bit$5);
}else{
final lcoc_core.BitmapNode? v$7774_$AUTO_$33=child$PRIME_$3;
arr[idx$5]=v$7774_$AUTO_$33;
}
}else{
}
}else if((lcoc_core.$EQ_.$_invoke$2(k$6, (arr[idx$5]), ))){
final dc.int net_size$4=(lcoc_core.u32x2_bit_count(bitmap_hi, bitmap_lo, )-2);
final dc.int gross_size$3=(-8&(7+net_size$4));
final dc.List from_arr$4=arr;
if((gross_size$3<arr.length)){
arr=lcoc_core.aresize(arr, idx$5, gross_size$3, null, );
}else{
}
dc.int i$16=idx$5;
dc.int j$8=(2+idx$5);
do {
if((i$16<net_size$4)){
final dc.dynamic v$7774_$AUTO_$34=(from_arr$4[j$8]);
arr[i$16]=v$7774_$AUTO_$34;
i$16=(1+i$16);
j$8=(1+j$8);
continue;
}
break;
} while(true);
if(dc.identical(arr, from_arr$4, )){
final dc.Null v$7774_$AUTO_$35=null;
arr[net_size$4]=v$7774_$AUTO_$35;
final dc.Null v$7774_$AUTO_$36=null;
arr[(1+net_size$4)]=v$7774_$AUTO_$36;
}else{
}
cnt=(cnt-1);
bitmap_hi=(bitmap_hi^bit$5);
bitmap_lo=(bitmap_lo^bit$5);
}else{
}
return this;
}
final dc.int n$11=(2*cnt);
dc.int i$17=0;
do {
if((i$17==n$11)){
}else if((lcoc_core.$EQ_.$_invoke$2((arr[i$17]), k$6, ))){
final dc.int n$12=(n$11-2);
final dc.List new_arr$6=lcoc_core.ashrink(arr, n$12, );
if((i$17==n$12)){
}else{
final dc.dynamic v$7774_$AUTO_$37=(arr[n$12]);
new_arr$6[i$17]=v$7774_$AUTO_$37;
final dc.dynamic v$7774_$AUTO_$38=(arr[(1+n$12)]);
new_arr$6[(1+i$17)]=v$7774_$AUTO_$38;
}
arr=new_arr$6;
cnt=(cnt-1);
}else{
i$17=(2+i$17);
continue;
}
break;
} while(true);
return this;
}
}

// END BitmapNode

// BEGIN ChunkBuffer
class ChunkBuffer extends dc.Object implements lcoc_core.ICounted$iface {
dc.List? arr;
dc.int end;

ChunkBuffer(this.arr, this.end, ):super();

dc.dynamic add(dc.dynamic o$1, ){
final dc.dynamic v$7774_$AUTO_$1=o$1;
(arr as dc.List)[end]=(v$7774_$AUTO_$1 as dc.dynamic);
end=(1+end);
return null;
}

dc.dynamic chunk(){
final lcoc_core.ArrayChunk ret$1=lcoc_core.ArrayChunk((arr as dc.List), 0, end, );
arr=null;
return ret$1;
}

dc.dynamic $_count$0(){
return end;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ChunkBuffer

// BEGIN ChunkedCons
class ChunkedCons<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.IChunkedSeq$iface, lcoc_core.IReduce$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface {
final chunk;
final more;
final meta;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

ChunkedCons(this.chunk, this.more, this.meta, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.ChunkedCons<R> cast<R>(){
return lcoc_core.ChunkedCons<R>((chunk as dc.dynamic), (more as dc.dynamic), (meta as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.ChunkedCons((chunk as dc.dynamic), (more as dc.dynamic), (new_meta$1 as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic $_first$0(){
final dc.dynamic coll7481$1=chunk;
final dc.int n7482$1=0;
if((coll7481$1 is lcoc_core.IIndexed$iface)){
return ((coll7481$1 as lcoc_core.IIndexed$iface).$_nth$1(n7482$1, ));
}
return ((lcoc_core.IIndexed.extensions((coll7481$1 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$1 as dc.dynamic), n7482$1, ));
}

dc.dynamic $_rest$0(){
final dc.dynamic coll7390$1=chunk;
late final dc.num cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.num);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.num);
}
final dc.bool $1=(1<cast$1);
if($1){
final dc.dynamic coll7399$1=chunk;
late final dc.dynamic $if_$1;
if((coll7399$1 is lcoc_core.IChunk$iface)){
$if_$1=((coll7399$1 as lcoc_core.IChunk$iface).$_drop_first$0());
}else{
$if_$1=((lcoc_core.IChunk.extensions((coll7399$1 as dc.dynamic), ) as lcoc_core.IChunk$ext).$_drop_first$0((coll7399$1 as dc.dynamic), ));
}
return lcoc_core.ChunkedCons($if_$1, (more as dc.dynamic), null, -1, );
}
if((null==(more as dc.dynamic))){
return lcoc_core.$_EMPTY_LIST;
}
return more;
}

dc.dynamic $_next$0(){
final dc.dynamic coll7390$2=chunk;
late final dc.num cast$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.num);
}else{
cast$2=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.num);
}
final dc.bool $2=(1<cast$2);
if($2){
final dc.dynamic coll7399$2=chunk;
late final dc.dynamic $if_$2;
if((coll7399$2 is lcoc_core.IChunk$iface)){
$if_$2=((coll7399$2 as lcoc_core.IChunk$iface).$_drop_first$0());
}else{
$if_$2=((lcoc_core.IChunk.extensions((coll7399$2 as dc.dynamic), ) as lcoc_core.IChunk$ext).$_drop_first$0((coll7399$2 as dc.dynamic), ));
}
return lcoc_core.ChunkedCons($if_$2, (more as dc.dynamic), null, -1, );
}
if((null==(more as dc.dynamic))){
return null;
}
final dc.dynamic o7310$1=more;
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

dc.dynamic $_chunked_first$0(){
return chunk;
}

dc.dynamic $_chunked_rest$0(){
if((null==(more as dc.dynamic))){
return lcoc_core.$_EMPTY_LIST;
}
return more;
}

dc.dynamic $_chunked_next$0(){
if((null==(more as dc.dynamic))){
return null;
}
return more;
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
final dc.dynamic coll7399$3=chunk;
late final dc.dynamic coll7404$1;
if((coll7399$3 is lcoc_core.IChunk$iface)){
coll7404$1=((coll7399$3 as lcoc_core.IChunk$iface).$_drop_first$0());
}else{
coll7404$1=((lcoc_core.IChunk.extensions((coll7399$3 as dc.dynamic), ) as lcoc_core.IChunk$ext).$_drop_first$0((coll7399$3 as dc.dynamic), ));
}
final dc.dynamic f7405$1=f$1;
final dc.dynamic coll7481$2=chunk;
final dc.int n7482$2=0;
late final dc.dynamic init7406$1;
if((coll7481$2 is lcoc_core.IIndexed$iface)){
init7406$1=((coll7481$2 as lcoc_core.IIndexed$iface).$_nth$1(n7482$2, ));
}else{
init7406$1=((lcoc_core.IIndexed.extensions((coll7481$2 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$2 as dc.dynamic), n7482$2, ));
}
late final dc.dynamic val$1;
if((coll7404$1 is lcoc_core.IChunk$iface)){
val$1=((coll7404$1 as lcoc_core.IChunk$iface).$_chunk_reduce$2((f7405$1 as dc.dynamic), init7406$1, ));
}else{
val$1=((lcoc_core.IChunk.extensions(coll7404$1, ) as lcoc_core.IChunk$ext).$_chunk_reduce$2(coll7404$1, (f7405$1 as dc.dynamic), init7406$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
final dc.dynamic coll7370$1=more;
final dc.dynamic f7371$1=f$1;
final dc.dynamic start7372$1=val$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2((f7371$1 as dc.dynamic), start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), (f7371$1 as dc.dynamic), start7372$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic start$1, ){
final dc.dynamic coll7404$2=chunk;
final dc.dynamic f7405$2=f$2;
final dc.dynamic init7406$2=start$1;
late final dc.dynamic val$2;
if((coll7404$2 is lcoc_core.IChunk$iface)){
val$2=((coll7404$2 as lcoc_core.IChunk$iface).$_chunk_reduce$2((f7405$2 as dc.dynamic), (init7406$2 as dc.dynamic), ));
}else{
val$2=((lcoc_core.IChunk.extensions((coll7404$2 as dc.dynamic), ) as lcoc_core.IChunk$ext).$_chunk_reduce$2((coll7404$2 as dc.dynamic), (f7405$2 as dc.dynamic), (init7406$2 as dc.dynamic), ));
}
if(lcoc_core.reduced$QMARK_(val$2, )){
return lcoc_core.deref(val$2, );
}
final dc.dynamic coll7370$2=more;
final dc.dynamic f7371$2=f$2;
final dc.dynamic start7372$2=val$2;
if((coll7370$2 is lcoc_core.IReduce$iface)){
return ((coll7370$2 as lcoc_core.IReduce$iface).$_reduce$2((f7371$2 as dc.dynamic), start7372$2, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$2 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$2 as dc.dynamic), (f7371$2 as dc.dynamic), start7372$2, ));
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ChunkedCons

// BEGIN Cons
class Cons<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IList$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeq$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface {
final meta;
final $UNDERSCORE_first;
final rest;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

Cons(this.meta, this.$UNDERSCORE_first, this.rest, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.Cons<R> cast<R>(){
return lcoc_core.Cons<R>((meta as dc.dynamic), ($UNDERSCORE_first as dc.dynamic), (rest as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.Cons((new_meta$1 as dc.dynamic), ($UNDERSCORE_first as dc.dynamic), (rest as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_first$0(){
return $UNDERSCORE_first;
}

dc.dynamic $_rest$0(){
if((null==(rest as dc.dynamic))){
return lcoc_core.$_EMPTY_LIST;
}
return rest;
}

dc.dynamic $_next$0(){
if((null==(rest as dc.dynamic))){
return null;
}
final dc.dynamic o7310$1=rest;
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.Cons(null, (o$1 as dc.dynamic), this, -1, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Cons

// BEGIN Delay
class Delay extends dc.Object implements lcoc_core.IDeref$iface, lcoc_core.IPending$iface {
var val;
var f;

Delay(this.val, this.f, ):super();

dc.dynamic $_deref$0(){
final dc.dynamic temp$7205_$AUTO_$1=f;
if((null==(temp$7205_$AUTO_$1 as dc.dynamic))){
}else{
final dc.dynamic f$PRIME_$1=temp$7205_$AUTO_$1;
if((f$PRIME_$1 is dc.Function)){
val=(f$PRIME_$1 as dc.Function)();
}else if((f$PRIME_$1 is lcoc_core.IFn$iface)){
val=((f$PRIME_$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
val=(lcoc_core.IFn.extensions(f$PRIME_$1, ).$_invoke$0(f$PRIME_$1, ));
}
f=null;
}
return val;
}

dc.dynamic $_realized$QMARK_$0(){
return (null==(f as dc.dynamic));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Delay

// BEGIN Eduction
class Eduction<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.IterableMixin<E> implements lcoc_core.ISeqable$iface, lcoc_core.IReduce$iface {
final xform;
final coll;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

Eduction(this.xform, this.coll, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterator<E> get iterator{
return (lcoc_core.iterator.$_invoke$2(xform, coll, ));
}

lcoc_core.Eduction<R> cast<R>(){
return lcoc_core.Eduction<R>((xform as dc.dynamic), (coll as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_seq$0(){
final dc.dynamic o7310$1=(lcoc_core.sequence.$_invoke$2(xform, coll, ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

dc.dynamic $_reduce$1(dc.dynamic rf$1, ){
final dc.Iterator it$1=(lcoc_core.iterator.$_invoke$2(xform, coll, ));
if((it$1.moveNext())){
dc.dynamic acc$1=it$1.current;
do {
if((it$1.moveNext())){
final dc.dynamic arg$1=it$1.current;
late final dc.dynamic acc$2;
if((rf$1 is dc.Function)){
acc$2=(rf$1 as dc.Function)(acc$1, arg$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
acc$2=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.unreduced(acc$2, );
}
acc$1=acc$2;
continue;
}
return acc$1;
} while(true);
}else if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic rf$2, dc.dynamic init$1, ){
final dc.dynamic coll7370$1=coll;
final dc.dynamic arg$2=(lcoc_core.completing.$_invoke$1(rf$2, ));
late final dc.dynamic f7371$1;
if((xform is dc.Function)){
f7371$1=(xform as dc.Function)(arg$2, );
}else if((xform is lcoc_core.IFn$iface)){
f7371$1=((xform as lcoc_core.IFn$iface).$_invoke$1(arg$2, ));
}else{
f7371$1=(lcoc_core.IFn.extensions(xform, ).$_invoke$1(xform, arg$2, ));
}
final dc.dynamic start7372$1=init$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Eduction

// BEGIN EqualsEquivMixin
abstract class EqualsEquivMixin extends dc.Object {

dc.bool operator ==(dc.Object y$1, ){
final lcoc_core.EqualsEquivMixin o7471$1=this;
final dc.Object other7472$1=y$1;
if((o7471$1 is lcoc_core.IEquiv$iface)){
return ((o7471$1 as lcoc_core.IEquiv$iface).$_equiv$1(other7472$1, ));
}
return ((lcoc_core.IEquiv.extensions(o7471$1, ) as lcoc_core.IEquiv$ext).$_equiv$1(o7471$1, other7472$1, ));
}

dc.int get hashCode{
final lcoc_core.EqualsEquivMixin o7533$1=this;
if((o7533$1 is lcoc_core.IHash$iface)){
return ((o7533$1 as lcoc_core.IHash$iface).$_hash$0());
}
return ((lcoc_core.IHash.extensions(o7533$1, ) as lcoc_core.IHash$ext).$_hash$0(o7533$1, ));
}
}

// END EqualsEquivMixin

// BEGIN EquivSequentialHashMixin
abstract class EquivSequentialHashMixin extends dc.Object implements lcoc_core.ISequential$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface {
late dc.int $UNDERSCORE_$UNDERSCORE_hash;

dc.bool operator ==(dc.Object y$1, ){
return lcoc_core.$_equiv_sequential(this, y$1, );
}

dc.int get hashCode{
final lcoc_core.EquivSequentialHashMixin o7533$1=this;
return (o7533$1.$_hash$0());
}

dc.dynamic $_equiv$1(dc.dynamic y$2, ){
return lcoc_core.$_equiv_sequential(this, y$2, );
}

dc.dynamic $_hash$0(){
final dc.int h$7900_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$7900_$AUTO_$1<0)){
final dc.int h$7900_$AUTO_$2=lcoc_core.hash_ordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$7900_$AUTO_$2;
return h$7900_$AUTO_$2;
}
return h$7900_$AUTO_$1;
}

dc.dynamic $_hash_realized$QMARK_$0(){
return (-1!=$UNDERSCORE_$UNDERSCORE_hash);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END EquivSequentialHashMixin

// BEGIN ExceptionInfo
class ExceptionInfo extends dc.Object implements lcoc_core.IExceptionInfo$iface {
final msg;
final data;
final ex;

const ExceptionInfo(this.msg, this.data, this.ex, ):super();

dc.dynamic get message{
return msg;
}

dc.dynamic get cause{
return ex;
}

dc.dynamic $_ex_data$0(){
return data;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ExceptionInfo

// BEGIN Fn
var Fn=lcoc_core.Fn$iprot();

// END Fn

// BEGIN Fn$ext
abstract class Fn$ext extends dc.Object {
}

// END Fn$ext

// BEGIN Fn$iface
abstract class Fn$iface extends dc.Object {
}

// END Fn$iface

// BEGIN Fn$iprot
class Fn$iprot extends dc.Object implements lcoc_core.IProtocol {

const Fn$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.Fn$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol Fn found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Fn$iprot

// BEGIN HashCache
class HashCache extends dc.Object {
dc.Map<dc.dynamic, dc.int> young;
dc.Map<dc.dynamic, dc.int> old;

HashCache(this.young, this.old, ):super();

dc.dynamic insert(dc.dynamic o$1, dc.int h$1, ){
if((256==young.length)){
final dc.Map<dc.dynamic, dc.int> bak$1=old;
old=young;
bak$1.clear();
young=bak$1;
}else{
}
return (young[(o$1 as dc.dynamic)]=h$1);
}

dc.int? lookup(dc.dynamic o$2, ){
final dc.int? or$7228_$AUTO_$1=(young[(o$2 as dc.Object?)]);
if((or$7228_$AUTO_$1!=null)){
return or$7228_$AUTO_$1;
}
final dc.int? temp$7205_$AUTO_$1=(old[(o$2 as dc.Object?)]);
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.int h$2=(temp$7205_$AUTO_$1 as dc.int);
this.insert((o$2 as dc.dynamic), h$2, );
return h$2;
}
}

// END HashCache

// BEGIN IAssociative
var IAssociative=lcoc_core.IAssociative$iprot();

// END IAssociative

// BEGIN IAssociative$ext
abstract class IAssociative$ext extends dc.Object {

dc.dynamic $_assoc$2(dc.dynamic coll$1, dc.dynamic k$2, dc.dynamic v$2, );
}

// END IAssociative$ext

// BEGIN IAssociative$iface
abstract class IAssociative$iface extends dc.Object {

dc.dynamic $_assoc$2(dc.dynamic k$1, dc.dynamic v$1, );
}

// END IAssociative$iface

// BEGIN IAssociative$iprot
class IAssociative$iprot extends dc.Object implements lcoc_core.IProtocol {

const IAssociative$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IAssociative$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.Null);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$Null$$IAssociative$D$$extension;
}
throw dc.Exception((("No extension of protocol IAssociative found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IAssociative$iprot

// BEGIN IAtom
var IAtom=lcoc_core.IAtom$iprot();

// END IAtom

// BEGIN IAtom$ext
abstract class IAtom$ext extends dc.Object {
}

// END IAtom$ext

// BEGIN IAtom$iface
abstract class IAtom$iface extends dc.Object {
}

// END IAtom$iface

// BEGIN IAtom$iprot
class IAtom$iprot extends dc.Object implements lcoc_core.IProtocol {

const IAtom$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IAtom$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IAtom found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IAtom$iprot

// BEGIN IChunk
var IChunk=lcoc_core.IChunk$iprot();

// END IChunk

// BEGIN IChunk$ext
abstract class IChunk$ext extends dc.Object {

dc.dynamic $_drop_first$0(dc.dynamic coll$1, );

dc.dynamic $_chunk_reduce$2(dc.dynamic coll$2, dc.dynamic f$2, dc.dynamic init$2, );
}

// END IChunk$ext

// BEGIN IChunk$iface
abstract class IChunk$iface extends dc.Object {

dc.dynamic $_drop_first$0();

dc.dynamic $_chunk_reduce$2(dc.dynamic f$1, dc.dynamic init$1, );
}

// END IChunk$iface

// BEGIN IChunk$iprot
class IChunk$iprot extends dc.Object implements lcoc_core.IProtocol {

const IChunk$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IChunk$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IChunk found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IChunk$iprot

// BEGIN IChunkedSeq
var IChunkedSeq=lcoc_core.IChunkedSeq$iprot();

// END IChunkedSeq

// BEGIN IChunkedSeq$ext
abstract class IChunkedSeq$ext extends dc.Object {

dc.dynamic $_chunked_first$0(dc.dynamic coll$1, );

dc.dynamic $_chunked_rest$0(dc.dynamic coll$2, );

dc.dynamic $_chunked_next$0(dc.dynamic coll$3, );
}

// END IChunkedSeq$ext

// BEGIN IChunkedSeq$iface
abstract class IChunkedSeq$iface extends dc.Object {

dc.dynamic $_chunked_first$0();

dc.dynamic $_chunked_rest$0();

dc.dynamic $_chunked_next$0();
}

// END IChunkedSeq$iface

// BEGIN IChunkedSeq$iprot
class IChunkedSeq$iprot extends dc.Object implements lcoc_core.IProtocol {

const IChunkedSeq$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IChunkedSeq$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IChunkedSeq found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IChunkedSeq$iprot

// BEGIN ICollection
var ICollection=lcoc_core.ICollection$iprot();

// END ICollection

// BEGIN ICollection$ext
abstract class ICollection$ext extends dc.Object {

dc.dynamic $_conj$1(dc.dynamic coll$1, dc.dynamic o$2, );
}

// END ICollection$ext

// BEGIN ICollection$iface
abstract class ICollection$iface extends dc.Object {

dc.dynamic $_conj$1(dc.dynamic o$1, );
}

// END ICollection$iface

// BEGIN ICollection$iprot
class ICollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const ICollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ICollection$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.Null);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$Null$$ICollection$D$$extension;
}
throw dc.Exception((("No extension of protocol ICollection found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ICollection$iprot

// BEGIN ICounted
var ICounted=lcoc_core.ICounted$iprot();

// END ICounted

// BEGIN ICounted$ext
abstract class ICounted$ext extends dc.Object {

dc.dynamic $_count$0(dc.dynamic coll$1, );
}

// END ICounted$ext

// BEGIN ICounted$iface
abstract class ICounted$iface extends dc.Object {

dc.dynamic $_count$0();
}

// END ICounted$iface

// BEGIN ICounted$iprot
class ICounted$iprot extends dc.Object implements lcoc_core.IProtocol {

const ICounted$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ICounted$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.MapEntry);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
final dc.bool or$7228_$AUTO_$3=(x$1 is dc.Match);
if(or$7228_$AUTO_$3){
return or$7228_$AUTO_$3;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.MapEntry)){
return lcoc_core.$C$MapEntry$$ICounted$D$$extension;
}
if((x$2 is dc.Match)){
return lcoc_core.$C$Match$$ICounted$D$$extension;
}
return lcoc_core.$C$fallback$$ICounted$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ICounted$iprot

// BEGIN IDeref
var IDeref=lcoc_core.IDeref$iprot();

// END IDeref

// BEGIN IDeref$ext
abstract class IDeref$ext extends dc.Object {

dc.dynamic $_deref$0(dc.dynamic o$1, );
}

// END IDeref$ext

// BEGIN IDeref$iface
abstract class IDeref$iface extends dc.Object {

dc.dynamic $_deref$0();
}

// END IDeref$iface

// BEGIN IDeref$iprot
class IDeref$iprot extends dc.Object implements lcoc_core.IProtocol {

const IDeref$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IDeref$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IDeref found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IDeref$iprot

// BEGIN IEditableCollection
var IEditableCollection=lcoc_core.IEditableCollection$iprot();

// END IEditableCollection

// BEGIN IEditableCollection$ext
abstract class IEditableCollection$ext extends dc.Object {

dc.dynamic $_as_transient$0(dc.dynamic coll$1, );
}

// END IEditableCollection$ext

// BEGIN IEditableCollection$iface
abstract class IEditableCollection$iface extends dc.Object {

dc.dynamic $_as_transient$0();
}

// END IEditableCollection$iface

// BEGIN IEditableCollection$iprot
class IEditableCollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const IEditableCollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IEditableCollection$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IEditableCollection found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IEditableCollection$iprot

// BEGIN IEmptyableCollection
var IEmptyableCollection=lcoc_core.IEmptyableCollection$iprot();

// END IEmptyableCollection

// BEGIN IEmptyableCollection$ext
abstract class IEmptyableCollection$ext extends dc.Object {

dc.dynamic $_empty$0(dc.dynamic coll$1, );
}

// END IEmptyableCollection$ext

// BEGIN IEmptyableCollection$iface
abstract class IEmptyableCollection$iface extends dc.Object {

dc.dynamic $_empty$0();
}

// END IEmptyableCollection$iface

// BEGIN IEmptyableCollection$iprot
class IEmptyableCollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const IEmptyableCollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IEmptyableCollection$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$IEmptyableCollection$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IEmptyableCollection$iprot

// BEGIN IEquiv
var IEquiv=lcoc_core.IEquiv$iprot();

// END IEquiv

// BEGIN IEquiv$ext
abstract class IEquiv$ext extends dc.Object {

dc.dynamic $_equiv$1(dc.dynamic o$1, dc.dynamic other$2, );
}

// END IEquiv$ext

// BEGIN IEquiv$iface
abstract class IEquiv$iface extends dc.Object {

dc.dynamic $_equiv$1(dc.dynamic other$1, );
}

// END IEquiv$iface

// BEGIN IEquiv$iprot
class IEquiv$iprot extends dc.Object implements lcoc_core.IProtocol {

const IEquiv$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IEquiv$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$IEquiv$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IEquiv$iprot

// BEGIN IExceptionInfo
var IExceptionInfo=lcoc_core.IExceptionInfo$iprot();

// END IExceptionInfo

// BEGIN IExceptionInfo$ext
abstract class IExceptionInfo$ext extends dc.Object {

dc.dynamic $_ex_data$0(dc.dynamic e$1, );
}

// END IExceptionInfo$ext

// BEGIN IExceptionInfo$iface
abstract class IExceptionInfo$iface extends dc.Object {

dc.dynamic $_ex_data$0();
}

// END IExceptionInfo$iface

// BEGIN IExceptionInfo$iprot
class IExceptionInfo$iprot extends dc.Object implements lcoc_core.IProtocol {

const IExceptionInfo$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IExceptionInfo$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$IExceptionInfo$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IExceptionInfo$iprot

// BEGIN IFind
var IFind=lcoc_core.IFind$iprot();

// END IFind

// BEGIN IFind$ext
abstract class IFind$ext extends dc.Object {

dc.dynamic $_find$1(dc.dynamic coll$1, dc.dynamic k$2, );
}

// END IFind$ext

// BEGIN IFind$iface
abstract class IFind$iface extends dc.Object {

dc.dynamic $_find$1(dc.dynamic k$1, );
}

// END IFind$iface

// BEGIN IFind$iprot
class IFind$iprot extends dc.Object implements lcoc_core.IProtocol {

const IFind$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IFind$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$IFind$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFind$iprot

// BEGIN IFn
var IFn=lcoc_core.IFn$iprot();

// END IFn

// BEGIN IFn$ext
abstract class IFn$ext extends dc.Object {

dc.dynamic $_invoke$6(dc.dynamic $this_$1, dc.dynamic a$11, dc.dynamic b$10, dc.dynamic c$9, dc.dynamic d$8, dc.dynamic e$7, dc.dynamic f$6, );

dc.dynamic $_invoke$0(dc.dynamic $this_$2, );

dc.dynamic $_invoke$3(dc.dynamic $this_$3, dc.dynamic a$12, dc.dynamic b$11, dc.dynamic c$10, );

dc.dynamic $_invoke$5(dc.dynamic $this_$4, dc.dynamic a$13, dc.dynamic b$12, dc.dynamic c$11, dc.dynamic d$9, dc.dynamic e$8, );

dc.dynamic $_invoke$2(dc.dynamic $this_$5, dc.dynamic a$14, dc.dynamic b$13, );

dc.dynamic $_invoke$1(dc.dynamic $this_$6, dc.dynamic a$15, );

dc.dynamic $_invoke$8(dc.dynamic $this_$7, dc.dynamic a$16, dc.dynamic b$14, dc.dynamic c$12, dc.dynamic d$10, dc.dynamic e$9, dc.dynamic f$7, dc.dynamic g$5, dc.dynamic h$4, );

dc.dynamic $_invoke$4(dc.dynamic $this_$8, dc.dynamic a$17, dc.dynamic b$15, dc.dynamic c$13, dc.dynamic d$11, );

dc.dynamic $_invoke$9(dc.dynamic $this_$9, dc.dynamic a$18, dc.dynamic b$16, dc.dynamic c$14, dc.dynamic d$12, dc.dynamic e$10, dc.dynamic f$8, dc.dynamic g$6, dc.dynamic h$5, dc.dynamic i$3, );

dc.dynamic $_invoke$7(dc.dynamic $this_$10, dc.dynamic a$19, dc.dynamic b$17, dc.dynamic c$15, dc.dynamic d$13, dc.dynamic e$11, dc.dynamic f$9, dc.dynamic g$7, );

dc.dynamic $_invoke_more$10(dc.dynamic $this_$11, dc.dynamic a$20, dc.dynamic b$18, dc.dynamic c$16, dc.dynamic d$14, dc.dynamic e$12, dc.dynamic f$10, dc.dynamic g$8, dc.dynamic h$6, dc.dynamic i$4, dc.dynamic rest$2, );

dc.dynamic $_apply$1(dc.dynamic $this_$12, dc.dynamic more$2, );
}

// END IFn$ext

// BEGIN IFn$iface
abstract class IFn$iface extends dc.Object {

dc.dynamic $_invoke$6(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic e$1, dc.dynamic f$1, );

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$3(dc.dynamic a$2, dc.dynamic b$2, dc.dynamic c$2, );

dc.dynamic $_invoke$5(dc.dynamic a$3, dc.dynamic b$3, dc.dynamic c$3, dc.dynamic d$2, dc.dynamic e$2, );

dc.dynamic $_invoke$2(dc.dynamic a$4, dc.dynamic b$4, );

dc.dynamic $_invoke$1(dc.dynamic a$5, );

dc.dynamic $_invoke$8(dc.dynamic a$6, dc.dynamic b$5, dc.dynamic c$4, dc.dynamic d$3, dc.dynamic e$3, dc.dynamic f$2, dc.dynamic g$1, dc.dynamic h$1, );

dc.dynamic $_invoke$4(dc.dynamic a$7, dc.dynamic b$6, dc.dynamic c$5, dc.dynamic d$4, );

dc.dynamic $_invoke$9(dc.dynamic a$8, dc.dynamic b$7, dc.dynamic c$6, dc.dynamic d$5, dc.dynamic e$4, dc.dynamic f$3, dc.dynamic g$2, dc.dynamic h$2, dc.dynamic i$1, );

dc.dynamic $_invoke$7(dc.dynamic a$9, dc.dynamic b$8, dc.dynamic c$7, dc.dynamic d$6, dc.dynamic e$5, dc.dynamic f$4, dc.dynamic g$3, );

dc.dynamic $_invoke_more$10(dc.dynamic a$10, dc.dynamic b$9, dc.dynamic c$8, dc.dynamic d$7, dc.dynamic e$6, dc.dynamic f$5, dc.dynamic g$4, dc.dynamic h$3, dc.dynamic i$2, dc.dynamic rest$1, );

dc.dynamic $_apply$1(dc.dynamic more$1, );
}

// END IFn$iface

// BEGIN IFn$iprot
class IFn$iprot extends dc.Object implements lcoc_core.IProtocol {

const IFn$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IFn$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IFn found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFn$iprot

// BEGIN IFnMixin_XX
abstract class IFnMixin_XX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic call([arg1$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if((arg2$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$2 as dc.dynamic), ));
}
return (this.$_invoke$2((arg1$2 as dc.dynamic), (arg2$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8660$1, ){
final dc.dynamic o7310$1=more8660$1;
late final dc.dynamic more8660$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8660$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8660$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8660$2)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$3=lcoc_core.first(more8660$2, );
final dc.dynamic more8660$3=lcoc_core.next(more8660$2, );
if((null==(more8660$3 as dc.dynamic))){
return (this.$_invoke$1((arg1$3 as dc.dynamic), ));
}
final dc.dynamic arg2$2=lcoc_core.first(more8660$3, );
final dc.dynamic more8660$4=lcoc_core.next(more8660$3, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XX

// BEGIN IFnMixin_XXX
abstract class IFnMixin_XXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, );

dc.dynamic call([arg1$3 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$3==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if((arg2$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$3 as dc.dynamic), ));
}
if((arg3$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$3 as dc.dynamic), (arg2$2 as dc.dynamic), ));
}
return (this.$_invoke$3((arg1$3 as dc.dynamic), (arg2$2 as dc.dynamic), (arg3$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8390$1, ){
final dc.dynamic o7310$1=more8390$1;
late final dc.dynamic more8390$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8390$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8390$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8390$2)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$4=lcoc_core.first(more8390$2, );
final dc.dynamic more8390$3=lcoc_core.next(more8390$2, );
if((null==(more8390$3 as dc.dynamic))){
return (this.$_invoke$1((arg1$4 as dc.dynamic), ));
}
final dc.dynamic arg2$3=lcoc_core.first(more8390$3, );
final dc.dynamic more8390$4=lcoc_core.next(more8390$3, );
if((null==(more8390$4 as dc.dynamic))){
return (this.$_invoke$2((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), ));
}
final dc.dynamic arg3$2=lcoc_core.first(more8390$4, );
final dc.dynamic more8390$5=lcoc_core.next(more8390$4, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXX

// BEGIN IFnMixin_XXXX
abstract class IFnMixin_XXXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, );

dc.dynamic call([arg1$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$3 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$4==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if((arg2$3==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$4 as dc.dynamic), ));
}
if((arg3$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), ));
}
if((arg4$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$2 as dc.dynamic), ));
}
return (this.$_invoke$4((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$2 as dc.dynamic), (arg4$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8605$1, ){
final dc.dynamic o7310$1=more8605$1;
late final dc.dynamic more8605$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8605$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8605$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8605$2)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$5=lcoc_core.first(more8605$2, );
final dc.dynamic more8605$3=lcoc_core.next(more8605$2, );
if((null==(more8605$3 as dc.dynamic))){
return (this.$_invoke$1((arg1$5 as dc.dynamic), ));
}
final dc.dynamic arg2$4=lcoc_core.first(more8605$3, );
final dc.dynamic more8605$4=lcoc_core.next(more8605$3, );
if((null==(more8605$4 as dc.dynamic))){
return (this.$_invoke$2((arg1$5 as dc.dynamic), (arg2$4 as dc.dynamic), ));
}
final dc.dynamic arg3$3=lcoc_core.first(more8605$4, );
final dc.dynamic more8605$5=lcoc_core.next(more8605$4, );
if((null==(more8605$5 as dc.dynamic))){
return (this.$_invoke$3((arg1$5 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$3 as dc.dynamic), ));
}
final dc.dynamic arg4$2=lcoc_core.first(more8605$5, );
final dc.dynamic more8605$6=lcoc_core.next(more8605$5, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXXX

// BEGIN IFnMixin_XXXXXXY
abstract class IFnMixin_XXXXXXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$4(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$6(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, dc.dynamic arg6$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$3, );

dc.dynamic $_invoke$2(dc.dynamic arg1$5, dc.dynamic arg2$4, );

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$1, ){
final dc.dynamic arg$6=(arg1$8 as dc.dynamic);
final dc.dynamic arg$5=(arg2$7 as dc.dynamic);
final dc.dynamic arg$4=(arg3$6 as dc.dynamic);
final dc.dynamic arg$3=(arg4$5 as dc.dynamic);
final dc.dynamic arg$2=(arg5$4 as dc.dynamic);
final dc.dynamic arg$1=(arg6$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg7$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, arg$4, arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$12=(arg1$9 as dc.dynamic);
final dc.dynamic arg$11=(arg2$8 as dc.dynamic);
final dc.dynamic arg$10=(arg3$7 as dc.dynamic);
final dc.dynamic arg$9=(arg4$6 as dc.dynamic);
final dc.dynamic arg$8=(arg5$5 as dc.dynamic);
final dc.dynamic arg$7=(arg6$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg7$2, arg8$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, arg$9, arg$8, arg$7, $if_$2, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$18=(arg1$10 as dc.dynamic);
final dc.dynamic arg$17=(arg2$9 as dc.dynamic);
final dc.dynamic arg$16=(arg3$8 as dc.dynamic);
final dc.dynamic arg$15=(arg4$7 as dc.dynamic);
final dc.dynamic arg$14=(arg5$6 as dc.dynamic);
final dc.dynamic arg$13=(arg6$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, arg$16, arg$15, arg$14, arg$13, $if_$3, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$6, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8741$1, ){
final dc.dynamic arg$24=(arg1$11 as dc.dynamic);
final dc.dynamic arg$23=(arg2$10 as dc.dynamic);
final dc.dynamic arg$22=(arg3$9 as dc.dynamic);
final dc.dynamic arg$21=(arg4$8 as dc.dynamic);
final dc.dynamic arg$20=(arg5$7 as dc.dynamic);
final dc.dynamic arg$19=(arg6$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=([arg7$4, arg8$3, arg9$2, ]+(more8741$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, arg$21, arg$20, arg$19, $if_$4, ));
}

dc.dynamic call([arg1$12 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$12==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if((arg2$11==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if((arg4$9==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
if((arg5$8==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
if((arg6$7==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$5((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), ));
}
if(dc.identical((arg7$5 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$6((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), (arg6$7 as dc.dynamic), ));
}
final dc.dynamic arg$30=(arg1$12 as dc.dynamic);
final dc.dynamic arg$29=(arg2$11 as dc.dynamic);
final dc.dynamic arg$28=(arg3$10 as dc.dynamic);
final dc.dynamic arg$27=(arg4$9 as dc.dynamic);
final dc.dynamic arg$26=(arg5$8 as dc.dynamic);
final dc.dynamic arg$25=(arg6$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=([arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$30, arg$29, arg$28, arg$27, arg$26, arg$25, $if_$5, ));
}

dc.dynamic $_apply$1(dc.dynamic more8741$2, ){
final dc.dynamic o7310$6=more8741$2;
late final dc.dynamic more8741$3;
if((o7310$6 is lcoc_core.ISeqable$iface)){
more8741$3=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8741$3=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
if((null==more8741$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8741$3, );
final dc.dynamic more8741$4=lcoc_core.next(more8741$3, );
if((null==(more8741$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8741$4, );
final dc.dynamic more8741$5=lcoc_core.next(more8741$4, );
if((null==(more8741$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8741$5, );
final dc.dynamic more8741$6=lcoc_core.next(more8741$5, );
if((null==(more8741$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8741$6, );
final dc.dynamic more8741$7=lcoc_core.next(more8741$6, );
if((null==(more8741$7 as dc.dynamic))){
return (this.$_invoke$4((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8741$7, );
final dc.dynamic more8741$8=lcoc_core.next(more8741$7, );
if((null==(more8741$8 as dc.dynamic))){
return (this.$_invoke$5((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), ));
}
final dc.dynamic arg6$8=lcoc_core.first(more8741$8, );
final dc.dynamic more8741$9=lcoc_core.next(more8741$8, );
if((null==(more8741$9 as dc.dynamic))){
return (this.$_invoke$6((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), (more8741$9 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXXXXXY

// BEGIN IFnMixin_XXXY
abstract class IFnMixin_XXXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.dynamic arg$3=(arg1$5 as dc.dynamic);
final dc.dynamic arg$2=(arg2$4 as dc.dynamic);
final dc.dynamic arg$1=(arg3$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$6=(arg1$6 as dc.dynamic);
final dc.dynamic arg$5=(arg2$5 as dc.dynamic);
final dc.dynamic arg$4=(arg3$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, arg$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$9=(arg1$7 as dc.dynamic);
final dc.dynamic arg$8=(arg2$6 as dc.dynamic);
final dc.dynamic arg$7=(arg3$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$9, arg$8, arg$7, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$12=(arg1$8 as dc.dynamic);
final dc.dynamic arg$11=(arg2$7 as dc.dynamic);
final dc.dynamic arg$10=(arg3$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$15=(arg1$9 as dc.dynamic);
final dc.dynamic arg$14=(arg2$8 as dc.dynamic);
final dc.dynamic arg$13=(arg3$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$15, arg$14, arg$13, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$18=(arg1$10 as dc.dynamic);
final dc.dynamic arg$17=(arg2$9 as dc.dynamic);
final dc.dynamic arg$16=(arg3$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, arg$16, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8537$1, ){
final dc.dynamic arg$21=(arg1$11 as dc.dynamic);
final dc.dynamic arg$20=(arg2$10 as dc.dynamic);
final dc.dynamic arg$19=(arg3$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8537$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$21, arg$20, arg$19, $if_$7, ));
}

dc.dynamic call([arg1$12 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$12==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if((arg2$11==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if(dc.identical((arg4$8 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
final dc.dynamic arg$24=(arg1$12 as dc.dynamic);
final dc.dynamic arg$23=(arg2$11 as dc.dynamic);
final dc.dynamic arg$22=(arg3$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8537$2, ){
final dc.dynamic o7310$9=more8537$2;
late final dc.dynamic more8537$3;
if((o7310$9 is lcoc_core.ISeqable$iface)){
more8537$3=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8537$3=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
if((null==more8537$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8537$3, );
final dc.dynamic more8537$4=lcoc_core.next(more8537$3, );
if((null==(more8537$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8537$4, );
final dc.dynamic more8537$5=lcoc_core.next(more8537$4, );
if((null==(more8537$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8537$5, );
final dc.dynamic more8537$6=lcoc_core.next(more8537$5, );
if((null==(more8537$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (more8537$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXXY

// BEGIN IFnMixin_XXY
abstract class IFnMixin_XXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.dynamic arg$2=(arg1$4 as dc.dynamic);
final dc.dynamic arg$1=(arg2$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg3$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$4=(arg1$5 as dc.dynamic);
final dc.dynamic arg$3=(arg2$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg3$2, arg4$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$4, arg$3, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$6=(arg1$6 as dc.dynamic);
final dc.dynamic arg$5=(arg2$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$8=(arg1$7 as dc.dynamic);
final dc.dynamic arg$7=(arg2$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$8, arg$7, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$10=(arg1$8 as dc.dynamic);
final dc.dynamic arg$9=(arg2$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$10, arg$9, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$12=(arg1$9 as dc.dynamic);
final dc.dynamic arg$11=(arg2$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$14=(arg1$10 as dc.dynamic);
final dc.dynamic arg$13=(arg2$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$14, arg$13, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8294$1, ){
final dc.dynamic arg$16=(arg1$11 as dc.dynamic);
final dc.dynamic arg$15=(arg2$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8294$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$16, arg$15, $if_$8, ));
}

dc.dynamic call([arg1$12 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$12==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if((arg2$11==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
if(dc.identical((arg3$9 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
final dc.dynamic arg$18=(arg1$12 as dc.dynamic);
final dc.dynamic arg$17=(arg2$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=([arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8294$2, ){
final dc.dynamic o7310$10=more8294$2;
late final dc.dynamic more8294$3;
if((o7310$10 is lcoc_core.ISeqable$iface)){
more8294$3=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8294$3=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
if((null==more8294$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8294$3, );
final dc.dynamic more8294$4=lcoc_core.next(more8294$3, );
if((null==(more8294$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8294$4, );
final dc.dynamic more8294$5=lcoc_core.next(more8294$4, );
if((null==(more8294$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (more8294$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XXY

// BEGIN IFnMixin_XY
abstract class IFnMixin_XY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.dynamic arg$1=(arg1$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg2$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$1, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.dynamic arg$2=(arg1$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg2$2, arg3$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$2, $if_$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$3=(arg1$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$3, $if_$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$4=(arg1$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$4, $if_$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$5=(arg1$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$5, $if_$5, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$6=(arg1$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$6, $if_$6, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$7=(arg1$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$7, $if_$7, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$8=(arg1$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$8, $if_$8, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8502$1, ){
final dc.dynamic arg$9=(arg1$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=([arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8502$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$9, $if_$9, ));
}

dc.dynamic call([arg1$12 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$12==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if(dc.identical((arg2$10 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
final dc.dynamic arg$10=(arg1$12 as dc.dynamic);
final dc.List<dc.dynamic> o7310$10=([arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7310$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$10, ));
}
return (this.$_invoke$vararg(arg$10, $if_$10, ));
}

dc.dynamic $_apply$1(dc.dynamic more8502$2, ){
final dc.dynamic o7310$11=more8502$2;
late final dc.dynamic more8502$3;
if((o7310$11 is lcoc_core.ISeqable$iface)){
more8502$3=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8502$3=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
if((null==more8502$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8502$3, );
final dc.dynamic more8502$4=lcoc_core.next(more8502$3, );
if((null==(more8502$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (more8502$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XY

// BEGIN IFnMixin_XZ
abstract class IFnMixin_XZ extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic etc$1, );

dc.dynamic $_invoke$1(dc.dynamic arg1$2, ){
final dc.dynamic arg$1=(arg1$2 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$1, $if_$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.dynamic arg$2=(arg1$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg2$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$2, $if_$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.dynamic arg$3=(arg1$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg2$2, arg3$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$3, $if_$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$4=(arg1$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$4, $if_$4, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$5=(arg1$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$5, $if_$5, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$6=(arg1$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$6, $if_$6, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$7=(arg1$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$7, $if_$7, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$8=(arg1$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$8, $if_$8, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$9=(arg1$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$9, $if_$9, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8761$1, ){
final dc.dynamic arg$10=(arg1$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$10=([arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8761$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7310$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$10, ));
}
return (this.$_invoke$vararg(arg$10, $if_$10, ));
}

dc.dynamic call([arg1$12 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg1$12==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$0());
}
if(dc.identical((arg2$10 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
final dc.dynamic arg$11=(arg1$12 as dc.dynamic);
final dc.List<dc.dynamic> o7310$11=([arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$11;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7310$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$11, ));
}
return (this.$_invoke$vararg(arg$11, $if_$11, ));
}

dc.dynamic $_apply$1(dc.dynamic more8761$2, ){
final dc.dynamic o7310$12=more8761$2;
late final dc.dynamic more8761$3;
if((o7310$12 is lcoc_core.ISeqable$iface)){
more8761$3=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8761$3=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
if((null==more8761$3)){
return (this.$_invoke$0());
}
final dc.dynamic arg1$13=lcoc_core.first(more8761$3, );
final dc.dynamic more8761$4=lcoc_core.next(more8761$3, );
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (more8761$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_XZ

// BEGIN IFnMixin_Y
abstract class IFnMixin_Y extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$0();

dc.dynamic $_invoke$vararg(dc.dynamic etc$1, );

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
final dc.List<dc.dynamic> o7310$1=[arg1$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg($if_$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7310$2=[arg1$2, arg2$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg($if_$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7310$3=[arg1$3, arg2$2, arg3$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg($if_$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7310$4=[arg1$4, arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg($if_$4, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7310$5=[arg1$5, arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg($if_$5, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7310$6=[arg1$6, arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg($if_$6, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7310$7=[arg1$7, arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg($if_$7, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7310$8=[arg1$8, arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg($if_$8, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7310$9=[arg1$9, arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg($if_$9, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8743$1, ){
final dc.List<dc.dynamic> o7310$10=([arg1$10, arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8743$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7310$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$10, ));
}
return (this.$_invoke$vararg($if_$10, ));
}

dc.dynamic call([arg1$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg1$11 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$0());
}
final dc.List<dc.dynamic> o7310$11=([arg1$11, arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$11;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7310$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$11, ));
}
return (this.$_invoke$vararg($if_$11, ));
}

dc.dynamic $_apply$1(dc.dynamic more8743$2, ){
final dc.dynamic o7310$12=more8743$2;
late final dc.dynamic more8743$3;
if((o7310$12 is lcoc_core.ISeqable$iface)){
more8743$3=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8743$3=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
if((null==more8743$3)){
return (this.$_invoke$0());
}
return (this.$_invoke$vararg(more8743$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_Y

// BEGIN IFnMixin_Z
abstract class IFnMixin_Z extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic etc$1, );

dc.dynamic $_invoke$0(){
final dc.List<dc.dynamic> o7310$1=[];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg($if_$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic arg1$1, ){
final dc.List<dc.dynamic> o7310$2=[arg1$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg($if_$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, ){
final dc.List<dc.dynamic> o7310$3=[arg1$2, arg2$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg($if_$3, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.List<dc.dynamic> o7310$4=[arg1$3, arg2$2, arg3$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg($if_$4, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.List<dc.dynamic> o7310$5=[arg1$4, arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg($if_$5, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.List<dc.dynamic> o7310$6=[arg1$5, arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg($if_$6, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.List<dc.dynamic> o7310$7=[arg1$6, arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg($if_$7, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.List<dc.dynamic> o7310$8=[arg1$7, arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg($if_$8, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.List<dc.dynamic> o7310$9=[arg1$8, arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg($if_$9, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.List<dc.dynamic> o7310$10=[arg1$9, arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7310$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$10, ));
}
return (this.$_invoke$vararg($if_$10, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8373$1, ){
final dc.List<dc.dynamic> o7310$11=([arg1$10, arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8373$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$11;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7310$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$11, ));
}
return (this.$_invoke$vararg($if_$11, ));
}

dc.dynamic call([arg1$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg2$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg1$11 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$0());
}
final dc.List<dc.dynamic> o7310$12=([arg1$11, arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$12;
if((o7310$12 is lcoc_core.ISeqable$iface)){
$if_$12=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions(o7310$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$12, ));
}
return (this.$_invoke$vararg($if_$12, ));
}

dc.dynamic $_apply$1(dc.dynamic more8373$2, ){
final dc.dynamic o7310$13=more8373$2;
late final dc.dynamic more8373$3;
if((o7310$13 is lcoc_core.ISeqable$iface)){
more8373$3=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8373$3=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
return (this.$_invoke$vararg(more8373$3, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_Z

// BEGIN IFnMixin_uXX
abstract class IFnMixin_uXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, );

dc.dynamic call(dc.dynamic arg1$3, [arg2$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg2$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$3 as dc.dynamic), ));
}
if((arg3$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$3 as dc.dynamic), (arg2$2 as dc.dynamic), ));
}
return (this.$_invoke$3((arg1$3 as dc.dynamic), (arg2$2 as dc.dynamic), (arg3$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8379$1, ){
final dc.dynamic o7310$1=more8379$1;
late final dc.dynamic more8379$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8379$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8379$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8379$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8379$2, );
final dc.dynamic more8379$3=lcoc_core.next(more8379$2, );
if((null==(more8379$3 as dc.dynamic))){
return (this.$_invoke$1((arg1$4 as dc.dynamic), ));
}
final dc.dynamic arg2$3=lcoc_core.first(more8379$3, );
final dc.dynamic more8379$4=lcoc_core.next(more8379$3, );
if((null==(more8379$4 as dc.dynamic))){
return (this.$_invoke$2((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), ));
}
final dc.dynamic arg3$2=lcoc_core.first(more8379$4, );
final dc.dynamic more8379$5=lcoc_core.next(more8379$4, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXX

// BEGIN IFnMixin_uXXX
abstract class IFnMixin_uXXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, );

dc.dynamic call(dc.dynamic arg1$4, [arg2$3 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg2$3==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$4 as dc.dynamic), ));
}
if((arg3$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), ));
}
if((arg4$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$2 as dc.dynamic), ));
}
return (this.$_invoke$4((arg1$4 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$2 as dc.dynamic), (arg4$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8456$1, ){
final dc.dynamic o7310$1=more8456$1;
late final dc.dynamic more8456$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8456$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8456$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8456$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$5=lcoc_core.first(more8456$2, );
final dc.dynamic more8456$3=lcoc_core.next(more8456$2, );
if((null==(more8456$3 as dc.dynamic))){
return (this.$_invoke$1((arg1$5 as dc.dynamic), ));
}
final dc.dynamic arg2$4=lcoc_core.first(more8456$3, );
final dc.dynamic more8456$4=lcoc_core.next(more8456$3, );
if((null==(more8456$4 as dc.dynamic))){
return (this.$_invoke$2((arg1$5 as dc.dynamic), (arg2$4 as dc.dynamic), ));
}
final dc.dynamic arg3$3=lcoc_core.first(more8456$4, );
final dc.dynamic more8456$5=lcoc_core.next(more8456$4, );
if((null==(more8456$5 as dc.dynamic))){
return (this.$_invoke$3((arg1$5 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$3 as dc.dynamic), ));
}
final dc.dynamic arg4$2=lcoc_core.first(more8456$5, );
final dc.dynamic more8456$6=lcoc_core.next(more8456$5, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXX

// BEGIN IFnMixin_uXXXXXXXXXX
abstract class IFnMixin_uXXXXXXXXXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$7(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, dc.dynamic arg5$1, dc.dynamic arg6$1, dc.dynamic arg7$1, );

dc.dynamic $_invoke$1(dc.dynamic arg1$2, );

dc.dynamic $_invoke$4(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, );

dc.dynamic $_invoke$6(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$2, );

dc.dynamic $_invoke$3(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$4, );

dc.dynamic $_invoke$2(dc.dynamic arg1$6, dc.dynamic arg2$5, );

dc.dynamic $_invoke$9(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, dc.dynamic arg9$1, );

dc.dynamic $_invoke$5(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, );

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, );

dc.dynamic $_invoke$ext10(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic arg10$1, );

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$6, dc.dynamic arg7$5, dc.dynamic arg8$4, dc.dynamic arg9$3, dc.dynamic more8209$1, ){
final dc.dynamic coll7390$1=more8209$1;
late final dc.int test$7012_$AUTO_$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
test$7012_$AUTO_$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
test$7012_$AUTO_$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
switch(test$7012_$AUTO_$1){
case 1:
final dc.dynamic vec$8210_$1=more8209$1;
final dc.dynamic arg10$2=(lcoc_core.nth.$_invoke$3(vec$8210_$1, 0, null, ));
return (this.$_invoke$ext10((arg1$11 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$9 as dc.dynamic), (arg4$8 as dc.dynamic), (arg5$7 as dc.dynamic), (arg6$6 as dc.dynamic), (arg7$5 as dc.dynamic), (arg8$4 as dc.dynamic), (arg9$3 as dc.dynamic), (arg10$2 as dc.dynamic), ));
_default: default:
throw (dc.ArgumentError.value(test$7012_$AUTO_$1, null, "No matching clause.", ));
}
}

dc.dynamic call(dc.dynamic arg1$12, [arg2$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg10$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg2$11==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if((arg4$9==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
if((arg5$8==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
if((arg6$7==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$5((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), ));
}
if((arg7$6==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$6((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), (arg6$7 as dc.dynamic), ));
}
if((arg8$5==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$7((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), (arg6$7 as dc.dynamic), (arg7$6 as dc.dynamic), ));
}
if((arg9$4==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$8((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), (arg6$7 as dc.dynamic), (arg7$6 as dc.dynamic), (arg8$5 as dc.dynamic), ));
}
if((arg10$3==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$9((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), (arg6$7 as dc.dynamic), (arg7$6 as dc.dynamic), (arg8$5 as dc.dynamic), (arg9$4 as dc.dynamic), ));
}
return (this.$_invoke$ext10((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), (arg6$7 as dc.dynamic), (arg7$6 as dc.dynamic), (arg8$5 as dc.dynamic), (arg9$4 as dc.dynamic), (arg10$3 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8209$2, ){
final dc.dynamic o7310$1=more8209$2;
late final dc.dynamic more8209$3;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8209$3=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8209$3=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8209$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8209$3, );
final dc.dynamic more8209$4=lcoc_core.next(more8209$3, );
if((null==(more8209$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8209$4, );
final dc.dynamic more8209$5=lcoc_core.next(more8209$4, );
if((null==(more8209$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8209$5, );
final dc.dynamic more8209$6=lcoc_core.next(more8209$5, );
if((null==(more8209$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8209$6, );
final dc.dynamic more8209$7=lcoc_core.next(more8209$6, );
if((null==(more8209$7 as dc.dynamic))){
return (this.$_invoke$4((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8209$7, );
final dc.dynamic more8209$8=lcoc_core.next(more8209$7, );
if((null==(more8209$8 as dc.dynamic))){
return (this.$_invoke$5((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), ));
}
final dc.dynamic arg6$8=lcoc_core.first(more8209$8, );
final dc.dynamic more8209$9=lcoc_core.next(more8209$8, );
if((null==(more8209$9 as dc.dynamic))){
return (this.$_invoke$6((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), ));
}
final dc.dynamic arg7$7=lcoc_core.first(more8209$9, );
final dc.dynamic more8209$10=lcoc_core.next(more8209$9, );
if((null==(more8209$10 as dc.dynamic))){
return (this.$_invoke$7((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), (arg7$7 as dc.dynamic), ));
}
final dc.dynamic arg8$6=lcoc_core.first(more8209$10, );
final dc.dynamic more8209$11=lcoc_core.next(more8209$10, );
if((null==(more8209$11 as dc.dynamic))){
return (this.$_invoke$8((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), (arg7$7 as dc.dynamic), (arg8$6 as dc.dynamic), ));
}
final dc.dynamic arg9$5=lcoc_core.first(more8209$11, );
final dc.dynamic more8209$12=lcoc_core.next(more8209$11, );
if((null==(more8209$12 as dc.dynamic))){
return (this.$_invoke$9((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), (arg7$7 as dc.dynamic), (arg8$6 as dc.dynamic), (arg9$5 as dc.dynamic), ));
}
final dc.dynamic arg10$4=lcoc_core.first(more8209$12, );
final dc.dynamic more8209$13=lcoc_core.next(more8209$12, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXXXXXXXXX

// BEGIN IFnMixin_uXXXY
abstract class IFnMixin_uXXXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$4(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic arg3$2, );

dc.dynamic $_invoke$2(dc.dynamic arg1$4, dc.dynamic arg2$3, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$1, ){
final dc.dynamic arg$4=(arg1$6 as dc.dynamic);
final dc.dynamic arg$3=(arg2$5 as dc.dynamic);
final dc.dynamic arg$2=(arg3$4 as dc.dynamic);
final dc.dynamic arg$1=(arg4$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg5$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$4, arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$8=(arg1$7 as dc.dynamic);
final dc.dynamic arg$7=(arg2$6 as dc.dynamic);
final dc.dynamic arg$6=(arg3$5 as dc.dynamic);
final dc.dynamic arg$5=(arg4$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg5$2, arg6$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$8, arg$7, arg$6, arg$5, $if_$2, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$12=(arg1$8 as dc.dynamic);
final dc.dynamic arg$11=(arg2$7 as dc.dynamic);
final dc.dynamic arg$10=(arg3$6 as dc.dynamic);
final dc.dynamic arg$9=(arg4$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, arg$9, $if_$3, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$16=(arg1$9 as dc.dynamic);
final dc.dynamic arg$15=(arg2$8 as dc.dynamic);
final dc.dynamic arg$14=(arg3$7 as dc.dynamic);
final dc.dynamic arg$13=(arg4$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$16, arg$15, arg$14, arg$13, $if_$4, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$20=(arg1$10 as dc.dynamic);
final dc.dynamic arg$19=(arg2$9 as dc.dynamic);
final dc.dynamic arg$18=(arg3$8 as dc.dynamic);
final dc.dynamic arg$17=(arg4$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$20, arg$19, arg$18, arg$17, $if_$5, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8498$1, ){
final dc.dynamic arg$24=(arg1$11 as dc.dynamic);
final dc.dynamic arg$23=(arg2$10 as dc.dynamic);
final dc.dynamic arg$22=(arg3$9 as dc.dynamic);
final dc.dynamic arg$21=(arg4$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=([arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8498$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, arg$21, $if_$6, ));
}

dc.dynamic call(dc.dynamic arg1$12, [arg2$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg2$11==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if((arg4$9==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
if(dc.identical((arg5$7 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$4((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
final dc.dynamic arg$28=(arg1$12 as dc.dynamic);
final dc.dynamic arg$27=(arg2$11 as dc.dynamic);
final dc.dynamic arg$26=(arg3$10 as dc.dynamic);
final dc.dynamic arg$25=(arg4$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$28, arg$27, arg$26, arg$25, $if_$7, ));
}

dc.dynamic $_apply$1(dc.dynamic more8498$2, ){
final dc.dynamic o7310$8=more8498$2;
late final dc.dynamic more8498$3;
if((o7310$8 is lcoc_core.ISeqable$iface)){
more8498$3=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8498$3=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
if((null==more8498$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8498$3, );
final dc.dynamic more8498$4=lcoc_core.next(more8498$3, );
if((null==(more8498$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8498$4, );
final dc.dynamic more8498$5=lcoc_core.next(more8498$4, );
if((null==(more8498$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8498$5, );
final dc.dynamic more8498$6=lcoc_core.next(more8498$5, );
if((null==(more8498$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8498$6, );
final dc.dynamic more8498$7=lcoc_core.next(more8498$6, );
if((null==(more8498$7 as dc.dynamic))){
return (this.$_invoke$4((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (more8498$7 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXXY

// BEGIN IFnMixin_uXXY
abstract class IFnMixin_uXXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$1, dc.dynamic arg3$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$2, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.dynamic arg$3=(arg1$5 as dc.dynamic);
final dc.dynamic arg$2=(arg2$4 as dc.dynamic);
final dc.dynamic arg$1=(arg3$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$6=(arg1$6 as dc.dynamic);
final dc.dynamic arg$5=(arg2$5 as dc.dynamic);
final dc.dynamic arg$4=(arg3$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, arg$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$9=(arg1$7 as dc.dynamic);
final dc.dynamic arg$8=(arg2$6 as dc.dynamic);
final dc.dynamic arg$7=(arg3$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$9, arg$8, arg$7, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$12=(arg1$8 as dc.dynamic);
final dc.dynamic arg$11=(arg2$7 as dc.dynamic);
final dc.dynamic arg$10=(arg3$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$15=(arg1$9 as dc.dynamic);
final dc.dynamic arg$14=(arg2$8 as dc.dynamic);
final dc.dynamic arg$13=(arg3$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$15, arg$14, arg$13, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$18=(arg1$10 as dc.dynamic);
final dc.dynamic arg$17=(arg2$9 as dc.dynamic);
final dc.dynamic arg$16=(arg3$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, arg$16, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8554$1, ){
final dc.dynamic arg$21=(arg1$11 as dc.dynamic);
final dc.dynamic arg$20=(arg2$10 as dc.dynamic);
final dc.dynamic arg$19=(arg3$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8554$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$21, arg$20, arg$19, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$12, [arg2$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg2$11==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if(dc.identical((arg4$8 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
final dc.dynamic arg$24=(arg1$12 as dc.dynamic);
final dc.dynamic arg$23=(arg2$11 as dc.dynamic);
final dc.dynamic arg$22=(arg3$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8554$2, ){
final dc.dynamic o7310$9=more8554$2;
late final dc.dynamic more8554$3;
if((o7310$9 is lcoc_core.ISeqable$iface)){
more8554$3=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8554$3=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
if((null==more8554$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8554$3, );
final dc.dynamic more8554$4=lcoc_core.next(more8554$3, );
if((null==(more8554$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8554$4, );
final dc.dynamic more8554$5=lcoc_core.next(more8554$4, );
if((null==(more8554$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8554$5, );
final dc.dynamic more8554$6=lcoc_core.next(more8554$5, );
if((null==(more8554$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (more8554$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXXY

// BEGIN IFnMixin_uXY
abstract class IFnMixin_uXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$3, dc.dynamic arg2$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.dynamic arg$2=(arg1$4 as dc.dynamic);
final dc.dynamic arg$1=(arg2$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg3$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$4=(arg1$5 as dc.dynamic);
final dc.dynamic arg$3=(arg2$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg3$2, arg4$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$4, arg$3, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$6=(arg1$6 as dc.dynamic);
final dc.dynamic arg$5=(arg2$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$8=(arg1$7 as dc.dynamic);
final dc.dynamic arg$7=(arg2$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$8, arg$7, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$10=(arg1$8 as dc.dynamic);
final dc.dynamic arg$9=(arg2$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$10, arg$9, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$12=(arg1$9 as dc.dynamic);
final dc.dynamic arg$11=(arg2$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$14=(arg1$10 as dc.dynamic);
final dc.dynamic arg$13=(arg2$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$14, arg$13, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8348$1, ){
final dc.dynamic arg$16=(arg1$11 as dc.dynamic);
final dc.dynamic arg$15=(arg2$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8348$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$16, arg$15, $if_$8, ));
}

dc.dynamic call(dc.dynamic arg1$12, [arg2$11 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg2$11==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
if(dc.identical((arg3$9 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
final dc.dynamic arg$18=(arg1$12 as dc.dynamic);
final dc.dynamic arg$17=(arg2$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=([arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8348$2, ){
final dc.dynamic o7310$10=more8348$2;
late final dc.dynamic more8348$3;
if((o7310$10 is lcoc_core.ISeqable$iface)){
more8348$3=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8348$3=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
if((null==more8348$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8348$3, );
final dc.dynamic more8348$4=lcoc_core.next(more8348$3, );
if((null==(more8348$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
final dc.dynamic arg2$12=lcoc_core.first(more8348$4, );
final dc.dynamic more8348$5=lcoc_core.next(more8348$4, );
if((null==(more8348$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (arg2$12 as dc.dynamic), (more8348$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uXY

// BEGIN IFnMixin_uY
abstract class IFnMixin_uY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$1(dc.dynamic arg1$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.dynamic arg$1=(arg1$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg2$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$1, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.dynamic arg$2=(arg1$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg2$2, arg3$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$2, $if_$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$3=(arg1$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$3, $if_$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$4=(arg1$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$4, $if_$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$5=(arg1$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$5, $if_$5, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$6=(arg1$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$6, $if_$6, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$7=(arg1$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$7, $if_$7, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$8=(arg1$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$8, $if_$8, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8439$1, ){
final dc.dynamic arg$9=(arg1$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=([arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8439$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$9, $if_$9, ));
}

dc.dynamic call(dc.dynamic arg1$12, [arg2$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg2$10 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
final dc.dynamic arg$10=(arg1$12 as dc.dynamic);
final dc.List<dc.dynamic> o7310$10=([arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7310$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$10, ));
}
return (this.$_invoke$vararg(arg$10, $if_$10, ));
}

dc.dynamic $_apply$1(dc.dynamic more8439$2, ){
final dc.dynamic o7310$11=more8439$2;
late final dc.dynamic more8439$3;
if((o7310$11 is lcoc_core.ISeqable$iface)){
more8439$3=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8439$3=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
if((null==more8439$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8439$3, );
final dc.dynamic more8439$4=lcoc_core.next(more8439$3, );
if((null==(more8439$4 as dc.dynamic))){
return (this.$_invoke$1((arg1$13 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (more8439$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uY

// BEGIN IFnMixin_uZ
abstract class IFnMixin_uZ extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic etc$1, );

dc.dynamic $_invoke$1(dc.dynamic arg1$2, ){
final dc.dynamic arg$1=(arg1$2 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$1, $if_$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$1, ){
final dc.dynamic arg$2=(arg1$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg2$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$2, $if_$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$4, dc.dynamic arg2$2, dc.dynamic arg3$1, ){
final dc.dynamic arg$3=(arg1$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg2$2, arg3$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$3, $if_$3, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$5, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$4=(arg1$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg2$3, arg3$2, arg4$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$4, $if_$4, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$6, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$5=(arg1$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg2$4, arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$5, $if_$5, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$7, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$6=(arg1$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg2$5, arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$6, $if_$6, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$8, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$7=(arg1$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg2$6, arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$7, $if_$7, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$9, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$8=(arg1$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=[arg2$7, arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$8, $if_$8, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$10, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$9=(arg1$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=[arg2$8, arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$9, $if_$9, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$11, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8527$1, ){
final dc.dynamic arg$10=(arg1$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$10=([arg2$9, arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8527$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7310$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$10, ));
}
return (this.$_invoke$vararg(arg$10, $if_$10, ));
}

dc.dynamic call(dc.dynamic arg1$12, [arg2$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg2$10 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$1((arg1$12 as dc.dynamic), ));
}
final dc.dynamic arg$11=(arg1$12 as dc.dynamic);
final dc.List<dc.dynamic> o7310$11=([arg2$10, arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$11;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7310$11, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$11, ));
}
return (this.$_invoke$vararg(arg$11, $if_$11, ));
}

dc.dynamic $_apply$1(dc.dynamic more8527$2, ){
final dc.dynamic o7310$12=more8527$2;
late final dc.dynamic more8527$3;
if((o7310$12 is lcoc_core.ISeqable$iface)){
more8527$3=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8527$3=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
if((null==more8527$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$13=lcoc_core.first(more8527$3, );
final dc.dynamic more8527$4=lcoc_core.next(more8527$3, );
return (this.$_invoke$vararg((arg1$13 as dc.dynamic), (more8527$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uZ

// BEGIN IFnMixin_uuXX
abstract class IFnMixin_uuXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$3(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$2, );

dc.dynamic call(dc.dynamic arg1$3, dc.dynamic arg2$3, [arg3$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg3$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), ));
}
if((arg4$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$2 as dc.dynamic), ));
}
return (this.$_invoke$4((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$2 as dc.dynamic), (arg4$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8300$1, ){
final dc.dynamic o7310$1=more8300$1;
late final dc.dynamic more8300$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8300$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8300$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8300$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8300$2, );
final dc.dynamic more8300$3=lcoc_core.next(more8300$2, );
if((null==(more8300$3 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$4=lcoc_core.first(more8300$3, );
final dc.dynamic more8300$4=lcoc_core.next(more8300$3, );
if((null==(more8300$4 as dc.dynamic))){
return (this.$_invoke$2((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), ));
}
final dc.dynamic arg3$3=lcoc_core.first(more8300$4, );
final dc.dynamic more8300$5=lcoc_core.next(more8300$4, );
if((null==(more8300$5 as dc.dynamic))){
return (this.$_invoke$3((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$3 as dc.dynamic), ));
}
final dc.dynamic arg4$2=lcoc_core.first(more8300$5, );
final dc.dynamic more8300$6=lcoc_core.next(more8300$5, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXX

// BEGIN IFnMixin_uuXXX
abstract class IFnMixin_uuXXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, );

dc.dynamic call(dc.dynamic arg1$4, dc.dynamic arg2$4, [arg3$3 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg3$3==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), ));
}
if((arg4$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$3 as dc.dynamic), ));
}
if((arg5$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$3 as dc.dynamic), (arg4$2 as dc.dynamic), ));
}
return (this.$_invoke$5((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$3 as dc.dynamic), (arg4$2 as dc.dynamic), (arg5$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8578$1, ){
final dc.dynamic o7310$1=more8578$1;
late final dc.dynamic more8578$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8578$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8578$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8578$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$5=lcoc_core.first(more8578$2, );
final dc.dynamic more8578$3=lcoc_core.next(more8578$2, );
if((null==(more8578$3 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$5=lcoc_core.first(more8578$3, );
final dc.dynamic more8578$4=lcoc_core.next(more8578$3, );
if((null==(more8578$4 as dc.dynamic))){
return (this.$_invoke$2((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), ));
}
final dc.dynamic arg3$4=lcoc_core.first(more8578$4, );
final dc.dynamic more8578$5=lcoc_core.next(more8578$4, );
if((null==(more8578$5 as dc.dynamic))){
return (this.$_invoke$3((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$4 as dc.dynamic), ));
}
final dc.dynamic arg4$3=lcoc_core.first(more8578$5, );
final dc.dynamic more8578$6=lcoc_core.next(more8578$5, );
if((null==(more8578$6 as dc.dynamic))){
return (this.$_invoke$4((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), ));
}
final dc.dynamic arg5$2=lcoc_core.first(more8578$6, );
final dc.dynamic more8578$7=lcoc_core.next(more8578$6, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXX

// BEGIN IFnMixin_uuXXXX
abstract class IFnMixin_uuXXXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, );

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, );

dc.dynamic call(dc.dynamic arg1$5, dc.dynamic arg2$5, [arg3$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$3 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg3$4==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), ));
}
if((arg4$3==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$4 as dc.dynamic), ));
}
if((arg5$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), ));
}
if((arg6$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$5((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), (arg5$2 as dc.dynamic), ));
}
return (this.$_invoke$6((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), (arg5$2 as dc.dynamic), (arg6$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8409$1, ){
final dc.dynamic o7310$1=more8409$1;
late final dc.dynamic more8409$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8409$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8409$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8409$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$6=lcoc_core.first(more8409$2, );
final dc.dynamic more8409$3=lcoc_core.next(more8409$2, );
if((null==(more8409$3 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$6=lcoc_core.first(more8409$3, );
final dc.dynamic more8409$4=lcoc_core.next(more8409$3, );
if((null==(more8409$4 as dc.dynamic))){
return (this.$_invoke$2((arg1$6 as dc.dynamic), (arg2$6 as dc.dynamic), ));
}
final dc.dynamic arg3$5=lcoc_core.first(more8409$4, );
final dc.dynamic more8409$5=lcoc_core.next(more8409$4, );
if((null==(more8409$5 as dc.dynamic))){
return (this.$_invoke$3((arg1$6 as dc.dynamic), (arg2$6 as dc.dynamic), (arg3$5 as dc.dynamic), ));
}
final dc.dynamic arg4$4=lcoc_core.first(more8409$5, );
final dc.dynamic more8409$6=lcoc_core.next(more8409$5, );
if((null==(more8409$6 as dc.dynamic))){
return (this.$_invoke$4((arg1$6 as dc.dynamic), (arg2$6 as dc.dynamic), (arg3$5 as dc.dynamic), (arg4$4 as dc.dynamic), ));
}
final dc.dynamic arg5$3=lcoc_core.first(more8409$6, );
final dc.dynamic more8409$7=lcoc_core.next(more8409$6, );
if((null==(more8409$7 as dc.dynamic))){
return (this.$_invoke$5((arg1$6 as dc.dynamic), (arg2$6 as dc.dynamic), (arg3$5 as dc.dynamic), (arg4$4 as dc.dynamic), (arg5$3 as dc.dynamic), ));
}
final dc.dynamic arg6$2=lcoc_core.first(more8409$7, );
final dc.dynamic more8409$8=lcoc_core.next(more8409$7, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXXX

// BEGIN IFnMixin_uuXXXY
abstract class IFnMixin_uuXXXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, );

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$1, ){
final dc.dynamic arg$5=(arg1$6 as dc.dynamic);
final dc.dynamic arg$4=(arg2$6 as dc.dynamic);
final dc.dynamic arg$3=(arg3$5 as dc.dynamic);
final dc.dynamic arg$2=(arg4$4 as dc.dynamic);
final dc.dynamic arg$1=(arg5$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg6$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$5, arg$4, arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$10=(arg1$7 as dc.dynamic);
final dc.dynamic arg$9=(arg2$7 as dc.dynamic);
final dc.dynamic arg$8=(arg3$6 as dc.dynamic);
final dc.dynamic arg$7=(arg4$5 as dc.dynamic);
final dc.dynamic arg$6=(arg5$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg6$2, arg7$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$10, arg$9, arg$8, arg$7, arg$6, $if_$2, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$15=(arg1$8 as dc.dynamic);
final dc.dynamic arg$14=(arg2$8 as dc.dynamic);
final dc.dynamic arg$13=(arg3$7 as dc.dynamic);
final dc.dynamic arg$12=(arg4$6 as dc.dynamic);
final dc.dynamic arg$11=(arg5$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$15, arg$14, arg$13, arg$12, arg$11, $if_$3, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$20=(arg1$9 as dc.dynamic);
final dc.dynamic arg$19=(arg2$9 as dc.dynamic);
final dc.dynamic arg$18=(arg3$8 as dc.dynamic);
final dc.dynamic arg$17=(arg4$7 as dc.dynamic);
final dc.dynamic arg$16=(arg5$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$20, arg$19, arg$18, arg$17, arg$16, $if_$4, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8529$1, ){
final dc.dynamic arg$25=(arg1$10 as dc.dynamic);
final dc.dynamic arg$24=(arg2$10 as dc.dynamic);
final dc.dynamic arg$23=(arg3$9 as dc.dynamic);
final dc.dynamic arg$22=(arg4$8 as dc.dynamic);
final dc.dynamic arg$21=(arg5$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=([arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8529$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$25, arg$24, arg$23, arg$22, arg$21, $if_$5, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if((arg4$9==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
if((arg5$8==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
if(dc.identical((arg6$6 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$5((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), ));
}
final dc.dynamic arg$30=(arg1$11 as dc.dynamic);
final dc.dynamic arg$29=(arg2$11 as dc.dynamic);
final dc.dynamic arg$28=(arg3$10 as dc.dynamic);
final dc.dynamic arg$27=(arg4$9 as dc.dynamic);
final dc.dynamic arg$26=(arg5$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=([arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$30, arg$29, arg$28, arg$27, arg$26, $if_$6, ));
}

dc.dynamic $_apply$1(dc.dynamic more8529$2, ){
final dc.dynamic o7310$7=more8529$2;
late final dc.dynamic more8529$3;
if((o7310$7 is lcoc_core.ISeqable$iface)){
more8529$3=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8529$3=((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}
if((null==more8529$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8529$3, );
final dc.dynamic more8529$4=lcoc_core.next(more8529$3, );
if((null==(more8529$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8529$4, );
final dc.dynamic more8529$5=lcoc_core.next(more8529$4, );
if((null==(more8529$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8529$5, );
final dc.dynamic more8529$6=lcoc_core.next(more8529$5, );
if((null==(more8529$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8529$6, );
final dc.dynamic more8529$7=lcoc_core.next(more8529$6, );
if((null==(more8529$7 as dc.dynamic))){
return (this.$_invoke$4((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8529$7, );
final dc.dynamic more8529$8=lcoc_core.next(more8529$7, );
if((null==(more8529$8 as dc.dynamic))){
return (this.$_invoke$5((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (more8529$8 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXXY

// BEGIN IFnMixin_uuXXY
abstract class IFnMixin_uuXXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, );

dc.dynamic $_invoke$2(dc.dynamic arg1$3, dc.dynamic arg2$3, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$1, ){
final dc.dynamic arg$4=(arg1$5 as dc.dynamic);
final dc.dynamic arg$3=(arg2$5 as dc.dynamic);
final dc.dynamic arg$2=(arg3$4 as dc.dynamic);
final dc.dynamic arg$1=(arg4$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg5$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$4, arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$8=(arg1$6 as dc.dynamic);
final dc.dynamic arg$7=(arg2$6 as dc.dynamic);
final dc.dynamic arg$6=(arg3$5 as dc.dynamic);
final dc.dynamic arg$5=(arg4$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg5$2, arg6$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$8, arg$7, arg$6, arg$5, $if_$2, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$12=(arg1$7 as dc.dynamic);
final dc.dynamic arg$11=(arg2$7 as dc.dynamic);
final dc.dynamic arg$10=(arg3$6 as dc.dynamic);
final dc.dynamic arg$9=(arg4$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, arg$9, $if_$3, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$16=(arg1$8 as dc.dynamic);
final dc.dynamic arg$15=(arg2$8 as dc.dynamic);
final dc.dynamic arg$14=(arg3$7 as dc.dynamic);
final dc.dynamic arg$13=(arg4$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$16, arg$15, arg$14, arg$13, $if_$4, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$20=(arg1$9 as dc.dynamic);
final dc.dynamic arg$19=(arg2$9 as dc.dynamic);
final dc.dynamic arg$18=(arg3$8 as dc.dynamic);
final dc.dynamic arg$17=(arg4$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$20, arg$19, arg$18, arg$17, $if_$5, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8443$1, ){
final dc.dynamic arg$24=(arg1$10 as dc.dynamic);
final dc.dynamic arg$23=(arg2$10 as dc.dynamic);
final dc.dynamic arg$22=(arg3$9 as dc.dynamic);
final dc.dynamic arg$21=(arg4$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=([arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8443$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, arg$21, $if_$6, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if((arg4$9==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
if(dc.identical((arg5$7 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$4((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
final dc.dynamic arg$28=(arg1$11 as dc.dynamic);
final dc.dynamic arg$27=(arg2$11 as dc.dynamic);
final dc.dynamic arg$26=(arg3$10 as dc.dynamic);
final dc.dynamic arg$25=(arg4$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$28, arg$27, arg$26, arg$25, $if_$7, ));
}

dc.dynamic $_apply$1(dc.dynamic more8443$2, ){
final dc.dynamic o7310$8=more8443$2;
late final dc.dynamic more8443$3;
if((o7310$8 is lcoc_core.ISeqable$iface)){
more8443$3=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8443$3=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
if((null==more8443$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8443$3, );
final dc.dynamic more8443$4=lcoc_core.next(more8443$3, );
if((null==(more8443$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8443$4, );
final dc.dynamic more8443$5=lcoc_core.next(more8443$4, );
if((null==(more8443$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8443$5, );
final dc.dynamic more8443$6=lcoc_core.next(more8443$5, );
if((null==(more8443$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8443$6, );
final dc.dynamic more8443$7=lcoc_core.next(more8443$6, );
if((null==(more8443$7 as dc.dynamic))){
return (this.$_invoke$4((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (more8443$7 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXXY

// BEGIN IFnMixin_uuXY
abstract class IFnMixin_uuXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$3(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$2, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.dynamic arg$3=(arg1$4 as dc.dynamic);
final dc.dynamic arg$2=(arg2$4 as dc.dynamic);
final dc.dynamic arg$1=(arg3$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$6=(arg1$5 as dc.dynamic);
final dc.dynamic arg$5=(arg2$5 as dc.dynamic);
final dc.dynamic arg$4=(arg3$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, arg$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$9=(arg1$6 as dc.dynamic);
final dc.dynamic arg$8=(arg2$6 as dc.dynamic);
final dc.dynamic arg$7=(arg3$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$9, arg$8, arg$7, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$12=(arg1$7 as dc.dynamic);
final dc.dynamic arg$11=(arg2$7 as dc.dynamic);
final dc.dynamic arg$10=(arg3$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$15=(arg1$8 as dc.dynamic);
final dc.dynamic arg$14=(arg2$8 as dc.dynamic);
final dc.dynamic arg$13=(arg3$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$15, arg$14, arg$13, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$18=(arg1$9 as dc.dynamic);
final dc.dynamic arg$17=(arg2$9 as dc.dynamic);
final dc.dynamic arg$16=(arg3$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, arg$16, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8230$1, ){
final dc.dynamic arg$21=(arg1$10 as dc.dynamic);
final dc.dynamic arg$20=(arg2$10 as dc.dynamic);
final dc.dynamic arg$19=(arg3$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8230$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$21, arg$20, arg$19, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [arg3$10 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg3$10==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$2((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
if(dc.identical((arg4$8 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$3((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
final dc.dynamic arg$24=(arg1$11 as dc.dynamic);
final dc.dynamic arg$23=(arg2$11 as dc.dynamic);
final dc.dynamic arg$22=(arg3$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8230$2, ){
final dc.dynamic o7310$9=more8230$2;
late final dc.dynamic more8230$3;
if((o7310$9 is lcoc_core.ISeqable$iface)){
more8230$3=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8230$3=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
if((null==more8230$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8230$3, );
final dc.dynamic more8230$4=lcoc_core.next(more8230$3, );
if((null==(more8230$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8230$4, );
final dc.dynamic more8230$5=lcoc_core.next(more8230$4, );
if((null==(more8230$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
final dc.dynamic arg3$11=lcoc_core.first(more8230$5, );
final dc.dynamic more8230$6=lcoc_core.next(more8230$5, );
if((null==(more8230$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (arg3$11 as dc.dynamic), (more8230$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuXY

// BEGIN IFnMixin_uuY
abstract class IFnMixin_uuY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$2(dc.dynamic arg1$1, dc.dynamic arg2$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.dynamic arg$2=(arg1$3 as dc.dynamic);
final dc.dynamic arg$1=(arg2$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg3$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$4=(arg1$4 as dc.dynamic);
final dc.dynamic arg$3=(arg2$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg3$2, arg4$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$4, arg$3, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$6=(arg1$5 as dc.dynamic);
final dc.dynamic arg$5=(arg2$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$8=(arg1$6 as dc.dynamic);
final dc.dynamic arg$7=(arg2$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$8, arg$7, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$10=(arg1$7 as dc.dynamic);
final dc.dynamic arg$9=(arg2$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$10, arg$9, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$12=(arg1$8 as dc.dynamic);
final dc.dynamic arg$11=(arg2$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$14=(arg1$9 as dc.dynamic);
final dc.dynamic arg$13=(arg2$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$14, arg$13, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8394$1, ){
final dc.dynamic arg$16=(arg1$10 as dc.dynamic);
final dc.dynamic arg$15=(arg2$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8394$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$16, arg$15, $if_$8, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg3$9 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$2((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
final dc.dynamic arg$18=(arg1$11 as dc.dynamic);
final dc.dynamic arg$17=(arg2$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=([arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8394$2, ){
final dc.dynamic o7310$10=more8394$2;
late final dc.dynamic more8394$3;
if((o7310$10 is lcoc_core.ISeqable$iface)){
more8394$3=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8394$3=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
if((null==more8394$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8394$3, );
final dc.dynamic more8394$4=lcoc_core.next(more8394$3, );
if((null==(more8394$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8394$4, );
final dc.dynamic more8394$5=lcoc_core.next(more8394$4, );
if((null==(more8394$5 as dc.dynamic))){
return (this.$_invoke$2((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (more8394$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuY

// BEGIN IFnMixin_uuZ
abstract class IFnMixin_uuZ extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic etc$1, );

dc.dynamic $_invoke$2(dc.dynamic arg1$2, dc.dynamic arg2$2, ){
final dc.dynamic arg$2=(arg1$2 as dc.dynamic);
final dc.dynamic arg$1=(arg2$2 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$1, ){
final dc.dynamic arg$4=(arg1$3 as dc.dynamic);
final dc.dynamic arg$3=(arg2$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg3$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$4, arg$3, $if_$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$2, dc.dynamic arg4$1, ){
final dc.dynamic arg$6=(arg1$4 as dc.dynamic);
final dc.dynamic arg$5=(arg2$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg3$2, arg4$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, $if_$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$8=(arg1$5 as dc.dynamic);
final dc.dynamic arg$7=(arg2$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg3$3, arg4$2, arg5$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$8, arg$7, $if_$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$10=(arg1$6 as dc.dynamic);
final dc.dynamic arg$9=(arg2$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg3$4, arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$10, arg$9, $if_$5, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$12=(arg1$7 as dc.dynamic);
final dc.dynamic arg$11=(arg2$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg3$5, arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, $if_$6, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$14=(arg1$8 as dc.dynamic);
final dc.dynamic arg$13=(arg2$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg3$6, arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$14, arg$13, $if_$7, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$16=(arg1$9 as dc.dynamic);
final dc.dynamic arg$15=(arg2$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=[arg3$7, arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$16, arg$15, $if_$8, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8144$1, ){
final dc.dynamic arg$18=(arg1$10 as dc.dynamic);
final dc.dynamic arg$17=(arg2$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=([arg3$8, arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8144$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, $if_$9, ));
}

dc.dynamic call(dc.dynamic arg1$11, dc.dynamic arg2$11, [arg3$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg3$9 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$2((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), ));
}
final dc.dynamic arg$20=(arg1$11 as dc.dynamic);
final dc.dynamic arg$19=(arg2$11 as dc.dynamic);
final dc.List<dc.dynamic> o7310$10=([arg3$9, arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions(o7310$10, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$10, ));
}
return (this.$_invoke$vararg(arg$20, arg$19, $if_$10, ));
}

dc.dynamic $_apply$1(dc.dynamic more8144$2, ){
final dc.dynamic o7310$11=more8144$2;
late final dc.dynamic more8144$3;
if((o7310$11 is lcoc_core.ISeqable$iface)){
more8144$3=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8144$3=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
if((null==more8144$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$12=lcoc_core.first(more8144$3, );
final dc.dynamic more8144$4=lcoc_core.next(more8144$3, );
if((null==(more8144$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$12=lcoc_core.first(more8144$4, );
final dc.dynamic more8144$5=lcoc_core.next(more8144$4, );
return (this.$_invoke$vararg((arg1$12 as dc.dynamic), (arg2$12 as dc.dynamic), (more8144$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuZ

// BEGIN IFnMixin_uuuXX
abstract class IFnMixin_uuuXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, );

dc.dynamic call(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, [arg4$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg4$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$3 as dc.dynamic), ));
}
if((arg5$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$3 as dc.dynamic), (arg4$2 as dc.dynamic), ));
}
return (this.$_invoke$5((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$3 as dc.dynamic), (arg4$2 as dc.dynamic), (arg5$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8687$1, ){
final dc.dynamic o7310$1=more8687$1;
late final dc.dynamic more8687$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8687$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8687$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8687$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8687$2, );
final dc.dynamic more8687$3=lcoc_core.next(more8687$2, );
if((null==(more8687$3 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$4=lcoc_core.first(more8687$3, );
final dc.dynamic more8687$4=lcoc_core.next(more8687$3, );
if((null==(more8687$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$4=lcoc_core.first(more8687$4, );
final dc.dynamic more8687$5=lcoc_core.next(more8687$4, );
if((null==(more8687$5 as dc.dynamic))){
return (this.$_invoke$3((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), ));
}
final dc.dynamic arg4$3=lcoc_core.first(more8687$5, );
final dc.dynamic more8687$6=lcoc_core.next(more8687$5, );
if((null==(more8687$6 as dc.dynamic))){
return (this.$_invoke$4((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), ));
}
final dc.dynamic arg5$2=lcoc_core.first(more8687$6, );
final dc.dynamic more8687$7=lcoc_core.next(more8687$6, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuXX

// BEGIN IFnMixin_uuuXXX
abstract class IFnMixin_uuuXXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, );

dc.dynamic $_invoke$5(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$2, dc.dynamic arg5$1, );

dc.dynamic call(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, [arg4$3 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg4$3==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), ));
}
if((arg5$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), ));
}
if((arg6$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$5((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), (arg5$2 as dc.dynamic), ));
}
return (this.$_invoke$6((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$3 as dc.dynamic), (arg5$2 as dc.dynamic), (arg6$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8506$1, ){
final dc.dynamic o7310$1=more8506$1;
late final dc.dynamic more8506$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8506$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8506$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8506$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$5=lcoc_core.first(more8506$2, );
final dc.dynamic more8506$3=lcoc_core.next(more8506$2, );
if((null==(more8506$3 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$5=lcoc_core.first(more8506$3, );
final dc.dynamic more8506$4=lcoc_core.next(more8506$3, );
if((null==(more8506$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$5=lcoc_core.first(more8506$4, );
final dc.dynamic more8506$5=lcoc_core.next(more8506$4, );
if((null==(more8506$5 as dc.dynamic))){
return (this.$_invoke$3((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$5 as dc.dynamic), ));
}
final dc.dynamic arg4$4=lcoc_core.first(more8506$5, );
final dc.dynamic more8506$6=lcoc_core.next(more8506$5, );
if((null==(more8506$6 as dc.dynamic))){
return (this.$_invoke$4((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$5 as dc.dynamic), (arg4$4 as dc.dynamic), ));
}
final dc.dynamic arg5$3=lcoc_core.first(more8506$6, );
final dc.dynamic more8506$7=lcoc_core.next(more8506$6, );
if((null==(more8506$7 as dc.dynamic))){
return (this.$_invoke$5((arg1$5 as dc.dynamic), (arg2$5 as dc.dynamic), (arg3$5 as dc.dynamic), (arg4$4 as dc.dynamic), (arg5$3 as dc.dynamic), ));
}
final dc.dynamic arg6$2=lcoc_core.first(more8506$7, );
final dc.dynamic more8506$8=lcoc_core.next(more8506$7, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuXXX

// BEGIN IFnMixin_uuuXXXY
abstract class IFnMixin_uuuXXXY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$6(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, dc.dynamic arg6$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, );

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$3, dc.dynamic arg5$2, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$7(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$1, ){
final dc.dynamic arg$6=(arg1$6 as dc.dynamic);
final dc.dynamic arg$5=(arg2$6 as dc.dynamic);
final dc.dynamic arg$4=(arg3$6 as dc.dynamic);
final dc.dynamic arg$3=(arg4$5 as dc.dynamic);
final dc.dynamic arg$2=(arg5$4 as dc.dynamic);
final dc.dynamic arg$1=(arg6$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg7$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, arg$4, arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$12=(arg1$7 as dc.dynamic);
final dc.dynamic arg$11=(arg2$7 as dc.dynamic);
final dc.dynamic arg$10=(arg3$7 as dc.dynamic);
final dc.dynamic arg$9=(arg4$6 as dc.dynamic);
final dc.dynamic arg$8=(arg5$5 as dc.dynamic);
final dc.dynamic arg$7=(arg6$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg7$2, arg8$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, arg$9, arg$8, arg$7, $if_$2, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$18=(arg1$8 as dc.dynamic);
final dc.dynamic arg$17=(arg2$8 as dc.dynamic);
final dc.dynamic arg$16=(arg3$8 as dc.dynamic);
final dc.dynamic arg$15=(arg4$7 as dc.dynamic);
final dc.dynamic arg$14=(arg5$6 as dc.dynamic);
final dc.dynamic arg$13=(arg6$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, arg$16, arg$15, arg$14, arg$13, $if_$3, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$6, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8583$1, ){
final dc.dynamic arg$24=(arg1$9 as dc.dynamic);
final dc.dynamic arg$23=(arg2$9 as dc.dynamic);
final dc.dynamic arg$22=(arg3$9 as dc.dynamic);
final dc.dynamic arg$21=(arg4$8 as dc.dynamic);
final dc.dynamic arg$20=(arg5$7 as dc.dynamic);
final dc.dynamic arg$19=(arg6$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=([arg7$4, arg8$3, arg9$2, ]+(more8583$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, arg$21, arg$20, arg$19, $if_$4, ));
}

dc.dynamic call(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$10, [arg4$9 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg4$9==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$3((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
if((arg5$8==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
if((arg6$7==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$5((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), ));
}
if(dc.identical((arg7$5 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$6((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), (arg6$7 as dc.dynamic), ));
}
final dc.dynamic arg$30=(arg1$10 as dc.dynamic);
final dc.dynamic arg$29=(arg2$10 as dc.dynamic);
final dc.dynamic arg$28=(arg3$10 as dc.dynamic);
final dc.dynamic arg$27=(arg4$9 as dc.dynamic);
final dc.dynamic arg$26=(arg5$8 as dc.dynamic);
final dc.dynamic arg$25=(arg6$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=([arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$30, arg$29, arg$28, arg$27, arg$26, arg$25, $if_$5, ));
}

dc.dynamic $_apply$1(dc.dynamic more8583$2, ){
final dc.dynamic o7310$6=more8583$2;
late final dc.dynamic more8583$3;
if((o7310$6 is lcoc_core.ISeqable$iface)){
more8583$3=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8583$3=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
if((null==more8583$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$11=lcoc_core.first(more8583$3, );
final dc.dynamic more8583$4=lcoc_core.next(more8583$3, );
if((null==(more8583$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$11=lcoc_core.first(more8583$4, );
final dc.dynamic more8583$5=lcoc_core.next(more8583$4, );
if((null==(more8583$5 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$11=lcoc_core.first(more8583$5, );
final dc.dynamic more8583$6=lcoc_core.next(more8583$5, );
if((null==(more8583$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
final dc.dynamic arg4$10=lcoc_core.first(more8583$6, );
final dc.dynamic more8583$7=lcoc_core.next(more8583$6, );
if((null==(more8583$7 as dc.dynamic))){
return (this.$_invoke$4((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8583$7, );
final dc.dynamic more8583$8=lcoc_core.next(more8583$7, );
if((null==(more8583$8 as dc.dynamic))){
return (this.$_invoke$5((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), ));
}
final dc.dynamic arg6$8=lcoc_core.first(more8583$8, );
final dc.dynamic more8583$9=lcoc_core.next(more8583$8, );
if((null==(more8583$9 as dc.dynamic))){
return (this.$_invoke$6((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (arg6$8 as dc.dynamic), (more8583$9 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuXXXY

// BEGIN IFnMixin_uuuY
abstract class IFnMixin_uuuY extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$3(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic etc$1, );

dc.dynamic $_invoke$4(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.dynamic arg$3=(arg1$3 as dc.dynamic);
final dc.dynamic arg$2=(arg2$3 as dc.dynamic);
final dc.dynamic arg$1=(arg3$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[arg4$1, ];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$6=(arg1$4 as dc.dynamic);
final dc.dynamic arg$5=(arg2$4 as dc.dynamic);
final dc.dynamic arg$4=(arg3$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg4$2, arg5$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, arg$4, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$9=(arg1$5 as dc.dynamic);
final dc.dynamic arg$8=(arg2$5 as dc.dynamic);
final dc.dynamic arg$7=(arg3$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$9, arg$8, arg$7, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$12=(arg1$6 as dc.dynamic);
final dc.dynamic arg$11=(arg2$6 as dc.dynamic);
final dc.dynamic arg$10=(arg3$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$15=(arg1$7 as dc.dynamic);
final dc.dynamic arg$14=(arg2$7 as dc.dynamic);
final dc.dynamic arg$13=(arg3$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$15, arg$14, arg$13, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$18=(arg1$8 as dc.dynamic);
final dc.dynamic arg$17=(arg2$8 as dc.dynamic);
final dc.dynamic arg$16=(arg3$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, arg$16, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8332$1, ){
final dc.dynamic arg$21=(arg1$9 as dc.dynamic);
final dc.dynamic arg$20=(arg2$9 as dc.dynamic);
final dc.dynamic arg$19=(arg3$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8332$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$21, arg$20, arg$19, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$10, [arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg4$8 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$3((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
final dc.dynamic arg$24=(arg1$10 as dc.dynamic);
final dc.dynamic arg$23=(arg2$10 as dc.dynamic);
final dc.dynamic arg$22=(arg3$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8332$2, ){
final dc.dynamic o7310$9=more8332$2;
late final dc.dynamic more8332$3;
if((o7310$9 is lcoc_core.ISeqable$iface)){
more8332$3=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8332$3=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
if((null==more8332$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$11=lcoc_core.first(more8332$3, );
final dc.dynamic more8332$4=lcoc_core.next(more8332$3, );
if((null==(more8332$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$11=lcoc_core.first(more8332$4, );
final dc.dynamic more8332$5=lcoc_core.next(more8332$4, );
if((null==(more8332$5 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$11=lcoc_core.first(more8332$5, );
final dc.dynamic more8332$6=lcoc_core.next(more8332$5, );
if((null==(more8332$6 as dc.dynamic))){
return (this.$_invoke$3((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), ));
}
return (this.$_invoke$vararg((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), (more8332$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuY

// BEGIN IFnMixin_uuuZ
abstract class IFnMixin_uuuZ extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic etc$1, );

dc.dynamic $_invoke$3(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, ){
final dc.dynamic arg$3=(arg1$2 as dc.dynamic);
final dc.dynamic arg$2=(arg2$2 as dc.dynamic);
final dc.dynamic arg$1=(arg3$2 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$1, ){
final dc.dynamic arg$6=(arg1$3 as dc.dynamic);
final dc.dynamic arg$5=(arg2$3 as dc.dynamic);
final dc.dynamic arg$4=(arg3$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg4$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$6, arg$5, arg$4, $if_$2, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$2, dc.dynamic arg5$1, ){
final dc.dynamic arg$9=(arg1$4 as dc.dynamic);
final dc.dynamic arg$8=(arg2$4 as dc.dynamic);
final dc.dynamic arg$7=(arg3$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg4$2, arg5$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$9, arg$8, arg$7, $if_$3, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$3, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$12=(arg1$5 as dc.dynamic);
final dc.dynamic arg$11=(arg2$5 as dc.dynamic);
final dc.dynamic arg$10=(arg3$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg4$3, arg5$2, arg6$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, $if_$4, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$15=(arg1$6 as dc.dynamic);
final dc.dynamic arg$14=(arg2$6 as dc.dynamic);
final dc.dynamic arg$13=(arg3$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg4$4, arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$15, arg$14, arg$13, $if_$5, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$18=(arg1$7 as dc.dynamic);
final dc.dynamic arg$17=(arg2$7 as dc.dynamic);
final dc.dynamic arg$16=(arg3$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg4$5, arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$18, arg$17, arg$16, $if_$6, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$21=(arg1$8 as dc.dynamic);
final dc.dynamic arg$20=(arg2$8 as dc.dynamic);
final dc.dynamic arg$19=(arg3$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=[arg4$6, arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$21, arg$20, arg$19, $if_$7, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8149$1, ){
final dc.dynamic arg$24=(arg1$9 as dc.dynamic);
final dc.dynamic arg$23=(arg2$9 as dc.dynamic);
final dc.dynamic arg$22=(arg3$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg4$7, arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8149$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, $if_$8, ));
}

dc.dynamic call(dc.dynamic arg1$10, dc.dynamic arg2$10, dc.dynamic arg3$10, [arg4$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg4$8 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$3((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), ));
}
final dc.dynamic arg$27=(arg1$10 as dc.dynamic);
final dc.dynamic arg$26=(arg2$10 as dc.dynamic);
final dc.dynamic arg$25=(arg3$10 as dc.dynamic);
final dc.List<dc.dynamic> o7310$9=([arg4$8, arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions(o7310$9, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$9, ));
}
return (this.$_invoke$vararg(arg$27, arg$26, arg$25, $if_$9, ));
}

dc.dynamic $_apply$1(dc.dynamic more8149$2, ){
final dc.dynamic o7310$10=more8149$2;
late final dc.dynamic more8149$3;
if((o7310$10 is lcoc_core.ISeqable$iface)){
more8149$3=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8149$3=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
if((null==more8149$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$11=lcoc_core.first(more8149$3, );
final dc.dynamic more8149$4=lcoc_core.next(more8149$3, );
if((null==(more8149$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$11=lcoc_core.first(more8149$4, );
final dc.dynamic more8149$5=lcoc_core.next(more8149$4, );
if((null==(more8149$5 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$11=lcoc_core.first(more8149$5, );
final dc.dynamic more8149$6=lcoc_core.next(more8149$5, );
return (this.$_invoke$vararg((arg1$11 as dc.dynamic), (arg2$11 as dc.dynamic), (arg3$11 as dc.dynamic), (more8149$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuZ

// BEGIN IFnMixin_uuuuXX
abstract class IFnMixin_uuuuXX extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$5(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, );

dc.dynamic call(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, [arg5$2 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$1 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg5$2==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$3 as dc.dynamic), (arg4$3 as dc.dynamic), ));
}
if((arg6$1==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$5((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$3 as dc.dynamic), (arg4$3 as dc.dynamic), (arg5$2 as dc.dynamic), ));
}
return (this.$_invoke$6((arg1$3 as dc.dynamic), (arg2$3 as dc.dynamic), (arg3$3 as dc.dynamic), (arg4$3 as dc.dynamic), (arg5$2 as dc.dynamic), (arg6$1 as dc.dynamic), ));
}

dc.dynamic $_apply$1(dc.dynamic more8453$1, ){
final dc.dynamic o7310$1=more8453$1;
late final dc.dynamic more8453$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
more8453$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8453$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==more8453$2)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$4=lcoc_core.first(more8453$2, );
final dc.dynamic more8453$3=lcoc_core.next(more8453$2, );
if((null==(more8453$3 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$4=lcoc_core.first(more8453$3, );
final dc.dynamic more8453$4=lcoc_core.next(more8453$3, );
if((null==(more8453$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$4=lcoc_core.first(more8453$4, );
final dc.dynamic more8453$5=lcoc_core.next(more8453$4, );
if((null==(more8453$5 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg4$4=lcoc_core.first(more8453$5, );
final dc.dynamic more8453$6=lcoc_core.next(more8453$5, );
if((null==(more8453$6 as dc.dynamic))){
return (this.$_invoke$4((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$4 as dc.dynamic), ));
}
final dc.dynamic arg5$3=lcoc_core.first(more8453$6, );
final dc.dynamic more8453$7=lcoc_core.next(more8453$6, );
if((null==(more8453$7 as dc.dynamic))){
return (this.$_invoke$5((arg1$4 as dc.dynamic), (arg2$4 as dc.dynamic), (arg3$4 as dc.dynamic), (arg4$4 as dc.dynamic), (arg5$3 as dc.dynamic), ));
}
final dc.dynamic arg6$2=lcoc_core.first(more8453$7, );
final dc.dynamic more8453$8=lcoc_core.next(more8453$7, );
throw dc.ArgumentError("No matching arity", );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuuXX

// BEGIN IFnMixin_uuuuXZ
abstract class IFnMixin_uuuuXZ extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$4(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, );

dc.dynamic $_invoke$vararg(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, dc.dynamic arg5$1, dc.dynamic etc$1, );

dc.dynamic $_invoke$5(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, dc.dynamic arg5$2, ){
final dc.dynamic arg$5=(arg1$3 as dc.dynamic);
final dc.dynamic arg$4=(arg2$3 as dc.dynamic);
final dc.dynamic arg$3=(arg3$3 as dc.dynamic);
final dc.dynamic arg$2=(arg4$3 as dc.dynamic);
final dc.dynamic arg$1=(arg5$2 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$5, arg$4, arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$4, dc.dynamic arg5$3, dc.dynamic arg6$1, ){
final dc.dynamic arg$10=(arg1$4 as dc.dynamic);
final dc.dynamic arg$9=(arg2$4 as dc.dynamic);
final dc.dynamic arg$8=(arg3$4 as dc.dynamic);
final dc.dynamic arg$7=(arg4$4 as dc.dynamic);
final dc.dynamic arg$6=(arg5$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg6$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$10, arg$9, arg$8, arg$7, arg$6, $if_$2, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$5, dc.dynamic arg5$4, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$15=(arg1$5 as dc.dynamic);
final dc.dynamic arg$14=(arg2$5 as dc.dynamic);
final dc.dynamic arg$13=(arg3$5 as dc.dynamic);
final dc.dynamic arg$12=(arg4$5 as dc.dynamic);
final dc.dynamic arg$11=(arg5$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg6$2, arg7$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$15, arg$14, arg$13, arg$12, arg$11, $if_$3, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$6, dc.dynamic arg5$5, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$20=(arg1$6 as dc.dynamic);
final dc.dynamic arg$19=(arg2$6 as dc.dynamic);
final dc.dynamic arg$18=(arg3$6 as dc.dynamic);
final dc.dynamic arg$17=(arg4$6 as dc.dynamic);
final dc.dynamic arg$16=(arg5$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$20, arg$19, arg$18, arg$17, arg$16, $if_$4, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$7, dc.dynamic arg5$6, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$25=(arg1$7 as dc.dynamic);
final dc.dynamic arg$24=(arg2$7 as dc.dynamic);
final dc.dynamic arg$23=(arg3$7 as dc.dynamic);
final dc.dynamic arg$22=(arg4$7 as dc.dynamic);
final dc.dynamic arg$21=(arg5$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$25, arg$24, arg$23, arg$22, arg$21, $if_$5, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$8, dc.dynamic arg5$7, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8235$1, ){
final dc.dynamic arg$30=(arg1$8 as dc.dynamic);
final dc.dynamic arg$29=(arg2$8 as dc.dynamic);
final dc.dynamic arg$28=(arg3$8 as dc.dynamic);
final dc.dynamic arg$27=(arg4$8 as dc.dynamic);
final dc.dynamic arg$26=(arg5$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=([arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8235$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$30, arg$29, arg$28, arg$27, arg$26, $if_$6, ));
}

dc.dynamic call(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$9, [arg5$8 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if((arg5$8==const lcoc_core.Keyword(null, "missing", -1, ))){
return (this.$_invoke$4((arg1$9 as dc.dynamic), (arg2$9 as dc.dynamic), (arg3$9 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
if(dc.identical((arg6$6 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$5((arg1$9 as dc.dynamic), (arg2$9 as dc.dynamic), (arg3$9 as dc.dynamic), (arg4$9 as dc.dynamic), (arg5$8 as dc.dynamic), ));
}
final dc.dynamic arg$35=(arg1$9 as dc.dynamic);
final dc.dynamic arg$34=(arg2$9 as dc.dynamic);
final dc.dynamic arg$33=(arg3$9 as dc.dynamic);
final dc.dynamic arg$32=(arg4$9 as dc.dynamic);
final dc.dynamic arg$31=(arg5$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$35, arg$34, arg$33, arg$32, arg$31, $if_$7, ));
}

dc.dynamic $_apply$1(dc.dynamic more8235$2, ){
final dc.dynamic o7310$8=more8235$2;
late final dc.dynamic more8235$3;
if((o7310$8 is lcoc_core.ISeqable$iface)){
more8235$3=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8235$3=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
if((null==more8235$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$10=lcoc_core.first(more8235$3, );
final dc.dynamic more8235$4=lcoc_core.next(more8235$3, );
if((null==(more8235$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$10=lcoc_core.first(more8235$4, );
final dc.dynamic more8235$5=lcoc_core.next(more8235$4, );
if((null==(more8235$5 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$10=lcoc_core.first(more8235$5, );
final dc.dynamic more8235$6=lcoc_core.next(more8235$5, );
if((null==(more8235$6 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg4$10=lcoc_core.first(more8235$6, );
final dc.dynamic more8235$7=lcoc_core.next(more8235$6, );
if((null==(more8235$7 as dc.dynamic))){
return (this.$_invoke$4((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$10 as dc.dynamic), ));
}
final dc.dynamic arg5$9=lcoc_core.first(more8235$7, );
final dc.dynamic more8235$8=lcoc_core.next(more8235$7, );
return (this.$_invoke$vararg((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$10 as dc.dynamic), (arg5$9 as dc.dynamic), (more8235$8 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuuXZ

// BEGIN IFnMixin_uuuuZ
abstract class IFnMixin_uuuuZ extends dc.Object implements lcoc_core.IFn$iface {

dc.dynamic $_invoke$vararg(dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic arg4$1, dc.dynamic etc$1, );

dc.dynamic $_invoke$4(dc.dynamic arg1$2, dc.dynamic arg2$2, dc.dynamic arg3$2, dc.dynamic arg4$2, ){
final dc.dynamic arg$4=(arg1$2 as dc.dynamic);
final dc.dynamic arg$3=(arg2$2 as dc.dynamic);
final dc.dynamic arg$2=(arg3$2 as dc.dynamic);
final dc.dynamic arg$1=(arg4$2 as dc.dynamic);
final dc.List<dc.dynamic> o7310$1=[];
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return (this.$_invoke$vararg(arg$4, arg$3, arg$2, arg$1, $if_$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic arg1$3, dc.dynamic arg2$3, dc.dynamic arg3$3, dc.dynamic arg4$3, dc.dynamic arg5$1, ){
final dc.dynamic arg$8=(arg1$3 as dc.dynamic);
final dc.dynamic arg$7=(arg2$3 as dc.dynamic);
final dc.dynamic arg$6=(arg3$3 as dc.dynamic);
final dc.dynamic arg$5=(arg4$3 as dc.dynamic);
final dc.List<dc.dynamic> o7310$2=[arg5$1, ];
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
return (this.$_invoke$vararg(arg$8, arg$7, arg$6, arg$5, $if_$2, ));
}

dc.dynamic $_invoke$6(dc.dynamic arg1$4, dc.dynamic arg2$4, dc.dynamic arg3$4, dc.dynamic arg4$4, dc.dynamic arg5$2, dc.dynamic arg6$1, ){
final dc.dynamic arg$12=(arg1$4 as dc.dynamic);
final dc.dynamic arg$11=(arg2$4 as dc.dynamic);
final dc.dynamic arg$10=(arg3$4 as dc.dynamic);
final dc.dynamic arg$9=(arg4$4 as dc.dynamic);
final dc.List<dc.dynamic> o7310$3=[arg5$2, arg6$1, ];
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$3, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$3, ));
}
return (this.$_invoke$vararg(arg$12, arg$11, arg$10, arg$9, $if_$3, ));
}

dc.dynamic $_invoke$7(dc.dynamic arg1$5, dc.dynamic arg2$5, dc.dynamic arg3$5, dc.dynamic arg4$5, dc.dynamic arg5$3, dc.dynamic arg6$2, dc.dynamic arg7$1, ){
final dc.dynamic arg$16=(arg1$5 as dc.dynamic);
final dc.dynamic arg$15=(arg2$5 as dc.dynamic);
final dc.dynamic arg$14=(arg3$5 as dc.dynamic);
final dc.dynamic arg$13=(arg4$5 as dc.dynamic);
final dc.List<dc.dynamic> o7310$4=[arg5$3, arg6$2, arg7$1, ];
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions(o7310$4, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$4, ));
}
return (this.$_invoke$vararg(arg$16, arg$15, arg$14, arg$13, $if_$4, ));
}

dc.dynamic $_invoke$8(dc.dynamic arg1$6, dc.dynamic arg2$6, dc.dynamic arg3$6, dc.dynamic arg4$6, dc.dynamic arg5$4, dc.dynamic arg6$3, dc.dynamic arg7$2, dc.dynamic arg8$1, ){
final dc.dynamic arg$20=(arg1$6 as dc.dynamic);
final dc.dynamic arg$19=(arg2$6 as dc.dynamic);
final dc.dynamic arg$18=(arg3$6 as dc.dynamic);
final dc.dynamic arg$17=(arg4$6 as dc.dynamic);
final dc.List<dc.dynamic> o7310$5=[arg5$4, arg6$3, arg7$2, arg8$1, ];
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions(o7310$5, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$5, ));
}
return (this.$_invoke$vararg(arg$20, arg$19, arg$18, arg$17, $if_$5, ));
}

dc.dynamic $_invoke$9(dc.dynamic arg1$7, dc.dynamic arg2$7, dc.dynamic arg3$7, dc.dynamic arg4$7, dc.dynamic arg5$5, dc.dynamic arg6$4, dc.dynamic arg7$3, dc.dynamic arg8$2, dc.dynamic arg9$1, ){
final dc.dynamic arg$24=(arg1$7 as dc.dynamic);
final dc.dynamic arg$23=(arg2$7 as dc.dynamic);
final dc.dynamic arg$22=(arg3$7 as dc.dynamic);
final dc.dynamic arg$21=(arg4$7 as dc.dynamic);
final dc.List<dc.dynamic> o7310$6=[arg5$5, arg6$4, arg7$3, arg8$2, arg9$1, ];
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions(o7310$6, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$6, ));
}
return (this.$_invoke$vararg(arg$24, arg$23, arg$22, arg$21, $if_$6, ));
}

dc.dynamic $_invoke_more$10(dc.dynamic arg1$8, dc.dynamic arg2$8, dc.dynamic arg3$8, dc.dynamic arg4$8, dc.dynamic arg5$6, dc.dynamic arg6$5, dc.dynamic arg7$4, dc.dynamic arg8$3, dc.dynamic arg9$2, dc.dynamic more8262$1, ){
final dc.dynamic arg$28=(arg1$8 as dc.dynamic);
final dc.dynamic arg$27=(arg2$8 as dc.dynamic);
final dc.dynamic arg$26=(arg3$8 as dc.dynamic);
final dc.dynamic arg$25=(arg4$8 as dc.dynamic);
final dc.List<dc.dynamic> o7310$7=([arg5$6, arg6$5, arg7$4, arg8$3, arg9$2, ]+(more8262$1 as dc.List<dc.dynamic>));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions(o7310$7, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$7, ));
}
return (this.$_invoke$vararg(arg$28, arg$27, arg$26, arg$25, $if_$7, ));
}

dc.dynamic call(dc.dynamic arg1$9, dc.dynamic arg2$9, dc.dynamic arg3$9, dc.dynamic arg4$9, [arg5$7 = const lcoc_core.Keyword(null, "missing", -1, ), arg6$6 = const lcoc_core.Keyword(null, "missing", -1, ), arg7$5 = const lcoc_core.Keyword(null, "missing", -1, ), arg8$4 = const lcoc_core.Keyword(null, "missing", -1, ), arg9$3 = const lcoc_core.Keyword(null, "missing", -1, ), ]){
if(dc.identical((arg5$7 as dc.Object?), const lcoc_core.Keyword(null, "missing", -1, ), )){
return (this.$_invoke$4((arg1$9 as dc.dynamic), (arg2$9 as dc.dynamic), (arg3$9 as dc.dynamic), (arg4$9 as dc.dynamic), ));
}
final dc.dynamic arg$32=(arg1$9 as dc.dynamic);
final dc.dynamic arg$31=(arg2$9 as dc.dynamic);
final dc.dynamic arg$30=(arg3$9 as dc.dynamic);
final dc.dynamic arg$29=(arg4$9 as dc.dynamic);
final dc.List<dc.dynamic> o7310$8=([arg5$7, arg6$6, arg7$5, arg8$4, arg9$3, ].takeWhile((dc.dynamic e$1529_$AUTO_$1, ){
return (e$1529_$AUTO_$1!=const lcoc_core.Keyword(null, "missing", -1, ));
}, ).toList());
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions(o7310$8, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$8, ));
}
return (this.$_invoke$vararg(arg$32, arg$31, arg$30, arg$29, $if_$8, ));
}

dc.dynamic $_apply$1(dc.dynamic more8262$2, ){
final dc.dynamic o7310$9=more8262$2;
late final dc.dynamic more8262$3;
if((o7310$9 is lcoc_core.ISeqable$iface)){
more8262$3=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more8262$3=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
if((null==more8262$3)){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg1$10=lcoc_core.first(more8262$3, );
final dc.dynamic more8262$4=lcoc_core.next(more8262$3, );
if((null==(more8262$4 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg2$10=lcoc_core.first(more8262$4, );
final dc.dynamic more8262$5=lcoc_core.next(more8262$4, );
if((null==(more8262$5 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg3$10=lcoc_core.first(more8262$5, );
final dc.dynamic more8262$6=lcoc_core.next(more8262$5, );
if((null==(more8262$6 as dc.dynamic))){
throw dc.ArgumentError("No matching arity", );
}
final dc.dynamic arg4$10=lcoc_core.first(more8262$6, );
final dc.dynamic more8262$7=lcoc_core.next(more8262$6, );
return (this.$_invoke$vararg((arg1$10 as dc.dynamic), (arg2$10 as dc.dynamic), (arg3$10 as dc.dynamic), (arg4$10 as dc.dynamic), (more8262$7 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IFnMixin_uuuuZ

// BEGIN IHash
var IHash=lcoc_core.IHash$iprot();

// END IHash

// BEGIN IHash$ext
abstract class IHash$ext extends dc.Object {

dc.dynamic $_hash$0(dc.dynamic o$1, );

dc.dynamic $_hash_realized$QMARK_$0(dc.dynamic o$2, );
}

// END IHash$ext

// BEGIN IHash$iface
abstract class IHash$iface extends dc.Object {

dc.dynamic $_hash$0();

dc.dynamic $_hash_realized$QMARK_$0();
}

// END IHash$iface

// BEGIN IHash$iprot
class IHash$iprot extends dc.Object implements lcoc_core.IProtocol {

const IHash$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IHash$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.bool);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
final dc.bool or$7228_$AUTO_$3=(x$1 is dc.int);
if(or$7228_$AUTO_$3){
return or$7228_$AUTO_$3;
}
final dc.bool or$7228_$AUTO_$4=(x$1 is dc.double);
if(or$7228_$AUTO_$4){
return or$7228_$AUTO_$4;
}
final dc.bool or$7228_$AUTO_$5=(x$1 is dc.Null);
if(or$7228_$AUTO_$5){
return or$7228_$AUTO_$5;
}
final dc.bool or$7228_$AUTO_$6=(x$1 is dc.Object);
if(or$7228_$AUTO_$6){
return or$7228_$AUTO_$6;
}
final dc.bool or$7228_$AUTO_$7=(x$1 is dc.String);
if(or$7228_$AUTO_$7){
return or$7228_$AUTO_$7;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.bool)){
return lcoc_core.$C$bool$$IHash$D$$extension;
}
if((x$2 is dc.int)){
return lcoc_core.$C$int$$IHash$D$$extension;
}
if((x$2 is dc.double)){
return lcoc_core.$C$double$$IHash$D$$extension;
}
if((x$2 is dc.Null)){
return lcoc_core.$C$Null$$IHash$D$$extension;
}
if((x$2 is dc.String)){
return lcoc_core.$C$String$$IHash$D$$extension;
}
if((x$2 is dc.Object)){
return lcoc_core.$C$Object$$IHash$D$$extension;
}
throw dc.Exception((("No extension of protocol IHash found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IHash$iprot

// BEGIN IIndexed
var IIndexed=lcoc_core.IIndexed$iprot();

// END IIndexed

// BEGIN IIndexed$ext
abstract class IIndexed$ext extends dc.Object {

dc.dynamic $_nth$2(dc.dynamic coll$1, dc.dynamic n$3, dc.dynamic not_found$2, );

dc.dynamic $_nth$1(dc.dynamic coll$2, dc.dynamic n$4, );
}

// END IIndexed$ext

// BEGIN IIndexed$iface
abstract class IIndexed$iface extends dc.Object {

dc.dynamic $_nth$2(dc.dynamic n$1, dc.dynamic not_found$1, );

dc.dynamic $_nth$1(dc.dynamic n$2, );
}

// END IIndexed$iface

// BEGIN IIndexed$iprot
class IIndexed$iprot extends dc.Object implements lcoc_core.IProtocol {

const IIndexed$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7228_$AUTO_$4=(x$3 is lcoc_core.IIndexed$iface);
if(or$7228_$AUTO_$4){
return or$7228_$AUTO_$4;
}
final dc.bool or$7228_$AUTO_$5=(x$3 is dc.List);
if(or$7228_$AUTO_$5){
return or$7228_$AUTO_$5;
}
final dc.bool or$7228_$AUTO_$6=(x$3 is dc.String);
if(or$7228_$AUTO_$6){
return or$7228_$AUTO_$6;
}
final dc.bool or$7228_$AUTO_$7=(x$3 is dc.Null);
if(or$7228_$AUTO_$7){
return or$7228_$AUTO_$7;
}
final dc.bool or$7228_$AUTO_$8=(x$3 is dc.MapEntry);
if(or$7228_$AUTO_$8){
return or$7228_$AUTO_$8;
}
final dc.bool or$7228_$AUTO_$9=(x$3 is dc.Match);
if(or$7228_$AUTO_$9){
return or$7228_$AUTO_$9;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
if((x$4 is dc.List)){
return lcoc_core.$C$List$$IIndexed$D$$extension;
}
if((x$4 is dc.String)){
return lcoc_core.$C$String$$IIndexed$D$$extension;
}
if((x$4 is dc.Null)){
return lcoc_core.$C$Null$$IIndexed$D$$extension;
}
if((x$4 is dc.MapEntry)){
return lcoc_core.$C$MapEntry$$IIndexed$D$$extension;
}
if((x$4 is dc.Match)){
return lcoc_core.$C$Match$$IIndexed$D$$extension;
}
return lcoc_core.$C$fallback$$IIndexed$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IIndexed$iprot

// BEGIN IKVReduce
var IKVReduce=lcoc_core.IKVReduce$iprot();

// END IKVReduce

// BEGIN IKVReduce$ext
abstract class IKVReduce$ext extends dc.Object {

dc.dynamic $_kv_reduce$2(dc.dynamic coll$1, dc.dynamic f$2, dc.dynamic init$2, );
}

// END IKVReduce$ext

// BEGIN IKVReduce$iface
abstract class IKVReduce$iface extends dc.Object {

dc.dynamic $_kv_reduce$2(dc.dynamic f$1, dc.dynamic init$1, );
}

// END IKVReduce$iface

// BEGIN IKVReduce$iprot
class IKVReduce$iprot extends dc.Object implements lcoc_core.IProtocol {

const IKVReduce$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IKVReduce$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.Null);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$Null$$IKVReduce$D$$extension;
}
throw dc.Exception((("No extension of protocol IKVReduce found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IKVReduce$iprot

// BEGIN IList
var IList=lcoc_core.IList$iprot();

// END IList

// BEGIN IList$ext
abstract class IList$ext extends dc.Object {
}

// END IList$ext

// BEGIN IList$iface
abstract class IList$iface extends dc.Object {
}

// END IList$iface

// BEGIN IList$iprot
class IList$iprot extends dc.Object implements lcoc_core.IProtocol {

const IList$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IList$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IList found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IList$iprot

// BEGIN ILookup
var ILookup=lcoc_core.ILookup$iprot();

// END ILookup

// BEGIN ILookup$ext
abstract class ILookup$ext extends dc.Object {

dc.dynamic $_lookup$2(dc.dynamic o$1, dc.dynamic k$4, dc.dynamic not_found$2, );

dc.dynamic $_lookup$1(dc.dynamic o$2, dc.dynamic k$5, );

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic o$3, dc.dynamic k$6, );
}

// END ILookup$ext

// BEGIN ILookup$iface
abstract class ILookup$iface extends dc.Object {

dc.dynamic $_lookup$2(dc.dynamic k$1, dc.dynamic not_found$1, );

dc.dynamic $_lookup$1(dc.dynamic k$2, );

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$3, );
}

// END ILookup$iface

// BEGIN ILookup$iprot
class ILookup$iprot extends dc.Object implements lcoc_core.IProtocol {

const ILookup$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7228_$AUTO_$6=(x$3 is lcoc_core.ILookup$iface);
if(or$7228_$AUTO_$6){
return or$7228_$AUTO_$6;
}
final dc.bool or$7228_$AUTO_$7=(x$3 is dc.List);
if(or$7228_$AUTO_$7){
return or$7228_$AUTO_$7;
}
final dc.bool or$7228_$AUTO_$8=(x$3 is dc.String);
if(or$7228_$AUTO_$8){
return or$7228_$AUTO_$8;
}
final dc.bool or$7228_$AUTO_$9=(x$3 is dc.Map);
if(or$7228_$AUTO_$9){
return or$7228_$AUTO_$9;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
if((x$4 is dc.List)){
return lcoc_core.$C$List$$ILookup$D$$extension;
}
if((x$4 is dc.String)){
return lcoc_core.$C$String$$ILookup$D$$extension;
}
if((x$4 is dc.Map)){
return lcoc_core.$C$Map$$ILookup$D$$extension;
}
return lcoc_core.$C$fallback$$ILookup$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ILookup$iprot

// BEGIN IMap
var IMap=lcoc_core.IMap$iprot();

// END IMap

// BEGIN IMap$ext
abstract class IMap$ext extends dc.Object {

dc.dynamic $_dissoc$1(dc.dynamic coll$1, dc.dynamic k$2, );
}

// END IMap$ext

// BEGIN IMap$iface
abstract class IMap$iface extends dc.Object {

dc.dynamic $_dissoc$1(dc.dynamic k$1, );
}

// END IMap$iface

// BEGIN IMap$iprot
class IMap$iprot extends dc.Object implements lcoc_core.IProtocol {

const IMap$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IMap$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$IMap$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IMap$iprot

// BEGIN IMapEntry
var IMapEntry=lcoc_core.IMapEntry$iprot();

// END IMapEntry

// BEGIN IMapEntry$ext
abstract class IMapEntry$ext extends dc.Object {

dc.dynamic $_key$0(dc.dynamic coll$1, );

dc.dynamic $_val$0(dc.dynamic coll$2, );
}

// END IMapEntry$ext

// BEGIN IMapEntry$iface
abstract class IMapEntry$iface extends dc.Object {

dc.dynamic $_key$0();

dc.dynamic $_val$0();
}

// END IMapEntry$iface

// BEGIN IMapEntry$iprot
class IMapEntry$iprot extends dc.Object implements lcoc_core.IProtocol {

const IMapEntry$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IMapEntry$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.MapEntry);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.MapEntry)){
return lcoc_core.$C$MapEntry$$IMapEntry$D$$extension;
}
throw dc.Exception((("No extension of protocol IMapEntry found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IMapEntry$iprot

// BEGIN IMeta
var IMeta=lcoc_core.IMeta$iprot();

// END IMeta

// BEGIN IMeta$ext
abstract class IMeta$ext extends dc.Object {

dc.dynamic $_meta$0(dc.dynamic o$1, );
}

// END IMeta$ext

// BEGIN IMeta$iface
abstract class IMeta$iface extends dc.Object {

dc.dynamic $_meta$0();
}

// END IMeta$iface

// BEGIN IMeta$iprot
class IMeta$iprot extends dc.Object implements lcoc_core.IProtocol {

const IMeta$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IMeta$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$IMeta$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IMeta$iprot

// BEGIN INamed
var INamed=lcoc_core.INamed$iprot();

// END INamed

// BEGIN INamed$ext
abstract class INamed$ext extends dc.Object {

dc.dynamic $_name$0(dc.dynamic x$1, );

dc.dynamic $_namespace$0(dc.dynamic x$2, );
}

// END INamed$ext

// BEGIN INamed$iface
abstract class INamed$iface extends dc.Object {

dc.dynamic $_name$0();

dc.dynamic $_namespace$0();
}

// END INamed$iface

// BEGIN INamed$iprot
class INamed$iprot extends dc.Object implements lcoc_core.IProtocol {

const INamed$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7228_$AUTO_$1=(x$3 is lcoc_core.INamed$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
throw dc.Exception((("No extension of protocol INamed found for type "+(x$4.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END INamed$iprot

// BEGIN IPending
var IPending=lcoc_core.IPending$iprot();

// END IPending

// BEGIN IPending$ext
abstract class IPending$ext extends dc.Object {

dc.dynamic $_realized$QMARK_$0(dc.dynamic x$1, );
}

// END IPending$ext

// BEGIN IPending$iface
abstract class IPending$iface extends dc.Object {

dc.dynamic $_realized$QMARK_$0();
}

// END IPending$iface

// BEGIN IPending$iprot
class IPending$iprot extends dc.Object implements lcoc_core.IProtocol {

const IPending$iprot():super();

dc.dynamic satisfies(dc.dynamic x$2, ){
final dc.bool or$7228_$AUTO_$1=(x$2 is lcoc_core.IPending$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$3, ){
throw dc.Exception((("No extension of protocol IPending found for type "+(x$3.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IPending$iprot

// BEGIN IPrint
var IPrint=lcoc_core.IPrint$iprot();

// END IPrint

// BEGIN IPrint$ext
abstract class IPrint$ext extends dc.Object {

dc.dynamic $_print$1(dc.dynamic o$1, dc.dynamic string_sink$2, );
}

// END IPrint$ext

// BEGIN IPrint$iface
abstract class IPrint$iface extends dc.Object {

dc.dynamic $_print$1(dc.dynamic string_sink$1, );
}

// END IPrint$iface

// BEGIN IPrint$iprot
class IPrint$iprot extends dc.Object implements lcoc_core.IProtocol {

const IPrint$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$2=(x$1 is lcoc_core.IPrint$iface);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
final dc.bool or$7228_$AUTO_$3=(x$1 is dc.Null);
if(or$7228_$AUTO_$3){
return or$7228_$AUTO_$3;
}
final dc.bool or$7228_$AUTO_$4=(x$1 is dc.RegExp);
if(or$7228_$AUTO_$4){
return or$7228_$AUTO_$4;
}
final dc.bool or$7228_$AUTO_$5=(x$1 is dc.num);
if(or$7228_$AUTO_$5){
return or$7228_$AUTO_$5;
}
final dc.bool or$7228_$AUTO_$6=(x$1 is dc.String);
if(or$7228_$AUTO_$6){
return or$7228_$AUTO_$6;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$Null$$IPrint$D$$extension;
}
if((x$2 is dc.RegExp)){
return lcoc_core.$C$RegExp$$IPrint$D$$extension;
}
if((x$2 is dc.num)){
return lcoc_core.$C$num$$IPrint$D$$extension;
}
if((x$2 is dc.String)){
return lcoc_core.$C$String$$IPrint$D$$extension;
}
return lcoc_core.$C$fallback$$IPrint$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IPrint$iprot

// BEGIN IProtocol
abstract class IProtocol extends dc.Object {

dc.dynamic extensions(dc.dynamic x$1, );

dc.dynamic satisfies(dc.dynamic x$2, );
}

// END IProtocol

// BEGIN IRecord
var IRecord=lcoc_core.IRecord$iprot();

// END IRecord

// BEGIN IRecord$ext
abstract class IRecord$ext extends dc.Object {
}

// END IRecord$ext

// BEGIN IRecord$iface
abstract class IRecord$iface extends dc.Object {
}

// END IRecord$iface

// BEGIN IRecord$iprot
class IRecord$iprot extends dc.Object implements lcoc_core.IProtocol {

const IRecord$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IRecord$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IRecord found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IRecord$iprot

// BEGIN IReduce
var IReduce=lcoc_core.IReduce$iprot();

// END IReduce

// BEGIN IReduce$ext
abstract class IReduce$ext extends dc.Object {

dc.dynamic $_reduce$2(dc.dynamic coll$1, dc.dynamic f$3, dc.dynamic start$2, );

dc.dynamic $_reduce$1(dc.dynamic coll$2, dc.dynamic f$4, );
}

// END IReduce$ext

// BEGIN IReduce$iface
abstract class IReduce$iface extends dc.Object {

dc.dynamic $_reduce$2(dc.dynamic f$1, dc.dynamic start$1, );

dc.dynamic $_reduce$1(dc.dynamic f$2, );
}

// END IReduce$iface

// BEGIN IReduce$iprot
class IReduce$iprot extends dc.Object implements lcoc_core.IProtocol {

const IReduce$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7228_$AUTO_$5=(x$3 is lcoc_core.IReduce$iface);
if(or$7228_$AUTO_$5){
return or$7228_$AUTO_$5;
}
final dc.bool or$7228_$AUTO_$6=(x$3 is dc.String);
if(or$7228_$AUTO_$6){
return or$7228_$AUTO_$6;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
if((x$4 is dc.String)){
return lcoc_core.$C$String$$IReduce$D$$extension;
}
return lcoc_core.$C$fallback$$IReduce$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IReduce$iprot

// BEGIN IReset
var IReset=lcoc_core.IReset$iprot();

// END IReset

// BEGIN IReset$ext
abstract class IReset$ext extends dc.Object {

dc.dynamic $_reset$BANG_$1(dc.dynamic o$1, dc.dynamic new_value$2, );
}

// END IReset$ext

// BEGIN IReset$iface
abstract class IReset$iface extends dc.Object {

dc.dynamic $_reset$BANG_$1(dc.dynamic new_value$1, );
}

// END IReset$iface

// BEGIN IReset$iprot
class IReset$iprot extends dc.Object implements lcoc_core.IProtocol {

const IReset$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IReset$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IReset found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IReset$iprot

// BEGIN ISeq
var ISeq=lcoc_core.ISeq$iprot();

// END ISeq

// BEGIN ISeq$ext
abstract class ISeq$ext extends dc.Object {

dc.dynamic $_first$0(dc.dynamic coll$1, );

dc.dynamic $_rest$0(dc.dynamic coll$2, );

dc.dynamic $_next$0(dc.dynamic coll$3, );
}

// END ISeq$ext

// BEGIN ISeq$iface
abstract class ISeq$iface extends dc.Object {

dc.dynamic $_first$0();

dc.dynamic $_rest$0();

dc.dynamic $_next$0();
}

// END ISeq$iface

// BEGIN ISeq$iprot
class ISeq$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISeq$iprot():super();

dc.dynamic satisfies(dc.dynamic x$3, ){
final dc.bool or$7228_$AUTO_$3=(x$3 is lcoc_core.ISeq$iface);
if(or$7228_$AUTO_$3){
return or$7228_$AUTO_$3;
}
final dc.bool or$7228_$AUTO_$4=(x$3 is dc.Null);
if(or$7228_$AUTO_$4){
return or$7228_$AUTO_$4;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$4, ){
if((x$4 is dc.Null)){
return lcoc_core.$C$Null$$ISeq$D$$extension;
}
throw dc.Exception((("No extension of protocol ISeq found for type "+(x$4.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISeq$iprot

// BEGIN ISeqable
var ISeqable=lcoc_core.ISeqable$iprot();

// END ISeqable

// BEGIN ISeqable$ext
abstract class ISeqable$ext extends dc.Object {

dc.dynamic $_seq$0(dc.dynamic o$1, );
}

// END ISeqable$ext

// BEGIN ISeqable$iface
abstract class ISeqable$iface extends dc.Object {

dc.dynamic $_seq$0();
}

// END ISeqable$iface

// BEGIN ISeqable$iprot
class ISeqable$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISeqable$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ISeqable$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.Null);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
final dc.bool or$7228_$AUTO_$3=(x$1 is dc.Iterable);
if(or$7228_$AUTO_$3){
return or$7228_$AUTO_$3;
}
final dc.bool or$7228_$AUTO_$4=(x$1 is dc.String);
if(or$7228_$AUTO_$4){
return or$7228_$AUTO_$4;
}
final dc.bool or$7228_$AUTO_$5=(x$1 is dc.Map);
if(or$7228_$AUTO_$5){
return or$7228_$AUTO_$5;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$Null$$ISeqable$D$$extension;
}
if((x$2 is dc.Iterable)){
return lcoc_core.$C$Iterable$$ISeqable$D$$extension;
}
if((x$2 is dc.String)){
return lcoc_core.$C$String$$ISeqable$D$$extension;
}
if((x$2 is dc.Map)){
return lcoc_core.$C$Map$$ISeqable$D$$extension;
}
throw dc.Exception((("No extension of protocol ISeqable found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISeqable$iprot

// BEGIN ISequential
var ISequential=lcoc_core.ISequential$iprot();

// END ISequential

// BEGIN ISequential$ext
abstract class ISequential$ext extends dc.Object {
}

// END ISequential$ext

// BEGIN ISequential$iface
abstract class ISequential$iface extends dc.Object {
}

// END ISequential$iface

// BEGIN ISequential$iprot
class ISequential$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISequential$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ISequential$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ISequential found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISequential$iprot

// BEGIN ISet
var ISet=lcoc_core.ISet$iprot();

// END ISet

// BEGIN ISet$ext
abstract class ISet$ext extends dc.Object {

dc.dynamic $_disjoin$1(dc.dynamic coll$1, dc.dynamic v$2, );
}

// END ISet$ext

// BEGIN ISet$iface
abstract class ISet$iface extends dc.Object {

dc.dynamic $_disjoin$1(dc.dynamic v$1, );
}

// END ISet$iface

// BEGIN ISet$iprot
class ISet$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISet$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ISet$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.Null);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Null)){
return lcoc_core.$C$Null$$ISet$D$$extension;
}
throw dc.Exception((("No extension of protocol ISet found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISet$iprot

// BEGIN IStack
var IStack=lcoc_core.IStack$iprot();

// END IStack

// BEGIN IStack$ext
abstract class IStack$ext extends dc.Object {

dc.dynamic $_peek$0(dc.dynamic coll$1, );

dc.dynamic $_pop$0(dc.dynamic coll$2, );
}

// END IStack$ext

// BEGIN IStack$iface
abstract class IStack$iface extends dc.Object {

dc.dynamic $_peek$0();

dc.dynamic $_pop$0();
}

// END IStack$iface

// BEGIN IStack$iprot
class IStack$iprot extends dc.Object implements lcoc_core.IProtocol {

const IStack$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IStack$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
return lcoc_core.$C$fallback$$IStack$D$$extension;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IStack$iprot

// BEGIN ISubvecable
var ISubvecable=lcoc_core.ISubvecable$iprot();

// END ISubvecable

// BEGIN ISubvecable$ext
abstract class ISubvecable$ext extends dc.Object {

dc.dynamic $_subvec$2(dc.dynamic vector$1, dc.dynamic start$2, dc.dynamic end$2, );
}

// END ISubvecable$ext

// BEGIN ISubvecable$iface
abstract class ISubvecable$iface extends dc.Object {

dc.dynamic $_subvec$2(dc.dynamic start$1, dc.dynamic end$1, );
}

// END ISubvecable$iface

// BEGIN ISubvecable$iprot
class ISubvecable$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISubvecable$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ISubvecable$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ISubvecable found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISubvecable$iprot

// BEGIN ISwap
var ISwap=lcoc_core.ISwap$iprot();

// END ISwap

// BEGIN ISwap$ext
abstract class ISwap$ext extends dc.Object {

dc.dynamic $_swap$BANG_$4(dc.dynamic o$1, dc.dynamic f$5, dc.dynamic a$4, dc.dynamic b$3, dc.dynamic xs$2, );

dc.dynamic $_swap$BANG_$3(dc.dynamic o$2, dc.dynamic f$6, dc.dynamic a$5, dc.dynamic b$4, );

dc.dynamic $_swap$BANG_$2(dc.dynamic o$3, dc.dynamic f$7, dc.dynamic a$6, );

dc.dynamic $_swap$BANG_$1(dc.dynamic o$4, dc.dynamic f$8, );
}

// END ISwap$ext

// BEGIN ISwap$iface
abstract class ISwap$iface extends dc.Object {

dc.dynamic $_swap$BANG_$4(dc.dynamic f$1, dc.dynamic a$1, dc.dynamic b$1, dc.dynamic xs$1, );

dc.dynamic $_swap$BANG_$3(dc.dynamic f$2, dc.dynamic a$2, dc.dynamic b$2, );

dc.dynamic $_swap$BANG_$2(dc.dynamic f$3, dc.dynamic a$3, );

dc.dynamic $_swap$BANG_$1(dc.dynamic f$4, );
}

// END ISwap$iface

// BEGIN ISwap$iprot
class ISwap$iprot extends dc.Object implements lcoc_core.IProtocol {

const ISwap$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ISwap$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ISwap found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ISwap$iprot

// BEGIN ITransientAssociative
var ITransientAssociative=lcoc_core.ITransientAssociative$iprot();

// END ITransientAssociative

// BEGIN ITransientAssociative$ext
abstract class ITransientAssociative$ext extends dc.Object {

dc.dynamic $_assoc$BANG_$2(dc.dynamic tcoll$1, dc.dynamic key$2, dc.dynamic val$2, );
}

// END ITransientAssociative$ext

// BEGIN ITransientAssociative$iface
abstract class ITransientAssociative$iface extends dc.Object {

dc.dynamic $_assoc$BANG_$2(dc.dynamic key$1, dc.dynamic val$1, );
}

// END ITransientAssociative$iface

// BEGIN ITransientAssociative$iprot
class ITransientAssociative$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientAssociative$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ITransientAssociative$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientAssociative found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientAssociative$iprot

// BEGIN ITransientCollection
var ITransientCollection=lcoc_core.ITransientCollection$iprot();

// END ITransientCollection

// BEGIN ITransientCollection$ext
abstract class ITransientCollection$ext extends dc.Object {

dc.dynamic $_conj$BANG_$1(dc.dynamic tcoll$1, dc.dynamic val$2, );

dc.dynamic $_persistent$BANG_$0(dc.dynamic tcoll$2, );
}

// END ITransientCollection$ext

// BEGIN ITransientCollection$iface
abstract class ITransientCollection$iface extends dc.Object {

dc.dynamic $_conj$BANG_$1(dc.dynamic val$1, );

dc.dynamic $_persistent$BANG_$0();
}

// END ITransientCollection$iface

// BEGIN ITransientCollection$iprot
class ITransientCollection$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientCollection$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ITransientCollection$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientCollection found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientCollection$iprot

// BEGIN ITransientMap
var ITransientMap=lcoc_core.ITransientMap$iprot();

// END ITransientMap

// BEGIN ITransientMap$ext
abstract class ITransientMap$ext extends dc.Object {

dc.dynamic $_dissoc$BANG_$1(dc.dynamic tcoll$1, dc.dynamic key$2, );
}

// END ITransientMap$ext

// BEGIN ITransientMap$iface
abstract class ITransientMap$iface extends dc.Object {

dc.dynamic $_dissoc$BANG_$1(dc.dynamic key$1, );
}

// END ITransientMap$iface

// BEGIN ITransientMap$iprot
class ITransientMap$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientMap$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ITransientMap$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientMap found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientMap$iprot

// BEGIN ITransientSet
var ITransientSet=lcoc_core.ITransientSet$iprot();

// END ITransientSet

// BEGIN ITransientSet$ext
abstract class ITransientSet$ext extends dc.Object {

dc.dynamic $_disjoin$BANG_$1(dc.dynamic tcoll$1, dc.dynamic v$2, );
}

// END ITransientSet$ext

// BEGIN ITransientSet$iface
abstract class ITransientSet$iface extends dc.Object {

dc.dynamic $_disjoin$BANG_$1(dc.dynamic v$1, );
}

// END ITransientSet$iface

// BEGIN ITransientSet$iprot
class ITransientSet$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientSet$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ITransientSet$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientSet found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientSet$iprot

// BEGIN ITransientVector
var ITransientVector=lcoc_core.ITransientVector$iprot();

// END ITransientVector

// BEGIN ITransientVector$ext
abstract class ITransientVector$ext extends dc.Object {

dc.dynamic $_assoc_n$BANG_$2(dc.dynamic tcoll$1, dc.dynamic n$2, dc.dynamic val$2, );

dc.dynamic $_pop$BANG_$0(dc.dynamic tcoll$2, );
}

// END ITransientVector$ext

// BEGIN ITransientVector$iface
abstract class ITransientVector$iface extends dc.Object {

dc.dynamic $_assoc_n$BANG_$2(dc.dynamic n$1, dc.dynamic val$1, );

dc.dynamic $_pop$BANG_$0();
}

// END ITransientVector$iface

// BEGIN ITransientVector$iprot
class ITransientVector$iprot extends dc.Object implements lcoc_core.IProtocol {

const ITransientVector$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.ITransientVector$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol ITransientVector found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ITransientVector$iprot

// BEGIN IVector
var IVector=lcoc_core.IVector$iprot();

// END IVector

// BEGIN IVector$ext
abstract class IVector$ext extends dc.Object {

dc.dynamic $_assoc_n$2(dc.dynamic coll$1, dc.dynamic n$2, dc.dynamic val$2, );
}

// END IVector$ext

// BEGIN IVector$iface
abstract class IVector$iface extends dc.Object {

dc.dynamic $_assoc_n$2(dc.dynamic n$1, dc.dynamic val$1, );
}

// END IVector$iface

// BEGIN IVector$iprot
class IVector$iprot extends dc.Object implements lcoc_core.IProtocol {

const IVector$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IVector$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IVector found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IVector$iprot

// BEGIN IVolatile
var IVolatile=lcoc_core.IVolatile$iprot();

// END IVolatile

// BEGIN IVolatile$ext
abstract class IVolatile$ext extends dc.Object {

dc.dynamic $_vreset$BANG_$1(dc.dynamic o$1, dc.dynamic new_value$2, );
}

// END IVolatile$ext

// BEGIN IVolatile$iface
abstract class IVolatile$iface extends dc.Object {

dc.dynamic $_vreset$BANG_$1(dc.dynamic new_value$1, );
}

// END IVolatile$iface

// BEGIN IVolatile$iprot
class IVolatile$iprot extends dc.Object implements lcoc_core.IProtocol {

const IVolatile$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IVolatile$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IVolatile found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IVolatile$iprot

// BEGIN IWatchable
var IWatchable=lcoc_core.IWatchable$iprot();

// END IWatchable

// BEGIN IWatchable$ext
abstract class IWatchable$ext extends dc.Object {

dc.dynamic $_notify_watches$2(dc.dynamic $this_$1, dc.dynamic oldval$2, dc.dynamic newval$2, );

dc.dynamic $_add_watch$2(dc.dynamic $this_$2, dc.dynamic key$3, dc.dynamic f$2, );

dc.dynamic $_remove_watch$1(dc.dynamic $this_$3, dc.dynamic key$4, );
}

// END IWatchable$ext

// BEGIN IWatchable$iface
abstract class IWatchable$iface extends dc.Object {

dc.dynamic $_notify_watches$2(dc.dynamic oldval$1, dc.dynamic newval$1, );

dc.dynamic $_add_watch$2(dc.dynamic key$1, dc.dynamic f$1, );

dc.dynamic $_remove_watch$1(dc.dynamic key$2, );
}

// END IWatchable$iface

// BEGIN IWatchable$iprot
class IWatchable$iprot extends dc.Object implements lcoc_core.IProtocol {

const IWatchable$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IWatchable$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
throw dc.Exception((("No extension of protocol IWatchable found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IWatchable$iprot

// BEGIN IWithMeta
var IWithMeta=lcoc_core.IWithMeta$iprot();

// END IWithMeta

// BEGIN IWithMeta$ext
abstract class IWithMeta$ext extends dc.Object {

dc.dynamic $_with_meta$1(dc.dynamic o$1, dc.dynamic meta$2, );
}

// END IWithMeta$ext

// BEGIN IWithMeta$iface
abstract class IWithMeta$iface extends dc.Object {

dc.dynamic $_with_meta$1(dc.dynamic meta$1, );
}

// END IWithMeta$iface

// BEGIN IWithMeta$iprot
class IWithMeta$iprot extends dc.Object implements lcoc_core.IProtocol {

const IWithMeta$iprot():super();

dc.dynamic satisfies(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(x$1 is lcoc_core.IWithMeta$iface);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool or$7228_$AUTO_$2=(x$1 is dc.Function);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
return false;
}

dc.dynamic extensions(dc.dynamic x$2, ){
if((x$2 is dc.Function)){
return lcoc_core.$C$Function$$IWithMeta$D$$extension;
}
throw dc.Exception((("No extension of protocol IWithMeta found for type "+(x$2.runtimeType.toString()))+"."), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IWithMeta$iprot

// BEGIN IteratorSeq
class IteratorSeq<E> extends dc.Object with d_collection.ListMixin<E>, lcoc_core.EquivSequentialHashMixin, lcoc_core.SeqListMixin<E> implements lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta;
final value;
final dc.Iterator iter;
dc.dynamic $UNDERSCORE_rest;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

IteratorSeq(this.meta, this.value, this.iter, this.$UNDERSCORE_rest, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.IteratorSeq<R> cast<R>(){
return lcoc_core.IteratorSeq<R>((meta as dc.dynamic), (value as dc.dynamic), iter, $UNDERSCORE_rest, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic $_first$0(){
return value;
}

dc.dynamic $_rest$0(){
final dc.dynamic or$7228_$AUTO_$1=$UNDERSCORE_rest;
if((or$7228_$AUTO_$1!=null)){
return or$7228_$AUTO_$1;
}
final dc.dynamic or$7228_$AUTO_$2=lcoc_core.iterator_seq(iter, );
if((or$7228_$AUTO_$2!=null)){
$UNDERSCORE_rest=or$7228_$AUTO_$2;
}else{
$UNDERSCORE_rest=lcoc_core.$_EMPTY_LIST;
}
return $UNDERSCORE_rest;
}

dc.dynamic $_next$0(){
final lcoc_core.IteratorSeq<E> coll7324$1=this;
final dc.dynamic o7310$1=(coll7324$1.$_rest$0());
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.IteratorSeq((new_meta$1 as dc.dynamic), (value as dc.dynamic), iter, $UNDERSCORE_rest, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END IteratorSeq

// BEGIN Keyword
class Keyword extends dc.Object with lcoc_core.ToStringMixin, lcoc_core.EqualsEquivMixin implements lcoc_core.IPrint$iface, lcoc_core.IEquiv$iface, lcoc_core.IFn$iface, lcoc_core.IHash$iface, lcoc_core.INamed$iface, dc.Comparable<lcoc_core.Keyword> {
final dc.String? ns;
final dc.String name;
final dc.int $UNDERSCORE_hash;

const Keyword(this.ns, this.name, this.$UNDERSCORE_hash, ):super();

dc.dynamic $_print$1(dc.dynamic sink$1, ){
final dc.StringSink sink$2=(sink$1 as dc.StringSink);
sink$2.write(":", );
if((ns!=null)){
sink$2.write(ns, );
sink$2.write("/", );
}else{
}
return (sink$2.write(name, ));
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
final dc.bool or$7228_$AUTO_$1=dc.identical(this, (other$1 as dc.Object?), );
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
final dc.bool and$7187_$AUTO_$1=(other$1 is lcoc_core.Keyword);
if(and$7187_$AUTO_$1){
final lcoc_core.Keyword other$2=(other$1 as lcoc_core.Keyword);
final dc.bool and$7187_$AUTO_$2=(ns==other$2.ns);
if(and$7187_$AUTO_$2){
return (name==other$2.name);
}
return and$7187_$AUTO_$2;
}
return and$7187_$AUTO_$1;
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.$get_.$_invoke$2(coll$1, this, ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$2, dc.dynamic not_found$1, ){
return (lcoc_core.$get_.$_invoke$3(coll$2, this, not_found$1, ));
}

dc.dynamic $_hash$0(){
return $UNDERSCORE_hash;
}

dc.dynamic $_name$0(){
return name;
}

dc.dynamic $_namespace$0(){
return ns;
}

dc.int compareTo(lcoc_core.Keyword y$1, ){
final dc.String? nsy$1=y$1.ns;
if((lcoc_core.$EQ_.$_invoke$2(this, y$1, ))){
return 0;
}
final dc.bool and$7187_$AUTO_$3=(null==ns);
late final dc.Object? $if_$1;
if(and$7187_$AUTO_$3){
$if_$1=nsy$1;
}else{
$if_$1=and$7187_$AUTO_$3;
}
if((($if_$1!=false)&&($if_$1!=null))){
return -1;
}
if((ns!=null)){
if((null==nsy$1)){
return 1;
}
final dc.int nsc$1=((ns as dc.String).compareTo((nsy$1 as dc.String), ));
if((0==nsc$1)){
return (name.compareTo(y$1.name, ));
}
return nsc$1;
}
return (name.compareTo(y$1.name, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Keyword

// BEGIN LazySeq
class LazySeq<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IPending$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface {
final meta;
dc.dynamic fn;
var s;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

LazySeq(this.meta, this.fn, this.s, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.LazySeq<R> cast<R>(){
return lcoc_core.LazySeq<R>((meta as dc.dynamic), fn, (s as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic sval(){
if((null==(fn as dc.dynamic))){
return s;
}
if((fn is dc.Function)){
s=(fn as dc.Function)();
}else if((fn is lcoc_core.IFn$iface)){
s=((fn as lcoc_core.IFn$iface).$_invoke$0());
}else{
s=(lcoc_core.IFn.extensions(fn, ).$_invoke$0(fn, ));
}
fn=null;
return s;
}

dc.dynamic $_realized$QMARK_$0(){
if((fn!=null)){
return false;
}
return true;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.LazySeq((new_meta$1 as dc.dynamic), ((){
final lcoc_core.LazySeq<E> o7310$1=this;
return (o7310$1.$_seq$0());
} as dc.dynamic), null, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_seq$0(){
this.sval();
if((null==(s as dc.dynamic))){
return null;
}
dc.dynamic ls$1=s;
do {
if((ls$1 is lcoc_core.LazySeq)){
ls$1=((ls$1 as lcoc_core.LazySeq).sval());
continue;
}
s=ls$1;
final dc.dynamic o7310$2=s;
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
} while(true);
}

dc.dynamic $_first$0(){
final lcoc_core.LazySeq<E> o7310$3=this;
o7310$3.$_seq$0();
if((null==(s as dc.dynamic))){
return null;
}
return lcoc_core.first(s, );
}

dc.dynamic $_rest$0(){
final lcoc_core.LazySeq<E> o7310$4=this;
o7310$4.$_seq$0();
if((null==(s as dc.dynamic))){
return lcoc_core.$_EMPTY_LIST;
}
return lcoc_core.rest(s, );
}

dc.dynamic $_next$0(){
final lcoc_core.LazySeq<E> o7310$5=this;
o7310$5.$_seq$0();
if((null==(s as dc.dynamic))){
return null;
}
return lcoc_core.next(s, );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END LazySeq

// BEGIN PVChunkedSeq
class PVChunkedSeq<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeqable$iface, lcoc_core.ISeq$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IChunkedSeq$iface, lcoc_core.IReduce$iface {
final lcoc_core.PersistentVector vec;
final dc.List arr;
final dc.int i;
final dc.int off;
final meta;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PVChunkedSeq(this.vec, this.arr, this.i, this.off, this.meta, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.PVChunkedSeq<R> cast<R>(){
return lcoc_core.PVChunkedSeq<R>(vec, arr, i, off, (meta as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.PVChunkedSeq(vec, arr, i, off, (new_meta$1 as dc.dynamic), -1, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic $_first$0(){
return (arr[off]);
}

dc.dynamic $_rest$0(){
if(((1+off)<arr.length)){
return lcoc_core.PVChunkedSeq(vec, arr, i, (1+off), null, -1, );
}
final lcoc_core.PVChunkedSeq<E> coll7416$1=this;
return (coll7416$1.$_chunked_rest$0());
}

dc.dynamic $_next$0(){
if(((1+off)<arr.length)){
return lcoc_core.PVChunkedSeq(vec, arr, i, (1+off), null, -1, );
}
final lcoc_core.PVChunkedSeq<E> coll7421$1=this;
return (coll7421$1.$_chunked_next$0());
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_chunked_first$0(){
return lcoc_core.ArrayChunk(arr, off, arr.length, );
}

dc.dynamic $_chunked_rest$0(){
final lcoc_core.PVChunkedSeq<E> coll7421$2=this;
final dc.dynamic or$7228_$AUTO_$1=((coll7421$2.$_chunked_next$0()) as dc.dynamic);
if((or$7228_$AUTO_$1!=null)){
return or$7228_$AUTO_$1;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_chunked_next$0(){
final dc.int end$1=(i+arr.length);
final lcoc_core.PersistentVector coll7390$1=vec;
final dc.num cast$1=((coll7390$1.$_count$0()) as dc.num);
final dc.bool $1=(end$1<cast$1);
if($1){
late final dc.List $if_$1;
if((end$1<(end$1&(~31)))){
$if_$1=lcoc_core.unchecked_array_for(vec.root, vec.shift, end$1, );
}else{
$if_$1=vec.tail;
}
return lcoc_core.PVChunkedSeq(vec, $if_$1, end$1, 0, null, -1, );
}
return null;
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
return (lcoc_core.pv_reduce.$_invoke$3(vec, f$1, (i+off), ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic start$1, ){
return (lcoc_core.pv_reduce.$_invoke$4(vec, f$2, (i+off), start$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PVChunkedSeq

// BEGIN PVIterator
class PVIterator<E> extends dc.Object implements dc.Iterator<E> {
final lcoc_core.PersistentVector v;
dc.int i;
final dc.int to;
dc.List curr;

PVIterator(this.v, this.i, this.to, this.curr, ):super();

E get current{
return (curr[((i-1)&31)]);
}

dc.bool moveNext(){
final dc.bool and$7187_$AUTO_$1=(i<to);
if(and$7187_$AUTO_$1){
if((0==(i&31))){
if((((v.cnt-1)&(~31))<=i)){
curr=v.tail;
}else{
curr=lcoc_core.unchecked_array_for(v.root, v.shift, i, );
}
}else{
}
i=(1+i);
return true;
}
return and$7187_$AUTO_$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PVIterator

// BEGIN PersistentHashMap
class PersistentHashMap<K, V> extends dc.Object with lcoc_core.EqualsEquivMixin, d_collection.MapMixin<K, V>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IAssociative$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.IFind$iface, lcoc_core.IMap$iface, lcoc_core.IKVReduce$iface, lcoc_core.IFn$iface, lcoc_core.IEditableCollection$iface {
final meta;
final lcoc_core.BitmapNode root;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentHashMap(this.meta, this.root, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterable<dc.MapEntry<K, V>> get entries{
return lcoc_core.Reify$5(null, root, );
}

V? operator [](dc.Object? k$1, ){
final lcoc_core.PersistentHashMap<K, V> o7486$1=this;
final dc.Object? k7487$1=k$1;
final dc.Null not_found7488$1=null;
return (o7486$1.$_lookup$2(k7487$1, not_found7488$1, ));
}

void operator []=(K key$1, V val$1, ){
throw dc.UnsupportedError("[]= not supported on PersistentHashMap", );
}

V? remove(dc.Object? val$2, ){
throw dc.UnsupportedError("remove not supported on PersistentHashMap", );
}

void clear(){
throw dc.UnsupportedError("clear not supported on PersistentHashMap", );
}

dc.Iterable<K> get keys{
return lcoc_core.Reify$6(null, root, );
}

dc.Iterable<V> get values{
return lcoc_core.Reify$7(null, root, );
}

lcoc_core.PersistentHashMap<RK, RV> cast<RK, RV>(){
return lcoc_core.PersistentHashMap<RK, RV>((meta as dc.dynamic), root, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_map(this, sink$1, );
}

dc.dynamic $_assoc$2(dc.dynamic k$3, dc.dynamic v$2, ){
final dc.dynamic o7533$1=k$3;
late final dc.int cast$1;
if((o7533$1 is lcoc_core.IHash$iface)){
cast$1=(((o7533$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), )) as dc.int);
}
final lcoc_core.BitmapNode new_root$1=((root.inode_assoc(0, cast$1, (k$3 as dc.dynamic), (v$2 as dc.dynamic), )) as lcoc_core.BitmapNode);
if(dc.identical(new_root$1, root, )){
return this;
}
return lcoc_core.PersistentHashMap((meta as dc.dynamic), new_root$1, -1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.PersistentHashMap((new_meta$1 as dc.dynamic), root, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_conj$1(dc.dynamic entry$1, ){
final dc.bool and$7187_$AUTO_$1=((lcoc_core.IVector.satisfies((entry$1 as dc.dynamic), )) as dc.bool);
late final dc.bool $if_$2;
if(and$7187_$AUTO_$1){
final dc.dynamic coll7390$1=entry$1;
late final dc.dynamic $if_$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
$if_$1=((coll7390$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$1=((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), ));
}
$if_$2=($if_$1==2);
}else{
$if_$2=and$7187_$AUTO_$1;
}
if($if_$2){
final lcoc_core.PersistentHashMap<K, V> coll7440$1=this;
final dc.dynamic coll7481$1=entry$1;
final dc.int n7482$1=0;
late final dc.dynamic k7441$1;
if((coll7481$1 is lcoc_core.IIndexed$iface)){
k7441$1=((coll7481$1 as lcoc_core.IIndexed$iface).$_nth$1(n7482$1, ));
}else{
k7441$1=((lcoc_core.IIndexed.extensions((coll7481$1 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$1 as dc.dynamic), n7482$1, ));
}
final dc.dynamic coll7481$2=entry$1;
final dc.int n7482$2=1;
late final dc.dynamic v7442$1;
if((coll7481$2 is lcoc_core.IIndexed$iface)){
v7442$1=((coll7481$2 as lcoc_core.IIndexed$iface).$_nth$1(n7482$2, ));
}else{
v7442$1=((lcoc_core.IIndexed.extensions((coll7481$2 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$2 as dc.dynamic), n7482$2, ));
}
return (coll7440$1.$_assoc$2(k7441$1, v7442$1, ));
}
dc.dynamic ret$1=this;
final dc.dynamic o7310$1=entry$1;
dc.dynamic s$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
if((null==(s$1 as dc.dynamic))){
return ret$1;
}
final dc.dynamic e$1=lcoc_core.first(s$1, );
if(((lcoc_core.IVector.satisfies((e$1 as dc.dynamic), )) as dc.bool)){
final dc.dynamic coll7440$2=ret$1;
final dc.dynamic coll7481$3=e$1;
final dc.int n7482$3=0;
late final dc.dynamic k7441$2;
if((coll7481$3 is lcoc_core.IIndexed$iface)){
k7441$2=((coll7481$3 as lcoc_core.IIndexed$iface).$_nth$1(n7482$3, ));
}else{
k7441$2=((lcoc_core.IIndexed.extensions((coll7481$3 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$3 as dc.dynamic), n7482$3, ));
}
final dc.dynamic coll7481$4=e$1;
final dc.int n7482$4=1;
late final dc.dynamic v7442$2;
if((coll7481$4 is lcoc_core.IIndexed$iface)){
v7442$2=((coll7481$4 as lcoc_core.IIndexed$iface).$_nth$1(n7482$4, ));
}else{
v7442$2=((lcoc_core.IIndexed.extensions((coll7481$4 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$4 as dc.dynamic), n7482$4, ));
}
if((coll7440$2 is lcoc_core.IAssociative$iface)){
ret$1=((coll7440$2 as lcoc_core.IAssociative$iface).$_assoc$2(k7441$2, v7442$2, ));
}else{
ret$1=((lcoc_core.IAssociative.extensions((coll7440$2 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$2 as dc.dynamic), k7441$2, v7442$2, ));
}
final dc.dynamic coll7329$1=s$1;
if((coll7329$1 is lcoc_core.ISeq$iface)){
s$1=((coll7329$1 as lcoc_core.ISeq$iface).$_next$0());
}else{
s$1=((lcoc_core.ISeq.extensions((coll7329$1 as dc.dynamic), ) as lcoc_core.ISeq$ext).$_next$0((coll7329$1 as dc.dynamic), ));
}
continue;
}
throw dc.ArgumentError("conj on a map takes map entries or seqables of map entries", );
} while(true);
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentHashMap o7517$1=lcoc_core.$_EMPTY_MAP;
final dc.dynamic meta7518$1=meta;
return (o7517$1.$_with_meta$1((meta7518$1 as dc.dynamic), ));
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
return lcoc_core.$_equiv_map(this, other$1, );
}

dc.dynamic $_hash$0(){
final dc.int h$7900_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$7900_$AUTO_$1<0)){
final dc.int h$7900_$AUTO_$2=lcoc_core.hash_unordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$7900_$AUTO_$2;
return h$7900_$AUTO_$2;
}
return h$7900_$AUTO_$1;
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(this.entries.iterator, );
}

dc.dynamic $_count$0(){
return root.cnt;
}

dc.dynamic $_lookup$1(dc.dynamic k$4, ){
final lcoc_core.PersistentHashMap<K, V> o7486$2=this;
final dc.dynamic k7487$2=k$4;
final dc.Null not_found7488$2=null;
return (o7486$2.$_lookup$2((k7487$2 as dc.dynamic), not_found7488$2, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$5, dc.dynamic not_found$1, ){
return (root.inode_lookup((k$5 as dc.dynamic), (not_found$1 as dc.dynamic), ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$6, ){
final lcoc_core.PersistentHashMap<K, V> o7486$3=this;
final dc.dynamic k7487$3=k$6;
final lcoc_core.PersistentHashMap<K, V> not_found7488$3=this;
final dc.dynamic $1=(o7486$3.$_lookup$2((k7487$3 as dc.dynamic), not_found7488$3, ));
final dc.bool $2=dc.identical($1, this, );
if($2){
return false;
}
return true;
}

dc.dynamic $_find$1(dc.dynamic k$7, ){
final lcoc_core.PersistentHashMap<K, V> o7486$4=this;
final dc.dynamic k7487$4=k$7;
final dc.Null not_found7488$4=null;
final dc.dynamic temp$7205_$AUTO_$1=(o7486$4.$_lookup$2((k7487$4 as dc.dynamic), not_found7488$4, ));
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.dynamic v$3=temp$7205_$AUTO_$1;
return lcoc_core.PersistentMapEntry<K, V>((k$7 as dc.dynamic), v$3, -1, );
}

dc.dynamic $_dissoc$1(dc.dynamic k$8, ){
final dc.dynamic o7533$2=k$8;
late final dc.int cast$2;
if((o7533$2 is lcoc_core.IHash$iface)){
cast$2=(((o7533$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions((o7533$2 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$2 as dc.dynamic), )) as dc.int);
}
final dc.dynamic new_root$2=(root.inode_without(0, cast$2, (k$8 as dc.dynamic), ));
if(dc.identical(new_root$2, root, )){
return this;
}
return lcoc_core.PersistentHashMap((meta as dc.dynamic), (new_root$2 as lcoc_core.BitmapNode), -1, );
}

dc.dynamic $_kv_reduce$2(dc.dynamic f$1, dc.dynamic init$1, ){
if((0==this.root.cnt)){
return init$1;
}
final lcoc_core.PersistentHashMap<K, V> o7310$2=this;
dc.dynamic s$2=(o7310$2.$_seq$0());
dc.dynamic acc$1=init$1;
do {
if((null==(s$2 as dc.dynamic))){
return acc$1;
}
final dc.dynamic coll7319$1=s$2;
late final lcoc_core.PersistentMapEntry me$1;
if((coll7319$1 is lcoc_core.ISeq$iface)){
me$1=(((coll7319$1 as lcoc_core.ISeq$iface).$_first$0()) as lcoc_core.PersistentMapEntry);
}else{
me$1=(((lcoc_core.ISeq.extensions((coll7319$1 as dc.dynamic), ) as lcoc_core.ISeq$ext).$_first$0((coll7319$1 as dc.dynamic), )) as lcoc_core.PersistentMapEntry);
}
final lcoc_core.PersistentMapEntry coll7553$1=me$1;
final dc.dynamic $4=(coll7553$1.$_key$0());
final lcoc_core.PersistentMapEntry coll7558$1=me$1;
final dc.dynamic $3=(coll7558$1.$_val$0());
late final dc.dynamic acc$2;
if((f$1 is dc.Function)){
acc$2=(f$1 as dc.Function)(acc$1, $4, $3, );
}else if((f$1 is lcoc_core.IFn$iface)){
acc$2=((f$1 as lcoc_core.IFn$iface).$_invoke$3(acc$1, $4, $3, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$3(f$1, acc$1, $4, $3, ));
}
if(lcoc_core.reduced$QMARK_(acc$2, )){
final dc.dynamic o7365$1=acc$2;
if((o7365$1 is lcoc_core.IDeref$iface)){
return ((o7365$1 as lcoc_core.IDeref$iface).$_deref$0());
}
return ((lcoc_core.IDeref.extensions(o7365$1, ) as lcoc_core.IDeref$ext).$_deref$0(o7365$1, ));
}
final dc.dynamic coll7329$2=s$2;
if((coll7329$2 is lcoc_core.ISeq$iface)){
s$2=((coll7329$2 as lcoc_core.ISeq$iface).$_next$0());
}else{
s$2=((lcoc_core.ISeq.extensions((coll7329$2 as dc.dynamic), ) as lcoc_core.ISeq$ext).$_next$0((coll7329$2 as dc.dynamic), ));
}
acc$1=acc$2;
continue;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic k$9, ){
final lcoc_core.PersistentHashMap<K, V> o7490$1=this;
final dc.dynamic k7491$1=k$9;
return (o7490$1.$_lookup$1((k7491$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic k$10, dc.dynamic not_found$2, ){
final lcoc_core.PersistentHashMap<K, V> o7486$5=this;
final dc.dynamic k7487$5=k$10;
final dc.dynamic not_found7488$5=not_found$2;
return (o7486$5.$_lookup$2((k7487$5 as dc.dynamic), (not_found7488$5 as dc.dynamic), ));
}

dc.dynamic $_as_transient$0(){
final dc.int bitmap_hi$1=root.bitmap_hi;
final dc.int bitmap_lo$1=root.bitmap_lo;
final dc.int net_size$1=lcoc_core.u32x2_bit_count(bitmap_hi$1, bitmap_lo$1, );
final dc.int gross_size$1=(-8&(7+net_size$1));
return lcoc_core.TransientHashMap(true, lcoc_core.BitmapNode(root.cnt, (bitmap_hi$1&bitmap_lo$1), (bitmap_hi$1|bitmap_lo$1), lcoc_core.aresize(root.arr, net_size$1, gross_size$1, null, ), ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentHashMap

// BEGIN PersistentHashSet
class PersistentHashSet<E> extends dc.Object with lcoc_core.EqualsEquivMixin, d_collection.SetMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.ISet$iface, lcoc_core.IFn$iface, lcoc_core.IEditableCollection$iface {
final meta;
final lcoc_core.PersistentHashMap<E, E> hm;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentHashSet(this.meta, this.hm, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.bool contains(dc.Object? e$1, ){
final lcoc_core.PersistentHashMap<E, E> o7495$1=hm;
final dc.Object? k7496$1=e$1;
return (o7495$1.$_contains_key$QMARK_$1(k7496$1, ));
}

E? lookup(dc.Object? e$2, ){
final lcoc_core.PersistentHashMap<E, E> o7486$1=hm;
final dc.Object? k7487$1=e$2;
final dc.Null not_found7488$1=null;
return (o7486$1.$_lookup$2(k7487$1, not_found7488$1, ));
}

dc.bool add(E e$3, ){
throw dc.UnsupportedError("add not supported on PersistentHashSet", );
}

dc.bool remove(dc.Object? e$4, ){
throw dc.UnsupportedError("remove not supported on PersistentHashSet", );
}

void clear(){
throw dc.UnsupportedError("clear not supported on PersistentHashSet", );
}

dc.int get length{
final lcoc_core.PersistentHashMap<E, E> coll7390$1=hm;
return (coll7390$1.$_count$0());
}

dc.Iterator<E> get iterator{
return hm.keys.iterator;
}

dc.Set<E> toSet(){
return (dc.Set<E>.of(hm.keys, ));
}

lcoc_core.PersistentHashSet<R> cast<R>(){
return lcoc_core.PersistentHashSet<R>((meta as dc.dynamic), (hm.cast<R, R>()), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("#{", "}", this, sink$1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.PersistentHashSet((new_meta$1 as dc.dynamic), (hm as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final dc.dynamic arg$1=(meta as dc.dynamic);
final lcoc_core.PersistentHashMap<E, E> coll7440$1=hm;
final dc.dynamic k7441$1=o$1;
final dc.dynamic v7442$1=o$1;
final lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic> cast$1=((coll7440$1.$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), )) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>);
return lcoc_core.PersistentHashSet(arg$1, cast$1, -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentHashSet o7517$1=lcoc_core.$_EMPTY_SET;
final dc.dynamic meta7518$1=meta;
return (o7517$1.$_with_meta$1((meta7518$1 as dc.dynamic), ));
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.set$QMARK_(other$1, );
if(and$7187_$AUTO_$1){
final lcoc_core.PersistentHashMap<E, E> coll7390$2=hm;
final dc.dynamic $1=(coll7390$2.$_count$0());
final dc.dynamic coll7390$3=other$1;
late final dc.dynamic $if_$1;
if((coll7390$3 is lcoc_core.ICounted$iface)){
$if_$1=((coll7390$3 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$1=((lcoc_core.ICounted.extensions((coll7390$3 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$3 as dc.dynamic), ));
}
final dc.bool and$7187_$AUTO_$2=($1==$if_$1);
if(and$7187_$AUTO_$2){
final dc.dynamic coll7370$1=other$1;
dc.dynamic f7371$1(dc.dynamic $UNDERSCORE_$1, dc.dynamic k$1, ){
final lcoc_core.PersistentHashMap<E, E> o7495$2=hm;
final dc.dynamic k7496$2=k$1;
final dc.dynamic or$7228_$AUTO_$1=(o7495$2.$_contains_key$QMARK_$1((k7496$2 as dc.dynamic), ));
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
return or$7228_$AUTO_$1;
}
return lcoc_core.reduced(false, );
}
final dc.bool start7372$1=true;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}
return and$7187_$AUTO_$2;
}
return and$7187_$AUTO_$1;
}

dc.dynamic $_hash$0(){
final dc.int h$7900_$AUTO_$1=$UNDERSCORE_$UNDERSCORE_hash;
if((h$7900_$AUTO_$1<0)){
final dc.int h$7900_$AUTO_$2=lcoc_core.hash_unordered_coll(this, );
$UNDERSCORE_$UNDERSCORE_hash=h$7900_$AUTO_$2;
return h$7900_$AUTO_$2;
}
return h$7900_$AUTO_$1;
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(hm.keys.iterator, );
}

dc.dynamic $_count$0(){
final lcoc_core.PersistentHashMap<E, E> coll7390$4=hm;
return (coll7390$4.$_count$0());
}

dc.dynamic $_lookup$1(dc.dynamic v$1, ){
final lcoc_core.PersistentHashMap<E, E> o7486$2=hm;
final dc.dynamic k7487$2=v$1;
final dc.Null not_found7488$2=null;
return (o7486$2.$_lookup$2((k7487$2 as dc.dynamic), not_found7488$2, ));
}

dc.dynamic $_lookup$2(dc.dynamic v$2, dc.dynamic not_found$1, ){
final lcoc_core.PersistentHashMap<E, E> o7486$3=hm;
final dc.dynamic k7487$3=v$2;
final dc.dynamic not_found7488$3=not_found$1;
return (o7486$3.$_lookup$2((k7487$3 as dc.dynamic), (not_found7488$3 as dc.dynamic), ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$2, ){
final lcoc_core.PersistentHashMap<E, E> o7495$3=hm;
final dc.dynamic k7496$3=k$2;
return (o7495$3.$_contains_key$QMARK_$1((k7496$3 as dc.dynamic), ));
}

dc.dynamic $_disjoin$1(dc.dynamic v$3, ){
final dc.dynamic arg$2=(meta as dc.dynamic);
final lcoc_core.PersistentHashMap<E, E> coll7511$1=hm;
final dc.dynamic k7512$1=v$3;
final lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic> cast$2=((coll7511$1.$_dissoc$1((k7512$1 as dc.dynamic), )) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>);
return lcoc_core.PersistentHashSet(arg$2, cast$2, -1, );
}

dc.dynamic $_invoke$1(dc.dynamic k$3, ){
final lcoc_core.PersistentHashSet<E> o7490$1=this;
final dc.dynamic k7491$1=k$3;
return (o7490$1.$_lookup$1((k7491$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic k$4, dc.dynamic not_found$2, ){
final lcoc_core.PersistentHashSet<E> o7486$4=this;
final dc.dynamic k7487$4=k$4;
final dc.dynamic not_found7488$4=not_found$2;
return (o7486$4.$_lookup$2((k7487$4 as dc.dynamic), (not_found7488$4 as dc.dynamic), ));
}

dc.dynamic $_as_transient$0(){
final lcoc_core.PersistentHashMap<E, E> coll7563$1=hm;
final lcoc_core.TransientHashMap cast$3=((coll7563$1.$_as_transient$0()) as lcoc_core.TransientHashMap);
return lcoc_core.TransientHashSet(cast$3, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentHashSet

// BEGIN PersistentList
class PersistentList<E> extends dc.Object with d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E>, lcoc_core.EquivSequentialHashMixin implements lcoc_core.IList$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.ISeq$iface, lcoc_core.IStack$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface {
final meta;
final $UNDERSCORE_first;
final rest;
final dc.int count;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentList(this.meta, this.$UNDERSCORE_first, this.rest, this.count, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.int get length{
return count;
}

lcoc_core.PersistentList<R> cast<R>(){
return lcoc_core.PersistentList<R>((meta as dc.dynamic), ($UNDERSCORE_first as dc.dynamic), (rest as dc.dynamic), count, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.PersistentList((new_meta$1 as dc.dynamic), ($UNDERSCORE_first as dc.dynamic), (rest as dc.dynamic), count, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_first$0(){
return $UNDERSCORE_first;
}

dc.dynamic $_rest$0(){
if((count<=1)){
return lcoc_core.$_EMPTY_LIST;
}
return rest;
}

dc.dynamic $_next$0(){
if((count<=1)){
return null;
}
return rest;
}

dc.dynamic $_peek$0(){
return $UNDERSCORE_first;
}

dc.dynamic $_pop$0(){
if((0<count)){
return rest;
}
throw dc.ArgumentError("Can't pop empty list", );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.PersistentList((meta as dc.dynamic), (o$1 as dc.dynamic), this, (1+count), -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentList o7517$1=lcoc_core.$_EMPTY_LIST;
final dc.dynamic meta7518$1=meta;
return (o7517$1.$_with_meta$1((meta7518$1 as dc.dynamic), ));
}

dc.dynamic $_seq$0(){
if((0<count)){
return this;
}
return null;
}

dc.dynamic $_count$0(){
return count;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentList

// BEGIN PersistentMapEntry
class PersistentMapEntry<K, V> extends dc.Object with lcoc_core.EquivSequentialHashMixin, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, dc.MapEntry<K, V>, lcoc_core.IMapEntry$iface, lcoc_core.IMeta$iface, lcoc_core.IStack$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ILookup$iface, lcoc_core.IAssociative$iface, lcoc_core.IVector$iface, lcoc_core.IReduce$iface, lcoc_core.IFn$iface, dc.Comparable, lcoc_core.ISubvecable$iface {
final $UNDERSCORE_k;
final $UNDERSCORE_v;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentMapEntry(this.$UNDERSCORE_k, this.$UNDERSCORE_v, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("[", "]", this, sink$1, );
}

K get key{
return $UNDERSCORE_k;
}

V get value{
return $UNDERSCORE_v;
}

dc.dynamic $_key$0(){
return $UNDERSCORE_k;
}

dc.dynamic $_val$0(){
return $UNDERSCORE_v;
}

dc.dynamic $_meta$0(){
return null;
}

dc.dynamic $_peek$0(){
return $UNDERSCORE_v;
}

dc.dynamic $_pop$0(){
final lcoc_core.VectorNode arg$1=lcoc_core.$_EMPTY_VECTOR.root;
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(1, $UNDERSCORE_k, ));
return lcoc_core.PersistentVector(null, 1, 5, arg$1, fl$1, -1, );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final lcoc_core.VectorNode arg$2=lcoc_core.$_EMPTY_VECTOR.root;
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(3, $UNDERSCORE_k, ));
fl$2[1]=$UNDERSCORE_v;
fl$2[2]=o$1;
return lcoc_core.PersistentVector(null, 3, 5, arg$2, fl$2, -1, );
}

dc.dynamic $_empty$0(){
return null;
}

dc.dynamic $_seq$0(){
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, $UNDERSCORE_k, ));
fl$3[1]=$UNDERSCORE_v;
final dc.List<dc.dynamic> o7310$1=fl$3;
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}

dc.dynamic $_count$0(){
return 2;
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
if((n$1==0)){
return $UNDERSCORE_k;
}
if((n$1==1)){
return $UNDERSCORE_v;
}
throw dc.ArgumentError("Index out of bounds", );
}

dc.dynamic $_nth$2(dc.dynamic n$2, dc.dynamic not_found$1, ){
if((n$2==0)){
return $UNDERSCORE_k;
}
if((n$2==1)){
return $UNDERSCORE_v;
}
return not_found$1;
}

dc.dynamic $_lookup$1(dc.dynamic k$1, ){
final lcoc_core.PersistentMapEntry<K, V> coll7477$1=this;
final dc.dynamic n7478$1=k$1;
final dc.Null not_found7479$1=null;
return (coll7477$1.$_nth$2((n7478$1 as dc.dynamic), not_found7479$1, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$2, dc.dynamic not_found$2, ){
final lcoc_core.PersistentMapEntry<K, V> coll7477$2=this;
final dc.dynamic n7478$2=k$2;
final dc.dynamic not_found7479$2=not_found$2;
return (coll7477$2.$_nth$2((n7478$2 as dc.dynamic), (not_found7479$2 as dc.dynamic), ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$3, ){
final dc.bool or$7228_$AUTO_$1=(k$3==0);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return (k$3==1);
}

dc.dynamic $_assoc$2(dc.dynamic k$4, dc.dynamic v$1, ){
final lcoc_core.VectorNode arg$3=lcoc_core.$_EMPTY_VECTOR.root;
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(2, $UNDERSCORE_k, ));
fl$4[1]=$UNDERSCORE_v;
final lcoc_core.PersistentVector coll7440$1=lcoc_core.PersistentVector(null, 2, 5, arg$3, fl$4, -1, );
final dc.dynamic k7441$1=k$4;
final dc.dynamic v7442$1=v$1;
return (coll7440$1.$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}

dc.dynamic $_assoc_n$2(dc.dynamic n$3, dc.dynamic v$2, ){
final lcoc_core.VectorNode arg$4=lcoc_core.$_EMPTY_VECTOR.root;
final dc.List<dc.dynamic> fl$5=(dc.List<dc.dynamic>.filled(2, $UNDERSCORE_k, ));
fl$5[1]=$UNDERSCORE_v;
final lcoc_core.PersistentVector coll7426$1=lcoc_core.PersistentVector(null, 2, 5, arg$4, fl$5, -1, );
final dc.dynamic n7427$1=n$3;
final dc.dynamic val7428$1=v$2;
return (coll7426$1.$_assoc_n$2((n7427$1 as dc.dynamic), (val7428$1 as dc.dynamic), ));
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)($UNDERSCORE_k, $UNDERSCORE_v, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2($UNDERSCORE_k, $UNDERSCORE_v, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, $UNDERSCORE_k, $UNDERSCORE_v, ));
}
return lcoc_core.unreduced($if_$1, );
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic start$1, ){
late final dc.dynamic r$1;
if((f$2 is dc.Function)){
r$1=(f$2 as dc.Function)(start$1, $UNDERSCORE_k, );
}else if((f$2 is lcoc_core.IFn$iface)){
r$1=((f$2 as lcoc_core.IFn$iface).$_invoke$2(start$1, $UNDERSCORE_k, ));
}else{
r$1=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, start$1, $UNDERSCORE_k, ));
}
if(lcoc_core.reduced$QMARK_(r$1, )){
return lcoc_core.deref(r$1, );
}
late final dc.dynamic $if_$2;
if((f$2 is dc.Function)){
$if_$2=(f$2 as dc.Function)(r$1, $UNDERSCORE_v, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$2=((f$2 as lcoc_core.IFn$iface).$_invoke$2(r$1, $UNDERSCORE_v, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, r$1, $UNDERSCORE_v, ));
}
return lcoc_core.unreduced($if_$2, );
}

dc.dynamic $_invoke$1(dc.dynamic k$5, ){
final lcoc_core.PersistentMapEntry<K, V> coll7481$1=this;
final dc.dynamic n7482$1=k$5;
return (coll7481$1.$_nth$1((n7482$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic k$6, dc.dynamic not_found$3, ){
final lcoc_core.PersistentMapEntry<K, V> coll7477$3=this;
final dc.dynamic n7478$3=k$6;
final dc.dynamic not_found7479$3=not_found$3;
return (coll7477$3.$_nth$2((n7478$3 as dc.dynamic), (not_found7479$3 as dc.dynamic), ));
}

dc.int compareTo(dc.dynamic y$1, ){
if(lcoc_core.vector$QMARK_(y$1, )){
return lcoc_core.compare_indexed(this, y$1, );
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("Cannot compare ", this, " to ", y$1, )), );
}

dc.dynamic $_subvec$2(dc.dynamic start$2, dc.dynamic end$1, ){
if((0==(start$2 as dc.dynamic))){
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(1, $UNDERSCORE_k, ));
return lcoc_core.$_vec_owning(fl$6, );
}
final dc.List<dc.dynamic> fl$7=(dc.List<dc.dynamic>.filled(1, $UNDERSCORE_v, ));
return lcoc_core.$_vec_owning(fl$7, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentMapEntry

// BEGIN PersistentVector
class PersistentVector<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.IStack$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ILookup$iface, lcoc_core.IAssociative$iface, lcoc_core.IFind$iface, lcoc_core.IVector$iface, lcoc_core.IReduce$iface, lcoc_core.IKVReduce$iface, lcoc_core.IFn$iface, lcoc_core.IEditableCollection$iface, dc.Comparable, lcoc_core.ISubvecable$iface {
final meta;
final dc.int cnt;
final dc.int shift;
final lcoc_core.VectorNode root;
final dc.List tail;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

PersistentVector(this.meta, this.cnt, this.shift, this.root, this.tail, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterator<E> get iterator{
return lcoc_core.PVIterator(this, 0, cnt, tail, );
}

lcoc_core.PersistentVector<R> cast<R>(){
return lcoc_core.PersistentVector<R>((meta as dc.dynamic), cnt, shift, root, tail, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("[", "]", this, sink$1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.PersistentVector((new_meta$1 as dc.dynamic), cnt, shift, root, tail, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_peek$0(){
if((0<cnt)){
return (tail[((cnt-1)&31)]);
}
return null;
}

dc.dynamic $_pop$0(){
if((0==cnt)){
throw dc.ArgumentError("Can't pop empty vector", );
}
final dc.int cnt_1$1=(cnt-1);
if((0==cnt_1$1)){
final lcoc_core.PersistentVector o7517$1=lcoc_core.$_EMPTY_VECTOR;
final dc.dynamic meta7518$1=meta;
return (o7517$1.$_with_meta$1((meta7518$1 as dc.dynamic), ));
}
final dc.int new_tail_length$1=(cnt_1$1-(cnt_1$1&(~31)));
if((0<new_tail_length$1)){
return lcoc_core.PersistentVector((meta as dc.dynamic), cnt_1$1, shift, root, lcoc_core.ashrink(tail, new_tail_length$1, ), -1, );
}
if((5==shift)){
final dc.int new_root_length$1=((cnt_1$1>>(31&5))-1);
final dc.List arr$1=root.arr;
return lcoc_core.PersistentVector((meta as dc.dynamic), cnt_1$1, 5, lcoc_core.VectorNode(null, lcoc_core.ashrink(arr$1, new_root_length$1, ), ), ((arr$1[new_root_length$1]) as lcoc_core.VectorNode).arr, -1, );
}
if(((cnt_1$1-32)==(4294967295&(1<<(31&shift))))){
return lcoc_core.PersistentVector((meta as dc.dynamic), cnt_1$1, (shift-5), ((root.arr[0]) as lcoc_core.VectorNode), lcoc_core.unchecked_array_for(root, shift, (cnt_1$1-1), ), -1, );
}
return lcoc_core.PersistentVector((meta as dc.dynamic), cnt_1$1, shift, (lcoc_core.pop_tail(this, shift, root, ) as lcoc_core.VectorNode), lcoc_core.unchecked_array_for(root, shift, (cnt_1$1-1), ), -1, );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final dc.int tail_len$1=(cnt&31);
final dc.bool or$7228_$AUTO_$1=(0<tail_len$1);
late final dc.bool $if_$1;
if(or$7228_$AUTO_$1){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=(0==cnt);
}
if($if_$1){
return lcoc_core.PersistentVector((meta as dc.dynamic), (1+cnt), shift, root, lcoc_core.aresize(tail, tail_len$1, (1+tail_len$1), o$1, ), -1, );
}
final dc.bool root_overflow$QMARK_$1=((4294967295&(1<<(31&shift)))<(cnt>>(31&5)));
late final dc.int new_shift$1;
if(root_overflow$QMARK_$1){
new_shift$1=(shift+5);
}else{
new_shift$1=shift;
}
late final lcoc_core.VectorNode new_root$1;
if(root_overflow$QMARK_$1){
final dc.List<lcoc_core.VectorNode> fl$1=(dc.List<lcoc_core.VectorNode>.filled(2, root, ));
fl$1[1]=lcoc_core.new_path(shift, lcoc_core.VectorNode(null, tail, ), );
new_root$1=lcoc_core.VectorNode(null, fl$1, );
}else{
new_root$1=lcoc_core.push_tail(this, shift, root, lcoc_core.VectorNode(null, tail, ), );
}
final dc.dynamic arg$2=(meta as dc.dynamic);
final dc.int arg$1=(1+cnt);
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(1, o$1, ));
return lcoc_core.PersistentVector(arg$2, arg$1, new_shift$1, new_root$1, fl$2, -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentVector o7517$2=lcoc_core.$_EMPTY_VECTOR;
final dc.dynamic meta7518$2=meta;
return (o7517$2.$_with_meta$1((meta7518$2 as dc.dynamic), ));
}

dc.dynamic $_seq$0(){
if((0==cnt)){
return null;
}
if((cnt<=32)){
final dc.List o7310$1=tail;
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
return lcoc_core.PVChunkedSeq(this, lcoc_core.unchecked_array_for(root, shift, 0, ), 0, 0, null, -1, );
}

dc.dynamic $_count$0(){
return cnt;
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
final dc.bool or$7228_$AUTO_$2=(cnt<=(n$1 as dc.num));
late final dc.bool $if_$2;
if(or$7228_$AUTO_$2){
$if_$2=or$7228_$AUTO_$2;
}else{
$if_$2=((n$1 as dc.num)<0);
}
if($if_$2){
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("No item ", n$1, " in vector of length ", cnt, )), );
}
late final dc.List arr$2;
if((((cnt-1)&(~31))<=(n$1 as dc.num))){
arr$2=tail;
}else{
arr$2=lcoc_core.unchecked_array_for(root, shift, n$1, );
}
return (arr$2[((n$1 as dc.int)&31)]);
}

dc.dynamic $_nth$2(dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.bool or$7228_$AUTO_$3=(cnt<=(n$2 as dc.num));
late final dc.bool $if_$3;
if(or$7228_$AUTO_$3){
$if_$3=or$7228_$AUTO_$3;
}else{
$if_$3=((n$2 as dc.int)<0);
}
if($if_$3){
return not_found$1;
}
late final dc.List arr$3;
if((((cnt-1)&(~31))<=(n$2 as dc.num))){
arr$3=tail;
}else{
arr$3=lcoc_core.unchecked_array_for(root, shift, n$2, );
}
return (arr$3[((n$2 as dc.int)&31)]);
}

dc.dynamic $_lookup$1(dc.dynamic k$1, ){
final lcoc_core.PersistentVector<E> o7486$1=this;
final dc.dynamic k7487$1=k$1;
final dc.Null not_found7488$1=null;
return (o7486$1.$_lookup$2((k7487$1 as dc.dynamic), not_found7488$1, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$2, dc.dynamic not_found$2, ){
if((k$2 is dc.int)){
final lcoc_core.PersistentVector<E> coll7477$1=this;
final dc.dynamic n7478$1=k$2;
final dc.dynamic not_found7479$1=not_found$2;
return (coll7477$1.$_nth$2((n7478$1 as dc.dynamic), (not_found7479$1 as dc.dynamic), ));
}
return not_found$2;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$3, ){
if((k$3 is dc.int)){
final dc.bool and$7187_$AUTO_$1=(0<=(k$3 as dc.num));
if(and$7187_$AUTO_$1){
return ((k$3 as dc.int)<cnt);
}
return and$7187_$AUTO_$1;
}
return false;
}

dc.dynamic $_assoc$2(dc.dynamic k$4, dc.dynamic v$1, ){
if((k$4 is dc.int)){
final lcoc_core.PersistentVector<E> coll7426$1=this;
final dc.dynamic n7427$1=k$4;
final dc.dynamic val7428$1=v$1;
return (coll7426$1.$_assoc_n$2((n7427$1 as dc.dynamic), (val7428$1 as dc.dynamic), ));
}
throw dc.ArgumentError("Vector's key for assoc must be a number.", );
}

dc.dynamic $_find$1(dc.dynamic n$3, ){
final lcoc_core.PersistentVector<E> o7486$2=this;
final dc.dynamic k7487$2=n$3;
final dc.Null not_found7488$2=null;
final dc.dynamic temp$7205_$AUTO_$1=(o7486$2.$_lookup$2((k7487$2 as dc.dynamic), not_found7488$2, ));
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.dynamic v$PRIME_$1=temp$7205_$AUTO_$1;
return lcoc_core.PersistentMapEntry<dc.int, E>((n$3 as dc.dynamic), v$PRIME_$1, -1, );
}

dc.dynamic $_assoc_n$2(dc.dynamic n$4, dc.dynamic val$1, ){
final dc.bool or$7228_$AUTO_$4=(cnt<(n$4 as dc.num));
late final dc.bool $if_$4;
if(or$7228_$AUTO_$4){
$if_$4=or$7228_$AUTO_$4;
}else{
$if_$4=((n$4 as dc.num)<0);
}
if($if_$4){
throw dc.ArgumentError((lcoc_core.str.$_invoke$5("Index ", n$4, " out of bounds  [0,", cnt, "]", )), );
}
if((n$4==cnt)){
final lcoc_core.PersistentVector<E> coll7355$1=this;
final dc.dynamic o7356$1=val$1;
return (coll7355$1.$_conj$1((o7356$1 as dc.dynamic), ));
}
if((((cnt-1)&(~31))<=(n$4 as dc.num))){
final dc.List<dc.dynamic> new_tail$1=(dc.List.from(tail, growable: false, ));
final dc.dynamic v$7774_$AUTO_$1=val$1;
new_tail$1[((n$4 as dc.int)&31)]=(v$7774_$AUTO_$1 as dc.dynamic);
return lcoc_core.PersistentVector((meta as dc.dynamic), cnt, shift, root, new_tail$1, -1, );
}
return lcoc_core.PersistentVector((meta as dc.dynamic), cnt, shift, lcoc_core.do_assoc(shift, root, n$4, val$1, ), tail, -1, );
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
return (lcoc_core.pv_reduce.$_invoke$3(this, f$1, 0, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic init$1, ){
return (lcoc_core.pv_reduce.$_invoke$4(this, f$2, 0, init$1, ));
}

dc.dynamic $_kv_reduce$2(dc.dynamic f$3, dc.dynamic init$2, ){
return lcoc_core.pv_kv_reduce(this, f$3, 0, cnt, init$2, );
}

dc.dynamic $_invoke$1(dc.dynamic k$5, ){
final lcoc_core.PersistentVector<E> coll7481$1=this;
final dc.dynamic n7482$1=k$5;
return (coll7481$1.$_nth$1((n7482$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic k$6, dc.dynamic not_found$3, ){
final lcoc_core.PersistentVector<E> coll7477$2=this;
final dc.dynamic n7478$2=k$6;
final dc.dynamic not_found7479$2=not_found$3;
return (coll7477$2.$_nth$2((n7478$2 as dc.dynamic), (not_found7479$2 as dc.dynamic), ));
}

dc.dynamic $_as_transient$0(){
return lcoc_core.TransientVector(cnt, shift, (dc.Object() as dc.dynamic), root, lcoc_core.aresize(tail, tail.length, 32, null, ), );
}

dc.int compareTo(dc.dynamic y$1, ){
if(lcoc_core.vector$QMARK_(y$1, )){
return lcoc_core.compare_indexed(this, y$1, );
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("Cannot compare ", this, " to ", y$1, )), );
}

dc.dynamic $_subvec$2(dc.dynamic start$1, dc.dynamic end$1, ){
return lcoc_core.SubVec(null, this, (start$1 as dc.int), (end$1 as dc.int), -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END PersistentVector

// BEGIN RNG
var RNG=d_math.Random();

// END RNG

// BEGIN RSeq
class RSeq<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.ISeqable$iface, lcoc_core.ISequential$iface, lcoc_core.ISeq$iface, lcoc_core.ICounted$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface {
final meta;
final v;
final dc.int i;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

RSeq(this.meta, this.v, this.i, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterator<E> get iterator{
if((v is lcoc_core.PersistentMapEntry)){
final dc.List<E> fl$1=(dc.List<E>.filled(2, lcoc_core.val(v, ), ));
fl$1[1]=lcoc_core.key(v, );
return fl$1.iterator;
}
return lcoc_core.RSeqIterator((v as lcoc_core.PersistentVector), (1+i), (v as lcoc_core.PersistentVector).tail, );
}

lcoc_core.RSeq<R> cast<R>(){
return lcoc_core.RSeq<R>((meta as dc.dynamic), (v as dc.dynamic), i, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.RSeq((new_meta$1 as dc.dynamic), (v as dc.dynamic), i, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_seq$0(){
return this;
}

dc.dynamic $_first$0(){
final dc.dynamic coll7481$1=v;
final dc.int n7482$1=i;
if((coll7481$1 is lcoc_core.IIndexed$iface)){
return ((coll7481$1 as lcoc_core.IIndexed$iface).$_nth$1(n7482$1, ));
}
return ((lcoc_core.IIndexed.extensions((coll7481$1 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$1 as dc.dynamic), n7482$1, ));
}

dc.dynamic $_rest$0(){
if((0<i)){
return lcoc_core.RSeq(null, (v as dc.dynamic), (i-1), $UNDERSCORE_$UNDERSCORE_hash, );
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_next$0(){
if((0<i)){
return lcoc_core.RSeq(null, (v as dc.dynamic), (i-1), $UNDERSCORE_$UNDERSCORE_hash, );
}
return null;
}

dc.dynamic $_count$0(){
return (1+i);
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END RSeq

// BEGIN RSeqIterator
class RSeqIterator<E> extends dc.Object implements dc.Iterator<E> {
final lcoc_core.PersistentVector v;
dc.int i;
dc.List curr;

RSeqIterator(this.v, this.i, this.curr, ):super();

E get current{
return (curr[(i&31)]);
}

dc.bool moveNext(){
final dc.bool and$7187_$AUTO_$1=(0<i);
if(and$7187_$AUTO_$1){
if((0==(i&31))){
curr=lcoc_core.unchecked_array_for(v.root, v.shift, i, );
}else{
}
i=(i-1);
return true;
}
return and$7187_$AUTO_$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END RSeqIterator

// BEGIN Reduced
class Reduced extends dc.Object implements lcoc_core.IDeref$iface {
final val;

const Reduced(this.val, ):super();

dc.dynamic $_deref$0(){
return val;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reduced

// BEGIN Reify$10
class Reify$10 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final f$4;
final arg1$2;

const Reify$10(this.meta$2, this.f$4, this.arg1$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.Reify$10((m$2101_$AUTO_$2 as dc.dynamic), (f$4 as dc.dynamic), (arg1$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$2, ){
return (lcoc_core.apply.$_invoke$6(f$4, arg1$2, x$1, y$1, z$1, args$2, ));
}

dc.dynamic $_invoke$0(){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$1(arg1$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, arg1$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, x$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$2(arg1$2, x$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$2(f$4, arg1$2, x$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, x$3, y$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$3(arg1$2, x$3, y$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$3(f$4, arg1$2, x$3, y$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
if((f$4 is dc.Function)){
return (f$4 as dc.Function)(arg1$2, x$4, y$3, z$2, );
}
if((f$4 is lcoc_core.IFn$iface)){
return ((f$4 as lcoc_core.IFn$iface).$_invoke$4(arg1$2, x$4, y$3, z$2, ));
}
return (lcoc_core.IFn.extensions(f$4, ).$_invoke$4(f$4, arg1$2, x$4, y$3, z$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$10

// BEGIN Reify$11
class Reify$11 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final f$6;
final arg1$3;
final arg2$2;

const Reify$11(this.meta$3, this.f$6, this.arg1$3, this.arg2$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$3, ){
return lcoc_core.Reify$11((m$2101_$AUTO_$3 as dc.dynamic), (f$6 as dc.dynamic), (arg1$3 as dc.dynamic), (arg2$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$3, ){
return (lcoc_core.apply.$_invoke$7(f$6, arg1$3, arg2$2, x$5, y$4, z$3, args$3, ));
}

dc.dynamic $_invoke$0(){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$2(arg1$3, arg2$2, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$2(f$6, arg1$3, arg2$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, x$6, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$3(arg1$3, arg2$2, x$6, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$3(f$6, arg1$3, arg2$2, x$6, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, x$7, y$5, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$4(arg1$3, arg2$2, x$7, y$5, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$4(f$6, arg1$3, arg2$2, x$7, y$5, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
if((f$6 is dc.Function)){
return (f$6 as dc.Function)(arg1$3, arg2$2, x$8, y$6, z$4, );
}
if((f$6 is lcoc_core.IFn$iface)){
return ((f$6 as lcoc_core.IFn$iface).$_invoke$5(arg1$3, arg2$2, x$8, y$6, z$4, ));
}
return (lcoc_core.IFn.extensions(f$6, ).$_invoke$5(f$6, arg1$3, arg2$2, x$8, y$6, z$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$11

// BEGIN Reify$12
class Reify$12 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final arg3$2;
final f$8;
final arg2$3;
final arg1$4;

const Reify$12(this.meta$4, this.arg3$2, this.f$8, this.arg2$3, this.arg1$4, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$4, ){
return lcoc_core.Reify$12((m$2101_$AUTO_$4 as dc.dynamic), (arg3$2 as dc.dynamic), (f$8 as dc.dynamic), (arg2$3 as dc.dynamic), (arg1$4 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$4, ){
return (lcoc_core.apply.$_invoke$8(f$8, arg1$4, arg2$3, arg3$2, x$9, y$7, z$5, args$4, ));
}

dc.dynamic $_invoke$0(){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$3(arg1$4, arg2$3, arg3$2, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$3(f$8, arg1$4, arg2$3, arg3$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, x$10, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$4(arg1$4, arg2$3, arg3$2, x$10, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$4(f$8, arg1$4, arg2$3, arg3$2, x$10, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, x$11, y$8, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$5(arg1$4, arg2$3, arg3$2, x$11, y$8, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$5(f$8, arg1$4, arg2$3, arg3$2, x$11, y$8, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
if((f$8 is dc.Function)){
return (f$8 as dc.Function)(arg1$4, arg2$3, arg3$2, x$12, y$9, z$6, );
}
if((f$8 is lcoc_core.IFn$iface)){
return ((f$8 as lcoc_core.IFn$iface).$_invoke$6(arg1$4, arg2$3, arg3$2, x$12, y$9, z$6, ));
}
return (lcoc_core.IFn.extensions(f$8, ).$_invoke$6(f$8, arg1$4, arg2$3, arg3$2, x$12, y$9, z$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$12

// BEGIN Reify$13
class Reify$13 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final fs$2;

const Reify$13(this.meta$1, this.fs$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$13((m$2101_$AUTO_$1 as dc.dynamic), (fs$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic coll7370$1=fs$2;
dc.dynamic f7371$1(dc.dynamic p1$8552_$SHARP_$1, dc.dynamic p2$8553_$SHARP_$1, ){
final dc.dynamic coll7355$1=p1$8552_$SHARP_$1;
final dc.dynamic o7356$1=(lcoc_core.apply.$_invoke$5(p2$8553_$SHARP_$1, x$1, y$1, z$1, args$1, ));
if((coll7355$1 is lcoc_core.ICollection$iface)){
return ((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}
return ((lcoc_core.ICollection.extensions((coll7355$1 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$1 as dc.dynamic), (o7356$1 as dc.dynamic), ));
}
final lcoc_core.PersistentVector start7372$1=lcoc_core.$_EMPTY_VECTOR;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$0(){
final dc.dynamic coll7370$2=fs$2;
dc.dynamic f7371$2(dc.dynamic p1$8544_$SHARP_$1, dc.dynamic p2$8545_$SHARP_$1, ){
final dc.dynamic coll7355$2=p1$8544_$SHARP_$1;
late final dc.dynamic o7356$2;
if((p2$8545_$SHARP_$1 is dc.Function)){
o7356$2=(p2$8545_$SHARP_$1 as dc.Function)();
}else if((p2$8545_$SHARP_$1 is lcoc_core.IFn$iface)){
o7356$2=((p2$8545_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
o7356$2=(lcoc_core.IFn.extensions(p2$8545_$SHARP_$1, ).$_invoke$0(p2$8545_$SHARP_$1, ));
}
if((coll7355$2 is lcoc_core.ICollection$iface)){
return ((coll7355$2 as lcoc_core.ICollection$iface).$_conj$1(o7356$2, ));
}
return ((lcoc_core.ICollection.extensions((coll7355$2 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$2 as dc.dynamic), o7356$2, ));
}
final lcoc_core.PersistentVector start7372$2=lcoc_core.$_EMPTY_VECTOR;
if((coll7370$2 is lcoc_core.IReduce$iface)){
return ((coll7370$2 as lcoc_core.IReduce$iface).$_reduce$2(f7371$2, start7372$2, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$2 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$2 as dc.dynamic), f7371$2, start7372$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
final dc.dynamic coll7370$3=fs$2;
dc.dynamic f7371$3(dc.dynamic p1$8546_$SHARP_$1, dc.dynamic p2$8547_$SHARP_$1, ){
final dc.dynamic coll7355$3=p1$8546_$SHARP_$1;
late final dc.dynamic o7356$3;
if((p2$8547_$SHARP_$1 is dc.Function)){
o7356$3=(p2$8547_$SHARP_$1 as dc.Function)(x$2, );
}else if((p2$8547_$SHARP_$1 is lcoc_core.IFn$iface)){
o7356$3=((p2$8547_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}else{
o7356$3=(lcoc_core.IFn.extensions(p2$8547_$SHARP_$1, ).$_invoke$1(p2$8547_$SHARP_$1, x$2, ));
}
if((coll7355$3 is lcoc_core.ICollection$iface)){
return ((coll7355$3 as lcoc_core.ICollection$iface).$_conj$1(o7356$3, ));
}
return ((lcoc_core.ICollection.extensions((coll7355$3 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$3 as dc.dynamic), o7356$3, ));
}
final lcoc_core.PersistentVector start7372$3=lcoc_core.$_EMPTY_VECTOR;
if((coll7370$3 is lcoc_core.IReduce$iface)){
return ((coll7370$3 as lcoc_core.IReduce$iface).$_reduce$2(f7371$3, start7372$3, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$3 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$3 as dc.dynamic), f7371$3, start7372$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic coll7370$4=fs$2;
dc.dynamic f7371$4(dc.dynamic p1$8548_$SHARP_$1, dc.dynamic p2$8549_$SHARP_$1, ){
final dc.dynamic coll7355$4=p1$8548_$SHARP_$1;
late final dc.dynamic o7356$4;
if((p2$8549_$SHARP_$1 is dc.Function)){
o7356$4=(p2$8549_$SHARP_$1 as dc.Function)(x$3, y$2, );
}else if((p2$8549_$SHARP_$1 is lcoc_core.IFn$iface)){
o7356$4=((p2$8549_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$2(x$3, y$2, ));
}else{
o7356$4=(lcoc_core.IFn.extensions(p2$8549_$SHARP_$1, ).$_invoke$2(p2$8549_$SHARP_$1, x$3, y$2, ));
}
if((coll7355$4 is lcoc_core.ICollection$iface)){
return ((coll7355$4 as lcoc_core.ICollection$iface).$_conj$1(o7356$4, ));
}
return ((lcoc_core.ICollection.extensions((coll7355$4 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$4 as dc.dynamic), o7356$4, ));
}
final lcoc_core.PersistentVector start7372$4=lcoc_core.$_EMPTY_VECTOR;
if((coll7370$4 is lcoc_core.IReduce$iface)){
return ((coll7370$4 as lcoc_core.IReduce$iface).$_reduce$2(f7371$4, start7372$4, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$4 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$4 as dc.dynamic), f7371$4, start7372$4, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
final dc.dynamic coll7370$5=fs$2;
dc.dynamic f7371$5(dc.dynamic p1$8550_$SHARP_$1, dc.dynamic p2$8551_$SHARP_$1, ){
final dc.dynamic coll7355$5=p1$8550_$SHARP_$1;
late final dc.dynamic o7356$5;
if((p2$8551_$SHARP_$1 is dc.Function)){
o7356$5=(p2$8551_$SHARP_$1 as dc.Function)(x$4, y$3, z$2, );
}else if((p2$8551_$SHARP_$1 is lcoc_core.IFn$iface)){
o7356$5=((p2$8551_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$3(x$4, y$3, z$2, ));
}else{
o7356$5=(lcoc_core.IFn.extensions(p2$8551_$SHARP_$1, ).$_invoke$3(p2$8551_$SHARP_$1, x$4, y$3, z$2, ));
}
if((coll7355$5 is lcoc_core.ICollection$iface)){
return ((coll7355$5 as lcoc_core.ICollection$iface).$_conj$1(o7356$5, ));
}
return ((lcoc_core.ICollection.extensions((coll7355$5 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$5 as dc.dynamic), o7356$5, ));
}
final lcoc_core.PersistentVector start7372$5=lcoc_core.$_EMPTY_VECTOR;
if((coll7370$5 is lcoc_core.IReduce$iface)){
return ((coll7370$5 as lcoc_core.IReduce$iface).$_reduce$2(f7371$5, start7372$5, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$5 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$5 as dc.dynamic), f7371$5, start7372$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$13

// BEGIN Reify$14
class Reify$14 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final f$3;

const Reify$14(this.meta$2, this.f$3, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.Reify$14((m$2101_$AUTO_$2 as dc.dynamic), (f$3 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$2, ){
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(1, (lcoc_core.apply.$_invoke$5(f$3, x$5, y$4, z$3, args$2, )), ));
return lcoc_core.$_vec_owning(fl$9, );
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$9;
if((f$3 is dc.Function)){
$if_$9=(f$3 as dc.Function)();
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$9=((f$3 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$9=(lcoc_core.IFn.extensions(f$3, ).$_invoke$0(f$3, ));
}
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(1, $if_$9, ));
return lcoc_core.$_vec_owning(fl$10, );
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
late final dc.dynamic $if_$10;
if((f$3 is dc.Function)){
$if_$10=(f$3 as dc.Function)(x$6, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$10=((f$3 as lcoc_core.IFn$iface).$_invoke$1(x$6, ));
}else{
$if_$10=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, x$6, ));
}
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(1, $if_$10, ));
return lcoc_core.$_vec_owning(fl$11, );
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
late final dc.dynamic $if_$11;
if((f$3 is dc.Function)){
$if_$11=(f$3 as dc.Function)(x$7, y$5, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$11=((f$3 as lcoc_core.IFn$iface).$_invoke$2(x$7, y$5, ));
}else{
$if_$11=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, x$7, y$5, ));
}
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(1, $if_$11, ));
return lcoc_core.$_vec_owning(fl$12, );
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
late final dc.dynamic $if_$12;
if((f$3 is dc.Function)){
$if_$12=(f$3 as dc.Function)(x$8, y$6, z$4, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$12=((f$3 as lcoc_core.IFn$iface).$_invoke$3(x$8, y$6, z$4, ));
}else{
$if_$12=(lcoc_core.IFn.extensions(f$3, ).$_invoke$3(f$3, x$8, y$6, z$4, ));
}
final dc.List<dc.dynamic> fl$13=(dc.List<dc.dynamic>.filled(1, $if_$12, ));
return lcoc_core.$_vec_owning(fl$13, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$14

// BEGIN Reify$15
class Reify$15 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final f$5;
final g$2;

const Reify$15(this.meta$3, this.f$5, this.g$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$3, ){
return lcoc_core.Reify$15((m$2101_$AUTO_$3 as dc.dynamic), (f$5 as dc.dynamic), (g$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$3, ){
final dc.List<dc.dynamic> fl$14=(dc.List<dc.dynamic>.filled(2, (lcoc_core.apply.$_invoke$5(f$5, x$9, y$7, z$5, args$3, )), ));
fl$14[1]=(lcoc_core.apply.$_invoke$5(g$2, x$9, y$7, z$5, args$3, ));
return lcoc_core.$_vec_owning(fl$14, );
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$13;
if((f$5 is dc.Function)){
$if_$13=(f$5 as dc.Function)();
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$13=((f$5 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$13=(lcoc_core.IFn.extensions(f$5, ).$_invoke$0(f$5, ));
}
final dc.List<dc.dynamic> fl$15=(dc.List<dc.dynamic>.filled(2, $if_$13, ));
late final dc.dynamic $if_$14;
if((g$2 is dc.Function)){
$if_$14=(g$2 as dc.Function)();
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$14=((g$2 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$14=(lcoc_core.IFn.extensions(g$2, ).$_invoke$0(g$2, ));
}
fl$15[1]=$if_$14;
return lcoc_core.$_vec_owning(fl$15, );
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
late final dc.dynamic $if_$15;
if((f$5 is dc.Function)){
$if_$15=(f$5 as dc.Function)(x$10, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$15=((f$5 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
$if_$15=(lcoc_core.IFn.extensions(f$5, ).$_invoke$1(f$5, x$10, ));
}
final dc.List<dc.dynamic> fl$16=(dc.List<dc.dynamic>.filled(2, $if_$15, ));
late final dc.dynamic $if_$16;
if((g$2 is dc.Function)){
$if_$16=(g$2 as dc.Function)(x$10, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$16=((g$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
$if_$16=(lcoc_core.IFn.extensions(g$2, ).$_invoke$1(g$2, x$10, ));
}
fl$16[1]=$if_$16;
return lcoc_core.$_vec_owning(fl$16, );
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
late final dc.dynamic $if_$17;
if((f$5 is dc.Function)){
$if_$17=(f$5 as dc.Function)(x$11, y$8, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$17=((f$5 as lcoc_core.IFn$iface).$_invoke$2(x$11, y$8, ));
}else{
$if_$17=(lcoc_core.IFn.extensions(f$5, ).$_invoke$2(f$5, x$11, y$8, ));
}
final dc.List<dc.dynamic> fl$17=(dc.List<dc.dynamic>.filled(2, $if_$17, ));
late final dc.dynamic $if_$18;
if((g$2 is dc.Function)){
$if_$18=(g$2 as dc.Function)(x$11, y$8, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$18=((g$2 as lcoc_core.IFn$iface).$_invoke$2(x$11, y$8, ));
}else{
$if_$18=(lcoc_core.IFn.extensions(g$2, ).$_invoke$2(g$2, x$11, y$8, ));
}
fl$17[1]=$if_$18;
return lcoc_core.$_vec_owning(fl$17, );
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
late final dc.dynamic $if_$19;
if((f$5 is dc.Function)){
$if_$19=(f$5 as dc.Function)(x$12, y$9, z$6, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$19=((f$5 as lcoc_core.IFn$iface).$_invoke$3(x$12, y$9, z$6, ));
}else{
$if_$19=(lcoc_core.IFn.extensions(f$5, ).$_invoke$3(f$5, x$12, y$9, z$6, ));
}
final dc.List<dc.dynamic> fl$18=(dc.List<dc.dynamic>.filled(2, $if_$19, ));
late final dc.dynamic $if_$20;
if((g$2 is dc.Function)){
$if_$20=(g$2 as dc.Function)(x$12, y$9, z$6, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$20=((g$2 as lcoc_core.IFn$iface).$_invoke$3(x$12, y$9, z$6, ));
}else{
$if_$20=(lcoc_core.IFn.extensions(g$2, ).$_invoke$3(g$2, x$12, y$9, z$6, ));
}
fl$18[1]=$if_$20;
return lcoc_core.$_vec_owning(fl$18, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$15

// BEGIN Reify$16
class Reify$16 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final h$2;
final g$3;
final f$7;

const Reify$16(this.meta$4, this.h$2, this.g$3, this.f$7, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$4, ){
return lcoc_core.Reify$16((m$2101_$AUTO_$4 as dc.dynamic), (h$2 as dc.dynamic), (g$3 as dc.dynamic), (f$7 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$13, dc.dynamic y$10, dc.dynamic z$7, dc.dynamic args$4, ){
final dc.List<dc.dynamic> fl$19=(dc.List<dc.dynamic>.filled(3, (lcoc_core.apply.$_invoke$5(f$7, x$13, y$10, z$7, args$4, )), ));
fl$19[1]=(lcoc_core.apply.$_invoke$5(g$3, x$13, y$10, z$7, args$4, ));
fl$19[2]=(lcoc_core.apply.$_invoke$5(h$2, x$13, y$10, z$7, args$4, ));
return lcoc_core.$_vec_owning(fl$19, );
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$21;
if((f$7 is dc.Function)){
$if_$21=(f$7 as dc.Function)();
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$21=((f$7 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$21=(lcoc_core.IFn.extensions(f$7, ).$_invoke$0(f$7, ));
}
final dc.List<dc.dynamic> fl$20=(dc.List<dc.dynamic>.filled(3, $if_$21, ));
late final dc.dynamic $if_$22;
if((g$3 is dc.Function)){
$if_$22=(g$3 as dc.Function)();
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$22=((g$3 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$22=(lcoc_core.IFn.extensions(g$3, ).$_invoke$0(g$3, ));
}
fl$20[1]=$if_$22;
late final dc.dynamic $if_$23;
if((h$2 is dc.Function)){
$if_$23=(h$2 as dc.Function)();
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$23=((h$2 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$23=(lcoc_core.IFn.extensions(h$2, ).$_invoke$0(h$2, ));
}
fl$20[2]=$if_$23;
return lcoc_core.$_vec_owning(fl$20, );
}

dc.dynamic $_invoke$1(dc.dynamic x$14, ){
late final dc.dynamic $if_$24;
if((f$7 is dc.Function)){
$if_$24=(f$7 as dc.Function)(x$14, );
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$24=((f$7 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$24=(lcoc_core.IFn.extensions(f$7, ).$_invoke$1(f$7, x$14, ));
}
final dc.List<dc.dynamic> fl$21=(dc.List<dc.dynamic>.filled(3, $if_$24, ));
late final dc.dynamic $if_$25;
if((g$3 is dc.Function)){
$if_$25=(g$3 as dc.Function)(x$14, );
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$25=((g$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$25=(lcoc_core.IFn.extensions(g$3, ).$_invoke$1(g$3, x$14, ));
}
fl$21[1]=$if_$25;
late final dc.dynamic $if_$26;
if((h$2 is dc.Function)){
$if_$26=(h$2 as dc.Function)(x$14, );
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$26=((h$2 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$26=(lcoc_core.IFn.extensions(h$2, ).$_invoke$1(h$2, x$14, ));
}
fl$21[2]=$if_$26;
return lcoc_core.$_vec_owning(fl$21, );
}

dc.dynamic $_invoke$2(dc.dynamic x$15, dc.dynamic y$11, ){
late final dc.dynamic $if_$27;
if((f$7 is dc.Function)){
$if_$27=(f$7 as dc.Function)(x$15, y$11, );
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$27=((f$7 as lcoc_core.IFn$iface).$_invoke$2(x$15, y$11, ));
}else{
$if_$27=(lcoc_core.IFn.extensions(f$7, ).$_invoke$2(f$7, x$15, y$11, ));
}
final dc.List<dc.dynamic> fl$22=(dc.List<dc.dynamic>.filled(3, $if_$27, ));
late final dc.dynamic $if_$28;
if((g$3 is dc.Function)){
$if_$28=(g$3 as dc.Function)(x$15, y$11, );
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$28=((g$3 as lcoc_core.IFn$iface).$_invoke$2(x$15, y$11, ));
}else{
$if_$28=(lcoc_core.IFn.extensions(g$3, ).$_invoke$2(g$3, x$15, y$11, ));
}
fl$22[1]=$if_$28;
late final dc.dynamic $if_$29;
if((h$2 is dc.Function)){
$if_$29=(h$2 as dc.Function)(x$15, y$11, );
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$29=((h$2 as lcoc_core.IFn$iface).$_invoke$2(x$15, y$11, ));
}else{
$if_$29=(lcoc_core.IFn.extensions(h$2, ).$_invoke$2(h$2, x$15, y$11, ));
}
fl$22[2]=$if_$29;
return lcoc_core.$_vec_owning(fl$22, );
}

dc.dynamic $_invoke$3(dc.dynamic x$16, dc.dynamic y$12, dc.dynamic z$8, ){
late final dc.dynamic $if_$30;
if((f$7 is dc.Function)){
$if_$30=(f$7 as dc.Function)(x$16, y$12, z$8, );
}else if((f$7 is lcoc_core.IFn$iface)){
$if_$30=((f$7 as lcoc_core.IFn$iface).$_invoke$3(x$16, y$12, z$8, ));
}else{
$if_$30=(lcoc_core.IFn.extensions(f$7, ).$_invoke$3(f$7, x$16, y$12, z$8, ));
}
final dc.List<dc.dynamic> fl$23=(dc.List<dc.dynamic>.filled(3, $if_$30, ));
late final dc.dynamic $if_$31;
if((g$3 is dc.Function)){
$if_$31=(g$3 as dc.Function)(x$16, y$12, z$8, );
}else if((g$3 is lcoc_core.IFn$iface)){
$if_$31=((g$3 as lcoc_core.IFn$iface).$_invoke$3(x$16, y$12, z$8, ));
}else{
$if_$31=(lcoc_core.IFn.extensions(g$3, ).$_invoke$3(g$3, x$16, y$12, z$8, ));
}
fl$23[1]=$if_$31;
late final dc.dynamic $if_$32;
if((h$2 is dc.Function)){
$if_$32=(h$2 as dc.Function)(x$16, y$12, z$8, );
}else if((h$2 is lcoc_core.IFn$iface)){
$if_$32=((h$2 as lcoc_core.IFn$iface).$_invoke$3(x$16, y$12, z$8, ));
}else{
$if_$32=(lcoc_core.IFn.extensions(h$2, ).$_invoke$3(h$2, x$16, y$12, z$8, ));
}
fl$23[2]=$if_$32;
return lcoc_core.$_vec_owning(fl$23, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$16

// BEGIN Reify$2
class Reify$2 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final dc.Function f$2;

const Reify$2(this.meta$1, this.f$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$2((m$2101_$AUTO_$1 as dc.dynamic), f$2, );
}

dc.dynamic $_invoke$vararg(dc.dynamic rest$8371_$SHARP_$1, ){
return (dc.Function.apply(f$2, (rest$8371_$SHARP_$1 as dc.List<dc.dynamic>?), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$2

// BEGIN Reify$21
class Reify$21 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final x$1;

const Reify$21(this.meta$1, this.x$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$21((m$2101_$AUTO_$1 as dc.dynamic), (x$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic args$1, ){
return x$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$21

// BEGIN Reify$22
class Reify$22 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final f$1;

const Reify$22(this.meta$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$22((m$2101_$AUTO_$1 as dc.dynamic), (f$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic zs$1, ){
final dc.dynamic test$1=(lcoc_core.apply.$_invoke$4(f$1, x$1, y$1, zs$1, ));
if(((test$1!=false)&&(test$1!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
late final dc.dynamic $if_$2;
if((f$1 is dc.Function)){
$if_$2=(f$1 as dc.Function)(x$2, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$2=((f$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, x$2, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.dynamic $if_$3;
if((f$1 is dc.Function)){
$if_$3=(f$1 as dc.Function)(x$3, y$2, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$3=((f$1 as lcoc_core.IFn$iface).$_invoke$2(x$3, y$2, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, x$3, y$2, ));
}
if((($if_$3!=false)&&($if_$3!=null))){
return false;
}
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$22

// BEGIN Reify$27
class Reify$27 extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final x$1;
final f$1;

const Reify$27(this.meta$1, this.x$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$27((m$2101_$AUTO_$1 as dc.dynamic), (x$1 as dc.dynamic), (f$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic ds$1, ){
late final dc.dynamic $if_$1;
if((null==(a$1 as dc.dynamic))){
$if_$1=x$1;
}else{
$if_$1=a$1;
}
return (lcoc_core.apply.$_invoke$5(f$1, $if_$1, b$1, c$1, ds$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic a$2, ){
late final dc.dynamic $if_$2;
if((null==(a$2 as dc.dynamic))){
$if_$2=x$1;
}else{
$if_$2=a$2;
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)($if_$2, );
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$1($if_$2, ));
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, $if_$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$3, dc.dynamic b$2, ){
late final dc.dynamic $if_$3;
if((null==(a$3 as dc.dynamic))){
$if_$3=x$1;
}else{
$if_$3=a$3;
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)($if_$3, b$2, );
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$2($if_$3, b$2, ));
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, $if_$3, b$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic a$4, dc.dynamic b$3, dc.dynamic c$2, ){
late final dc.dynamic $if_$4;
if((null==(a$4 as dc.dynamic))){
$if_$4=x$1;
}else{
$if_$4=a$4;
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)($if_$4, b$3, c$2, );
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$3($if_$4, b$3, c$2, ));
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$3(f$1, $if_$4, b$3, c$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$27

// BEGIN Reify$28
class Reify$28 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final y$1;
final f$3;
final x$2;

const Reify$28(this.meta$2, this.y$1, this.f$3, this.x$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.Reify$28((m$2101_$AUTO_$2 as dc.dynamic), (y$1 as dc.dynamic), (f$3 as dc.dynamic), (x$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$5, dc.dynamic b$4, dc.dynamic c$3, dc.dynamic ds$2, ){
late final dc.dynamic $if_$6;
if((null==(a$5 as dc.dynamic))){
$if_$6=x$2;
}else{
$if_$6=a$5;
}
late final dc.dynamic $if_$5;
if((null==(b$4 as dc.dynamic))){
$if_$5=y$1;
}else{
$if_$5=b$4;
}
return (lcoc_core.apply.$_invoke$5(f$3, $if_$6, $if_$5, c$3, ds$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$6, dc.dynamic b$5, ){
late final dc.dynamic $if_$8;
if((null==(a$6 as dc.dynamic))){
$if_$8=x$2;
}else{
$if_$8=a$6;
}
late final dc.dynamic $if_$7;
if((null==(b$5 as dc.dynamic))){
$if_$7=y$1;
}else{
$if_$7=b$5;
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$8, $if_$7, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$2($if_$8, $if_$7, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, $if_$8, $if_$7, ));
}

dc.dynamic $_invoke$3(dc.dynamic a$7, dc.dynamic b$6, dc.dynamic c$4, ){
late final dc.dynamic $if_$10;
if((null==(a$7 as dc.dynamic))){
$if_$10=x$2;
}else{
$if_$10=a$7;
}
late final dc.dynamic $if_$9;
if((null==(b$6 as dc.dynamic))){
$if_$9=y$1;
}else{
$if_$9=b$6;
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$10, $if_$9, c$4, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$3($if_$10, $if_$9, c$4, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$3(f$3, $if_$10, $if_$9, c$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$28

// BEGIN Reify$29
class Reify$29 extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final y$2;
final z$1;
final f$5;
final x$3;

const Reify$29(this.meta$3, this.y$2, this.z$1, this.f$5, this.x$3, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$3, ){
return lcoc_core.Reify$29((m$2101_$AUTO_$3 as dc.dynamic), (y$2 as dc.dynamic), (z$1 as dc.dynamic), (f$5 as dc.dynamic), (x$3 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$8, dc.dynamic b$7, dc.dynamic c$5, dc.dynamic ds$3, ){
late final dc.dynamic $if_$13;
if((null==(a$8 as dc.dynamic))){
$if_$13=x$3;
}else{
$if_$13=a$8;
}
late final dc.dynamic $if_$12;
if((null==(b$7 as dc.dynamic))){
$if_$12=y$2;
}else{
$if_$12=b$7;
}
late final dc.dynamic $if_$11;
if((null==(c$5 as dc.dynamic))){
$if_$11=z$1;
}else{
$if_$11=c$5;
}
return (lcoc_core.apply.$_invoke$5(f$5, $if_$13, $if_$12, $if_$11, ds$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic a$9, dc.dynamic b$8, ){
late final dc.dynamic $if_$15;
if((null==(a$9 as dc.dynamic))){
$if_$15=x$3;
}else{
$if_$15=a$9;
}
late final dc.dynamic $if_$14;
if((null==(b$8 as dc.dynamic))){
$if_$14=y$2;
}else{
$if_$14=b$8;
}
if((f$5 is dc.Function)){
return (f$5 as dc.Function)($if_$15, $if_$14, );
}
if((f$5 is lcoc_core.IFn$iface)){
return ((f$5 as lcoc_core.IFn$iface).$_invoke$2($if_$15, $if_$14, ));
}
return (lcoc_core.IFn.extensions(f$5, ).$_invoke$2(f$5, $if_$15, $if_$14, ));
}

dc.dynamic $_invoke$3(dc.dynamic a$10, dc.dynamic b$9, dc.dynamic c$6, ){
late final dc.dynamic $if_$18;
if((null==(a$10 as dc.dynamic))){
$if_$18=x$3;
}else{
$if_$18=a$10;
}
late final dc.dynamic $if_$17;
if((null==(b$9 as dc.dynamic))){
$if_$17=y$2;
}else{
$if_$17=b$9;
}
late final dc.dynamic $if_$16;
if((null==(c$6 as dc.dynamic))){
$if_$16=z$1;
}else{
$if_$16=c$6;
}
if((f$5 is dc.Function)){
return (f$5 as dc.Function)($if_$18, $if_$17, $if_$16, );
}
if((f$5 is lcoc_core.IFn$iface)){
return ((f$5 as lcoc_core.IFn$iface).$_invoke$3($if_$18, $if_$17, $if_$16, ));
}
return (lcoc_core.IFn.extensions(f$5, ).$_invoke$3(f$5, $if_$18, $if_$17, $if_$16, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$29

// BEGIN Reify$3
class Reify$3 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final unary_fn$2;
final zero$1;
final op$3;

const Reify$3(this.meta$1, this.unary_fn$2, this.zero$1, this.op$3, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$3((m$2101_$AUTO_$1 as dc.dynamic), (unary_fn$2 as dc.dynamic), (zero$1 as dc.dynamic), (op$3 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7370$1=more$1;
dc.dynamic f7371$1(dc.dynamic a$1, dc.dynamic b$1, ){
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(a$1, )), (lcoc_core.list.$_invoke$1(op$3, )), (lcoc_core.list.$_invoke$1(b$1, )), ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$1, )), (lcoc_core.list.$_invoke$1(op$3, )), (lcoc_core.list.$_invoke$1(y$1, )), ));
late final dc.dynamic start7372$1;
if((o7310$3 is lcoc_core.ISeqable$iface)){
start7372$1=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
start7372$1=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$0(){
return zero$1;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
if((unary_fn$2 is dc.Function)){
return (unary_fn$2 as dc.Function)(x$2, );
}
if((unary_fn$2 is lcoc_core.IFn$iface)){
return ((unary_fn$2 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}
return (lcoc_core.IFn.extensions(unary_fn$2, ).$_invoke$1(unary_fn$2, x$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$3, )), (lcoc_core.list.$_invoke$1(op$3, )), (lcoc_core.list.$_invoke$1(y$2, )), ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$3

// BEGIN Reify$30
class Reify$30 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile nv$1;

const Reify$30(this.meta$1, this.rf$1, this.nv$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$30((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), nv$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic n$2=lcoc_core.deref(nv$1, );
final lcoc_core.Volatile o7651$1=nv$1;
final lcoc_core.Volatile o7365$1=nv$1;
final dc.dynamic $1=(o7365$1.$_deref$0());
final dc.num new_value7652$1=(($1 as dc.num)-1);
o7651$1.$_vreset$BANG_$1(new_value7652$1, );
if((0<(n$2 as dc.num))){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$30

// BEGIN Reify$31
class Reify$31 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile dv$1;
final pred$1;

const Reify$31(this.meta$1, this.rf$1, this.dv$1, this.pred$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$31((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), dv$1, (pred$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic drop$QMARK_$1=lcoc_core.deref(dv$1, );
final dc.dynamic and$7187_$AUTO_$1=drop$QMARK_$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(input$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, input$1, ));
}
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
return result$2;
}
lcoc_core.vreset$BANG_(dv$1, null, );
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$31

// BEGIN Reify$32
class Reify$32 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile nv$1;

const Reify$32(this.meta$1, this.rf$1, this.nv$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$32((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), nv$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic n$2=lcoc_core.deref(nv$1, );
final lcoc_core.Volatile o7651$1=nv$1;
final lcoc_core.Volatile o7365$1=nv$1;
final dc.dynamic $1=(o7365$1.$_deref$0());
final dc.num new_value7652$1=(($1 as dc.num)-1);
final dc.dynamic nn$1=(o7651$1.$_vreset$BANG_$1(new_value7652$1, ));
late final dc.dynamic result$3;
if((0<(n$2 as dc.num))){
if((rf$1 is dc.Function)){
result$3=(rf$1 as dc.Function)(result$2, input$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
result$3=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}else{
result$3=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
}else{
result$3=result$2;
}
late final dc.bool $if_$1;
if((0<(nn$1 as dc.num))){
$if_$1=false;
}else{
$if_$1=true;
}
if($if_$1){
return lcoc_core.ensure_reduced(result$3, );
}
return result$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$32

// BEGIN Reify$33
class Reify$33 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final pred$1;

const Reify$33(this.meta$1, this.rf$1, this.pred$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$33((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), (pred$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic $if_$1;
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(input$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, input$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
return lcoc_core.reduced(result$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$33

// BEGIN Reify$34
class Reify$34 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final n$1;
final lcoc_core.Volatile iv$1;
final rf$1;

const Reify$34(this.meta$1, this.n$1, this.iv$1, this.rf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$34((m$2101_$AUTO_$1 as dc.dynamic), (n$1 as dc.dynamic), iv$1, (rf$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final lcoc_core.Volatile o7651$1=iv$1;
final lcoc_core.Volatile o7365$1=iv$1;
final dc.num cast$1=((o7365$1.$_deref$0()) as dc.num);
final dc.num new_value7652$1=(1+cast$1);
final dc.int i$1=((o7651$1.$_vreset$BANG_$1(new_value7652$1, )) as dc.int);
if((0==(i$1.remainder((n$1 as dc.num), )))){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
return result$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$34

// BEGIN Reify$35
class Reify$35 extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final f$2;

const Reify$35(this.meta$1, this.rf$1, this.f$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$35((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), (f$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic result$1, dc.dynamic input$1, dc.dynamic inputs$1, ){
final dc.dynamic arg$1=(lcoc_core.apply.$_invoke$3(f$2, input$1, inputs$1, ));
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, arg$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$1, arg$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$1, arg$1, ));
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$2, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$3, dc.dynamic input$2, ){
late final dc.dynamic $if_$1;
if((f$2 is dc.Function)){
$if_$1=(f$2 as dc.Function)(input$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$1=((f$2 as lcoc_core.IFn$iface).$_invoke$1(input$2, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$2, ).$_invoke$1(f$2, input$2, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$3, $if_$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$3, $if_$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$3, $if_$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$35

// BEGIN Reify$36
class Reify$36 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile i$1;
final f$1;

const Reify$36(this.meta$1, this.rf$1, this.i$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$36((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), i$1, (f$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final lcoc_core.Volatile o7651$1=i$1;
final lcoc_core.Volatile o7365$1=i$1;
final dc.num cast$1=((o7365$1.$_deref$0()) as dc.num);
final dc.num new_value7652$1=(1+cast$1);
final dc.dynamic $1=(o7651$1.$_vreset$BANG_$1(new_value7652$1, ));
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)($1, input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2($1, input$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, $1, input$1, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, $if_$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, $if_$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, $if_$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$36

// BEGIN Reify$37
class Reify$37 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final lcoc_core.Atom mem$1;
final f$1;

const Reify$37(this.meta$1, this.mem$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$37((m$2101_$AUTO_$1 as dc.dynamic), mem$1, (f$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic args$1, ){
final dc.dynamic temp$7210_$AUTO_$1=lcoc_core.find(lcoc_core.deref(mem$1, ), args$1, );
if((temp$7210_$AUTO_$1!=null)){
final dc.dynamic e$1=temp$7210_$AUTO_$1;
return lcoc_core.val(e$1, );
}
final dc.dynamic ret$1=(lcoc_core.apply.$_invoke$2(f$1, args$1, ));
lcoc_core.swap$BANG_.$_invoke$4(mem$1, lcoc_core.assoc, args$1, ret$1, );
return ret$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$37

// BEGIN Reify$38
class Reify$38 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final f$1;

const Reify$38(this.meta$1, this.rf$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$38((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), (f$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic v$1;
if((f$1 is dc.Function)){
v$1=(f$1 as dc.Function)(input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
v$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
v$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, input$1, ));
}
if((null==v$1)){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, v$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, v$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, v$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$38

// BEGIN Reify$39
class Reify$39 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final lcoc_core.Volatile iv$1;
final rf$1;
final f$1;

const Reify$39(this.meta$1, this.iv$1, this.rf$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$39((m$2101_$AUTO_$1 as dc.dynamic), iv$1, (rf$1 as dc.dynamic), (f$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final lcoc_core.Volatile o7651$1=iv$1;
final lcoc_core.Volatile o7365$1=iv$1;
final dc.num cast$1=((o7365$1.$_deref$0()) as dc.num);
final dc.num new_value7652$1=(1+cast$1);
final dc.dynamic i$1=(o7651$1.$_vreset$BANG_$1(new_value7652$1, ));
late final dc.dynamic v$1;
if((f$1 is dc.Function)){
v$1=(f$1 as dc.Function)(i$1, input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
v$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(i$1, input$1, ));
}else{
v$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, i$1, input$1, ));
}
if((null==v$1)){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, v$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, v$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, v$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$39

// BEGIN Reify$4
class Reify$4 extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final op$1;

const Reify$4(this.meta$1, this.op$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$4((m$2101_$AUTO_$1 as dc.dynamic), (op$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic bindings$1=(lcoc_core.mapcat.$_invoke$2((dc.dynamic x$2, ){
late final dc.dynamic $if_$1;
if((lcoc_core.gensym is dc.Function)){
$if_$1=(lcoc_core.gensym as dc.Function)(op$1, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
$if_$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(op$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, op$1, ));
}
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, $if_$1, ));
fl$1[1]=x$2;
return lcoc_core.$_vec_owning(fl$1, );
}, (lcoc_core.list$STAR_.$_invoke$3(x$1, y$1, more$1, )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$1(bindings$1, ));
late final dc.dynamic $if_$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".&&", )), )), (lcoc_core.map.$_invoke$2((dc.dynamic p$8460_$1, ){
final dc.dynamic vec$8461_$1=p$8460_$1;
final dc.dynamic x$3=(lcoc_core.nth.$_invoke$3(vec$8461_$1, 0, null, ));
final dc.dynamic y$2=(lcoc_core.nth.$_invoke$3(vec$8461_$1, 1, null, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$3, )), (lcoc_core.list.$_invoke$1(op$1, )), (lcoc_core.list.$_invoke$1(y$2, )), ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}, (lcoc_core.partition.$_invoke$3(2, 1, (lcoc_core.take_nth.$_invoke$2(2, bindings$1, )), )), )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$1, $3, $2, ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), )), (lcoc_core.list.$_invoke$1(x$5, )), (lcoc_core.list.$_invoke$1(op$1, )), (lcoc_core.list.$_invoke$1(y$3, )), ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$4

// BEGIN Reify$40
class Reify$40 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final rrf$1;

const Reify$40(this.meta$1, this.rf$1, this.rrf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$40((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), (rrf$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic coll7370$1=input$1;
final dc.dynamic f7371$1=rrf$1;
final dc.dynamic start7372$1=result$2;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2((f7371$1 as dc.dynamic), (start7372$1 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), (f7371$1 as dc.dynamic), (start7372$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$40

// BEGIN Reify$41
class Reify$41 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile started$1;
final sep$1;

const Reify$41(this.meta$1, this.rf$1, this.started$1, this.sep$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$41((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), started$1, (sep$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic test$1=lcoc_core.deref(started$1, );
if(((test$1!=false)&&(test$1!=null))){
late final dc.dynamic sepr$1;
if((rf$1 is dc.Function)){
sepr$1=(rf$1 as dc.Function)(result$2, sep$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
sepr$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, sep$1, ));
}else{
sepr$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, sep$1, ));
}
if(lcoc_core.reduced$QMARK_(sepr$1, )){
return sepr$1;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(sepr$1, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(sepr$1, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, sepr$1, input$1, ));
}
lcoc_core.vreset$BANG_(started$1, true, );
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$41

// BEGIN Reify$42
class Reify$42 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final pred$1;

const Reify$42(this.meta$1, this.rf$1, this.pred$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$42((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), (pred$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic $if_$1;
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(input$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, input$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}
return result$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$42

// BEGIN Reify$43
class Reify$43 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final n$1;
final rf$1;
final dc.List<dc.dynamic> a$1;

const Reify$43(this.meta$1, this.n$1, this.rf$1, this.a$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$43((m$2101_$AUTO_$1 as dc.dynamic), (n$1 as dc.dynamic), (rf$1 as dc.dynamic), a$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
late final dc.dynamic result$2;
if(a$1.isEmpty){
result$2=result$1;
}else{
final lcoc_core.PersistentVector v$1=lcoc_core.vec(a$1, );
a$1.clear();
late final dc.dynamic $if_$1;
if((rf$1 is dc.Function)){
$if_$1=(rf$1 as dc.Function)(result$1, v$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
$if_$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$1, v$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$1, v$1, ));
}
result$2=lcoc_core.unreduced($if_$1, );
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$3, dc.dynamic input$1, ){
a$1.add((input$1 as dc.dynamic), );
if((n$1==a$1.length)){
final lcoc_core.PersistentVector v$2=lcoc_core.vec(a$1, );
a$1.clear();
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$3, v$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$3, v$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$3, v$2, ));
}
return result$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$43

// BEGIN Reify$44
class Reify$44 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile pv$1;
final dc.List<dc.dynamic> a$1;
final f$1;

const Reify$44(this.meta$1, this.rf$1, this.pv$1, this.a$1, this.f$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$44((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), pv$1, a$1, (f$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
late final dc.dynamic result$2;
if(a$1.isEmpty){
result$2=result$1;
}else{
final lcoc_core.PersistentVector v$1=lcoc_core.vec(a$1, );
a$1.clear();
late final dc.dynamic $if_$1;
if((rf$1 is dc.Function)){
$if_$1=(rf$1 as dc.Function)(result$1, v$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
$if_$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$1, v$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$1, v$1, ));
}
result$2=lcoc_core.unreduced($if_$1, );
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$3, dc.dynamic input$1, ){
final dc.dynamic pval$1=lcoc_core.deref(pv$1, );
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(input$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, input$1, ));
}
lcoc_core.vreset$BANG_(pv$1, val$1, );
final dc.bool or$7228_$AUTO_$1=dc.identical((pval$1 as dc.Object?), "none", );
late final dc.bool $if_$2;
if(or$7228_$AUTO_$1){
$if_$2=or$7228_$AUTO_$1;
}else{
$if_$2=(lcoc_core.$EQ_.$_invoke$2(val$1, pval$1, ));
}
if($if_$2){
a$1.add((input$1 as dc.dynamic), );
return result$3;
}
final lcoc_core.PersistentVector v$2=lcoc_core.vec(a$1, );
a$1.clear();
late final dc.dynamic ret$1;
if((rf$1 is dc.Function)){
ret$1=(rf$1 as dc.Function)(result$3, v$2, );
}else if((rf$1 is lcoc_core.IFn$iface)){
ret$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$3, v$2, ));
}else{
ret$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$3, v$2, ));
}
if(lcoc_core.reduced$QMARK_(ret$1, )){
}else{
a$1.add((input$1 as dc.dynamic), );
}
return ret$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$44

// BEGIN Reify$45
class Reify$45 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile pv$1;

const Reify$45(this.meta$1, this.rf$1, this.pv$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$45((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), pv$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
final dc.dynamic prior$1=lcoc_core.deref(pv$1, );
lcoc_core.vreset$BANG_(pv$1, input$1, );
if((lcoc_core.$EQ_.$_invoke$2(prior$1, input$1, ))){
return result$2;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$45

// BEGIN Reify$46
class Reify$46 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final lcoc_core.Volatile seen$1;

const Reify$46(this.meta$1, this.rf$1, this.seen$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$46((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), seen$1, );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
if(lcoc_core.contains$QMARK_(lcoc_core.deref(seen$1, ), input$1, )){
return result$2;
}
final lcoc_core.Volatile o7651$1=seen$1;
final lcoc_core.Volatile o7365$1=seen$1;
final dc.dynamic coll7355$1=(o7365$1.$_deref$0());
final dc.dynamic o7356$1=input$1;
late final dc.dynamic new_value7652$1;
if((coll7355$1 is lcoc_core.ICollection$iface)){
new_value7652$1=((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}else{
new_value7652$1=((lcoc_core.ICollection.extensions(coll7355$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$1, (o7356$1 as dc.dynamic), ));
}
o7651$1.$_vreset$BANG_$1(new_value7652$1, );
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$46

// BEGIN Reify$47
class Reify$47 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final rf$1;
final pred$2;
final retf$1;

const Reify$47(this.meta$1, this.rf$1, this.pred$2, this.retf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$47((m$2101_$AUTO_$1 as dc.dynamic), (rf$1 as dc.dynamic), (pred$2 as dc.dynamic), (retf$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)();
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$0(rf$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic result$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.map$QMARK_(result$1, );
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=lcoc_core.contains$QMARK_(result$1, const lcoc_core.Keyword("cljd.core", "halt", 3568259668, ), );
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
return (const lcoc_core.Keyword("cljd.core", "halt", 3568259668, ).$_invoke$1(result$1, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic result$2, dc.dynamic input$1, ){
late final dc.dynamic $if_$2;
if((pred$2 is dc.Function)){
$if_$2=(pred$2 as dc.Function)(input$1, );
}else if((pred$2 is lcoc_core.IFn$iface)){
$if_$2=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(input$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, input$1, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword("cljd.core", "halt", 3568259668, ), ));
late final dc.dynamic $if_$4;
if(((retf$1!=false)&&(retf$1!=null))){
late final dc.dynamic $if_$3;
if((rf$1 is dc.Function)){
$if_$3=(rf$1 as dc.Function)(result$2, );
}else if((rf$1 is lcoc_core.IFn$iface)){
$if_$3=((rf$1 as lcoc_core.IFn$iface).$_invoke$1(result$2, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, result$2, ));
}
if((retf$1 is dc.Function)){
$if_$4=(retf$1 as dc.Function)($if_$3, input$1, );
}else if((retf$1 is lcoc_core.IFn$iface)){
$if_$4=((retf$1 as lcoc_core.IFn$iface).$_invoke$2($if_$3, input$1, ));
}else{
$if_$4=(lcoc_core.IFn.extensions(retf$1, ).$_invoke$2(retf$1, $if_$3, input$1, ));
}
}else{
$if_$4=input$1;
}
fl$1[1]=$if_$4;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
return lcoc_core.reduced($1, );
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(result$2, input$1, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$2(result$2, input$1, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, result$2, input$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$47

// BEGIN Reify$48
class Reify$48 extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final f$2;
final cf$1;

const Reify$48(this.meta$1, this.f$2, this.cf$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$48((m$2101_$AUTO_$1 as dc.dynamic), (f$2 as dc.dynamic), (cf$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
if((f$2 is dc.Function)){
return (f$2 as dc.Function)();
}
if((f$2 is lcoc_core.IFn$iface)){
return ((f$2 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$2, ).$_invoke$0(f$2, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$1, ){
if((cf$1 is dc.Function)){
return (cf$1 as dc.Function)(x$1, );
}
if((cf$1 is lcoc_core.IFn$iface)){
return ((cf$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}
return (lcoc_core.IFn.extensions(cf$1, ).$_invoke$1(cf$1, x$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$1, ){
if((f$2 is dc.Function)){
return (f$2 as dc.Function)(x$2, y$1, );
}
if((f$2 is lcoc_core.IFn$iface)){
return ((f$2 as lcoc_core.IFn$iface).$_invoke$2(x$2, y$1, ));
}
return (lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, x$2, y$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$48

// BEGIN Reify$49
class Reify$49 extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final dc.List<dc.dynamic> buffer$1;

const Reify$49(this.meta$1, this.buffer$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$49((m$2101_$AUTO_$1 as dc.dynamic), buffer$1, );
}

dc.dynamic $_invoke$1(dc.dynamic acc$1, ){
return false;
}

dc.dynamic $_invoke$2(dc.dynamic acc$2, dc.dynamic x$1, ){
return (buffer$1.add((x$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$49

// BEGIN Reify$5
class Reify$5<V, K> extends dc.Object with d_collection.IterableMixin<dc.MapEntry<K, V>> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$1;
final lcoc_core.BitmapNode root;

const Reify$5(this.meta$1, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$5<V, K>((m$2101_$AUTO_$1 as dc.dynamic), root, );
}

dc.Iterator<dc.MapEntry<K, V>> get iterator{
return lcoc_core.BitmapIterator(root, 0, 0, 0, 1, (dc.List<dc.int>.filled(7, (root.bitmap_hi|root.bitmap_lo), )), (dc.List<lcoc_core.BitmapNode>.filled(7, root, )), (dc.dynamic p1$8522_$SHARP_$1, dc.dynamic p2$8523_$SHARP_$1, ){
return lcoc_core.PersistentMapEntry<K, V>((p1$8522_$SHARP_$1 as dc.dynamic), (p2$8523_$SHARP_$1 as dc.dynamic), -1, );
}, );
}
}

// END Reify$5

// BEGIN Reify$50
class Reify$50 extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final lcoc_core.Atom id$1;

const Reify$50(this.meta$1, this.id$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$50((m$2101_$AUTO_$1 as dc.dynamic), id$1, );
}

dc.dynamic $_invoke$0(){
if((lcoc_core.gensym is dc.Function)){
return (lcoc_core.gensym as dc.Function)("G__", );
}
if((lcoc_core.gensym is lcoc_core.IFn$iface)){
return ((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("G__", ));
}
return (lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "G__", ));
}

dc.dynamic $_invoke$1(dc.dynamic prefix_string$1, ){
return (lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2(prefix_string$1, (lcoc_core.swap$BANG_.$_invoke$2(id$1, lcoc_core.inc, )), )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$50

// BEGIN Reify$6
class Reify$6<V, K> extends dc.Object with d_collection.IterableMixin<K> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$2;
final lcoc_core.BitmapNode root;

const Reify$6(this.meta$2, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.Reify$6<V, K>((m$2101_$AUTO_$2 as dc.dynamic), root, );
}

dc.Iterator<K> get iterator{
return lcoc_core.BitmapIterator(root, 0, 0, 0, 1, (dc.List<dc.int>.filled(7, (root.bitmap_hi|root.bitmap_lo), )), (dc.List<lcoc_core.BitmapNode>.filled(7, root, )), (dc.dynamic k$2, dc.dynamic $UNDERSCORE_$1, ){
return k$2;
}, );
}
}

// END Reify$6

// BEGIN Reify$7
class Reify$7<V, K> extends dc.Object with d_collection.IterableMixin<V> implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface {
final meta$3;
final lcoc_core.BitmapNode root;

const Reify$7(this.meta$3, this.root, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$3, ){
return lcoc_core.Reify$7<V, K>((m$2101_$AUTO_$3 as dc.dynamic), root, );
}

dc.Iterator<V> get iterator{
return lcoc_core.BitmapIterator(root, 0, 0, 0, 1, (dc.List<dc.int>.filled(7, (root.bitmap_hi|root.bitmap_lo), )), (dc.List<lcoc_core.BitmapNode>.filled(7, root, )), (dc.dynamic $UNDERSCORE_$2, dc.dynamic v$1, ){
return v$1;
}, );
}
}

// END Reify$7

// BEGIN Reify$8
class Reify$8 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final f$3;
final g$2;

const Reify$8(this.meta$1, this.f$3, this.g$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$8((m$2101_$AUTO_$1 as dc.dynamic), (f$3 as dc.dynamic), (g$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic arg$25=(lcoc_core.apply.$_invoke$5(g$2, x$1, y$1, z$1, args$1, ));
if((f$3 is dc.Function)){
return (f$3 as dc.Function)(arg$25, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1(arg$25, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, arg$25, ));
}

dc.dynamic $_invoke$0(){
late final dc.dynamic $if_$9;
if((g$2 is dc.Function)){
$if_$9=(g$2 as dc.Function)();
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$9=((g$2 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$9=(lcoc_core.IFn.extensions(g$2, ).$_invoke$0(g$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$9, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$9, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$9, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
late final dc.dynamic $if_$10;
if((g$2 is dc.Function)){
$if_$10=(g$2 as dc.Function)(x$2, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$10=((g$2 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}else{
$if_$10=(lcoc_core.IFn.extensions(g$2, ).$_invoke$1(g$2, x$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$10, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$10, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$10, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.dynamic $if_$11;
if((g$2 is dc.Function)){
$if_$11=(g$2 as dc.Function)(x$3, y$2, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$11=((g$2 as lcoc_core.IFn$iface).$_invoke$2(x$3, y$2, ));
}else{
$if_$11=(lcoc_core.IFn.extensions(g$2, ).$_invoke$2(g$2, x$3, y$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$11, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$11, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$11, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
late final dc.dynamic $if_$12;
if((g$2 is dc.Function)){
$if_$12=(g$2 as dc.Function)(x$4, y$3, z$2, );
}else if((g$2 is lcoc_core.IFn$iface)){
$if_$12=((g$2 as lcoc_core.IFn$iface).$_invoke$3(x$4, y$3, z$2, ));
}else{
$if_$12=(lcoc_core.IFn.extensions(g$2, ).$_invoke$3(g$2, x$4, y$3, z$2, ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$12, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$12, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$12, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$8

// BEGIN Reify$9
class Reify$9 extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final more$1;
final f$1;
final arg3$1;
final arg1$1;
final arg2$1;

const Reify$9(this.meta$1, this.more$1, this.f$1, this.arg3$1, this.arg1$1, this.arg2$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.Reify$9((m$2101_$AUTO_$1 as dc.dynamic), (more$1 as dc.dynamic), (f$1 as dc.dynamic), (arg3$1 as dc.dynamic), (arg1$1 as dc.dynamic), (arg2$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic args$1, ){
return (lcoc_core.apply.$_invoke$5(f$1, arg1$1, arg2$1, arg3$1, (lcoc_core.concat.$_invoke$2(more$1, args$1, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Reify$9

// BEGIN SeqListMixin
abstract class SeqListMixin<E> extends dc.Object implements lcoc_core.IPrint$iface, dc.List<E>, lcoc_core.IIndexed$iface {

dc.String toString(){
final dc.StringBuffer sb$1=dc.StringBuffer();
final lcoc_core.SeqListMixin<E> o7290$1=this;
final dc.StringBuffer string_sink7291$1=sb$1;
o7290$1.$_print$1(string_sink7291$1, );
return (sb$1.toString());
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("(", ")", this, sink$1, );
}

set length(dc.int val$1, ){
throw dc.UnsupportedError("lenght= not supported on Cons", );
}

void add(E $UNDERSCORE_$1, ){
throw dc.UnsupportedError("add not supported on Cons", );
}

void operator []=(dc.int index$1, E value$1, ){
throw dc.UnsupportedError("[]= not supported on Cons", );
}

E operator [](dc.int idx$1, ){
final lcoc_core.SeqListMixin<E> coll7481$1=this;
final dc.int n7482$1=idx$1;
return (coll7481$1.$_nth$1(n7482$1, ));
}

dc.int get length{
final lcoc_core.SeqListMixin<E> coll7390$1=this;
if((coll7390$1 is lcoc_core.ICounted$iface)){
return ((coll7390$1 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions(coll7390$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7390$1, ));
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
if((0>(n$1 as dc.num))){
throw dc.ArgumentError("Index out of bounds", );
}
final lcoc_core.SeqListMixin<E> o7310$1=this;
dc.dynamic xs$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
dc.int i$1=(n$1 as dc.int);
do {
if((null==(xs$1 as dc.dynamic))){
throw dc.ArgumentError("Index out of bounds", );
}
if((0==i$1)){
return lcoc_core.first(xs$1, );
}
xs$1=lcoc_core.next(xs$1, );
i$1=(i$1-1);
continue;
} while(true);
}

dc.dynamic $_nth$2(dc.dynamic n$2, dc.dynamic not_found$1, ){
if((0>(n$2 as dc.num))){
return not_found$1;
}
final lcoc_core.SeqListMixin<E> o7310$2=this;
dc.dynamic xs$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
xs$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$2=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
dc.int i$2=(n$2 as dc.int);
do {
if((null==(xs$2 as dc.dynamic))){
return not_found$1;
}
if((0==i$2)){
return lcoc_core.first(xs$2, );
}
xs$2=lcoc_core.next(xs$2, );
i$2=(i$2-1);
continue;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END SeqListMixin

// BEGIN StringSeq
class StringSeq<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E> implements lcoc_core.ISeqable$iface, lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.ISeq$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.IReduce$iface {
final dc.String string;
final dc.int i;
final meta;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

StringSeq(this.string, this.i, this.meta, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

lcoc_core.StringSeq<R> cast<R>(){
return lcoc_core.StringSeq<R>(string, i, (meta as dc.dynamic), $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_seq$0(){
if((i<string.length)){
return this;
}
return null;
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.StringSeq(string, i, (new_meta$1 as dc.dynamic), -1, );
}

dc.dynamic $_first$0(){
return (string[i]);
}

dc.dynamic $_rest$0(){
if(((1+i)<string.length)){
return lcoc_core.StringSeq(string, (1+i), null, -1, );
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_next$0(){
if(((1+i)<string.length)){
return lcoc_core.StringSeq(string, (1+i), null, -1, );
}
return null;
}

dc.dynamic $_count$0(){
return (string.length-i);
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
final dc.int n$2=(n$1 as dc.int);
if((n$2<0)){
throw dc.ArgumentError("Index out of bounds", );
}
final dc.int i$1=(n$2+i);
if((i$1<string.length)){
return (string[i$1]);
}
throw dc.ArgumentError("Index out of bounds", );
}

dc.dynamic $_nth$2(dc.dynamic n$3, dc.dynamic not_found$1, ){
final dc.int n$4=(n$3 as dc.int);
if((n$4<0)){
return not_found$1;
}
final dc.int i$2=(n$4+i);
if((i$2<string.length)){
return (string[i$2]);
}
return not_found$1;
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
return lcoc_core.cons(o$1, this, );
}

dc.dynamic $_empty$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
final dc.int l$1=string.length;
final dc.String x$1=(string[i]);
final dc.int i$PRIME_$1=(1+i);
if((i$PRIME_$1<l$1)){
dc.dynamic acc$1=x$1;
dc.int idx$1=i$PRIME_$1;
do {
if((idx$1<l$1)){
final dc.String arg$1=(string[idx$1]);
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(acc$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, acc$1, arg$1, ));
}
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
acc$1=val$1;
idx$1=(1+idx$1);
continue;
}
return acc$1;
} while(true);
}else{
return x$1;
}
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic start$1, ){
final dc.int l$2=string.length;
dc.dynamic acc$2=start$1;
dc.int idx$2=i;
do {
if((idx$2<l$2)){
final dc.String arg$2=(string[idx$2]);
late final dc.dynamic val$2;
if((f$2 is dc.Function)){
val$2=(f$2 as dc.Function)(acc$2, arg$2, );
}else if((f$2 is lcoc_core.IFn$iface)){
val$2=((f$2 as lcoc_core.IFn$iface).$_invoke$2(acc$2, arg$2, ));
}else{
val$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, acc$2, arg$2, ));
}
if(lcoc_core.reduced$QMARK_(val$2, )){
return lcoc_core.deref(val$2, );
}
acc$2=val$2;
idx$2=(1+idx$2);
continue;
}
return acc$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END StringSeq

// BEGIN SubVec
class SubVec<E> extends dc.Object with lcoc_core.EquivSequentialHashMixin, d_collection.ListMixin<E>, lcoc_core.SeqListMixin<E>, lcoc_core.ToStringMixin implements lcoc_core.IPrint$iface, lcoc_core.IWithMeta$iface, lcoc_core.IMeta$iface, lcoc_core.IStack$iface, lcoc_core.ICollection$iface, lcoc_core.IEmptyableCollection$iface, lcoc_core.ISeqable$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ILookup$iface, lcoc_core.IAssociative$iface, lcoc_core.IFind$iface, lcoc_core.IVector$iface, lcoc_core.IReduce$iface, lcoc_core.IKVReduce$iface, lcoc_core.IFn$iface, dc.Comparable, lcoc_core.ISubvecable$iface {
final meta;
final lcoc_core.PersistentVector v;
final dc.int start;
final dc.int end;
dc.int $UNDERSCORE_$UNDERSCORE_hash;

SubVec(this.meta, this.v, this.start, this.end, this.$UNDERSCORE_$UNDERSCORE_hash, ):super();

dc.Iterator<E> get iterator{
if((v is lcoc_core.PersistentMapEntry)){
late final dc.List<dc.dynamic> $if_$1;
if((end==start)){
$if_$1=(dc.List<dc.dynamic>.empty());
}else if((0<start)){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(1, lcoc_core.val(v, ), ));
$if_$1=fl$1;
}else if((1==end)){
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(1, lcoc_core.key(v, ), ));
$if_$1=fl$2;
}else{
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, lcoc_core.key(v, ), ));
fl$3[1]=lcoc_core.val(v, );
$if_$1=fl$3;
}
final dc.List<E> $1=($if_$1.cast<E>());
return $1.iterator;
}
late final dc.List $if_$2;
if((((v.cnt-1)&(~31))<=start)){
$if_$2=v.tail;
}else{
$if_$2=lcoc_core.unchecked_array_for(v.root, v.shift, start, );
}
return lcoc_core.PVIterator(v, start, end, $if_$2, );
}

lcoc_core.SubVec<R> cast<R>(){
return lcoc_core.SubVec<R>((meta as dc.dynamic), v, start, end, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_print$1(dc.dynamic sink$1, ){
return lcoc_core.print_sequential("[", "]", this, sink$1, );
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.SubVec((new_meta$1 as dc.dynamic), v, start, end, $UNDERSCORE_$UNDERSCORE_hash, );
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_peek$0(){
if((start<end)){
final lcoc_core.PersistentVector coll7481$1=v;
final dc.int n7482$1=(end-1);
return (coll7481$1.$_nth$1(n7482$1, ));
}
return null;
}

dc.dynamic $_pop$0(){
if((start<end)){
return lcoc_core.SubVec((meta as dc.dynamic), v, start, (end-1), -1, );
}
throw dc.Exception("Can't pop empty vector", );
}

dc.dynamic $_conj$1(dc.dynamic o$1, ){
final dc.dynamic arg$1=(meta as dc.dynamic);
final lcoc_core.PersistentVector coll7426$1=v;
final dc.int n7427$1=end;
final dc.dynamic val7428$1=o$1;
final lcoc_core.PersistentVector cast$1=((coll7426$1.$_assoc_n$2(n7427$1, (val7428$1 as dc.dynamic), )) as lcoc_core.PersistentVector);
return lcoc_core.SubVec(arg$1, cast$1, start, (1+end), -1, );
}

dc.dynamic $_empty$0(){
final lcoc_core.PersistentVector o7517$1=lcoc_core.$_EMPTY_VECTOR;
final dc.dynamic meta7518$1=meta;
return (o7517$1.$_with_meta$1((meta7518$1 as dc.dynamic), ));
}

dc.dynamic $_seq$0(){
return lcoc_core.iterator_seq(this.iterator, );
}

dc.dynamic $_count$0(){
return (end-start);
}

dc.dynamic $_nth$1(dc.dynamic n$1, ){
final dc.num i$1=(start+(n$1 as dc.num));
final dc.bool or$7228_$AUTO_$1=(end<=i$1);
late final dc.bool $if_$3;
if(or$7228_$AUTO_$1){
$if_$3=or$7228_$AUTO_$1;
}else{
$if_$3=((n$1 as dc.num)<0);
}
if($if_$3){
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("No item ", n$1, " in vector of length ", (end-start), )), );
}
final lcoc_core.PersistentVector coll7481$2=v;
final dc.num n7482$2=i$1;
return (coll7481$2.$_nth$1(n7482$2, ));
}

dc.dynamic $_nth$2(dc.dynamic n$2, dc.dynamic not_found$1, ){
final dc.num i$2=(start+(n$2 as dc.num));
final dc.bool or$7228_$AUTO_$2=(end<=i$2);
late final dc.bool $if_$4;
if(or$7228_$AUTO_$2){
$if_$4=or$7228_$AUTO_$2;
}else{
$if_$4=((n$2 as dc.int)<0);
}
if($if_$4){
return not_found$1;
}
final lcoc_core.PersistentVector coll7477$1=v;
final dc.num n7478$1=i$2;
final dc.dynamic not_found7479$1=not_found$1;
return (coll7477$1.$_nth$2(n7478$1, (not_found7479$1 as dc.dynamic), ));
}

dc.dynamic $_lookup$1(dc.dynamic k$1, ){
final lcoc_core.SubVec<E> o7486$1=this;
final dc.dynamic k7487$1=k$1;
final dc.Null not_found7488$1=null;
return (o7486$1.$_lookup$2((k7487$1 as dc.dynamic), not_found7488$1, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$2, dc.dynamic not_found$2, ){
if((k$2 is dc.int)){
final lcoc_core.SubVec<E> coll7477$2=this;
final dc.dynamic n7478$2=k$2;
final dc.dynamic not_found7479$2=not_found$2;
return (coll7477$2.$_nth$2((n7478$2 as dc.dynamic), (not_found7479$2 as dc.dynamic), ));
}
return not_found$2;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$3, ){
if((k$3 is dc.int)){
final dc.bool and$7187_$AUTO_$1=(0<=(k$3 as dc.num));
if(and$7187_$AUTO_$1){
return ((start+(k$3 as dc.num))<end);
}
return and$7187_$AUTO_$1;
}
return false;
}

dc.dynamic $_assoc$2(dc.dynamic k$4, dc.dynamic v$1, ){
if((k$4 is dc.int)){
final lcoc_core.SubVec<E> coll7426$2=this;
final dc.dynamic n7427$2=k$4;
final dc.dynamic val7428$2=v$1;
return (coll7426$2.$_assoc_n$2((n7427$2 as dc.dynamic), (val7428$2 as dc.dynamic), ));
}
throw dc.ArgumentError("Vector's key for assoc must be a number.", );
}

dc.dynamic $_find$1(dc.dynamic n$3, ){
final lcoc_core.SubVec<E> o7486$2=this;
final dc.dynamic k7487$2=n$3;
final dc.Null not_found7488$2=null;
final dc.dynamic temp$7205_$AUTO_$1=(o7486$2.$_lookup$2((k7487$2 as dc.dynamic), not_found7488$2, ));
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.dynamic v$PRIME_$1=temp$7205_$AUTO_$1;
return lcoc_core.PersistentMapEntry<dc.int, E>((n$3 as dc.dynamic), v$PRIME_$1, -1, );
}

dc.dynamic $_assoc_n$2(dc.dynamic n$4, dc.dynamic val$1, ){
final dc.int n$5=(n$4 as dc.int);
final dc.int i$3=(start+n$5);
final dc.bool or$7228_$AUTO_$3=(end<i$3);
late final dc.bool $if_$5;
if(or$7228_$AUTO_$3){
$if_$5=or$7228_$AUTO_$3;
}else{
$if_$5=(n$5<0);
}
if($if_$5){
throw dc.ArgumentError((lcoc_core.str.$_invoke$5("Index ", n$5, " out of bounds  [0,", (end-start), "]", )), );
}
final dc.dynamic arg$2=(meta as dc.dynamic);
final lcoc_core.PersistentVector coll7440$1=v;
final dc.int k7441$1=i$3;
final dc.dynamic v7442$1=val$1;
final lcoc_core.PersistentVector cast$2=((coll7440$1.$_assoc$2(k7441$1, (v7442$1 as dc.dynamic), )) as lcoc_core.PersistentVector);
return lcoc_core.SubVec(arg$2, cast$2, start, (d_math.max<dc.num>(end, (1+i$3), ) as dc.int), -1, );
}

dc.dynamic $_reduce$1(dc.dynamic f$1, ){
if((start<end)){
final dc.int arg$3=(1+start);
final lcoc_core.PersistentVector coll7481$3=v;
final dc.int n7482$3=start;
final dc.dynamic $2=(coll7481$3.$_nth$1(n7482$3, ));
return (lcoc_core.pv_reduce.$_invoke$5(v, f$1, arg$3, end, $2, ));
}
if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}

dc.dynamic $_reduce$2(dc.dynamic f$2, dc.dynamic init$1, ){
return (lcoc_core.pv_reduce.$_invoke$5(v, f$2, start, end, init$1, ));
}

dc.dynamic $_kv_reduce$2(dc.dynamic f$3, dc.dynamic init$2, ){
return lcoc_core.pv_kv_reduce(v, f$3, start, end, init$2, );
}

dc.dynamic $_invoke$1(dc.dynamic k$5, ){
final lcoc_core.SubVec<E> coll7481$4=this;
final dc.dynamic n7482$4=k$5;
return (coll7481$4.$_nth$1((n7482$4 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic k$6, dc.dynamic not_found$3, ){
final lcoc_core.SubVec<E> coll7477$3=this;
final dc.dynamic n7478$3=k$6;
final dc.dynamic not_found7479$3=not_found$3;
return (coll7477$3.$_nth$2((n7478$3 as dc.dynamic), (not_found7479$3 as dc.dynamic), ));
}

dc.int compareTo(dc.dynamic y$1, ){
if(lcoc_core.vector$QMARK_(y$1, )){
return lcoc_core.compare_indexed(this, y$1, );
}
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("Cannot compare ", this, " to ", y$1, )), );
}

dc.dynamic $_subvec$2(dc.dynamic start1$1, dc.dynamic end1$1, ){
return lcoc_core.SubVec(null, v, (start+(start1$1 as dc.int)), (start+(end1$1 as dc.int)), -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END SubVec

// BEGIN Symbol
class Symbol extends dc.Object with lcoc_core.ToStringMixin, lcoc_core.EqualsEquivMixin implements lcoc_core.IPrint$iface, lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.INamed$iface, lcoc_core.IFn$iface, lcoc_core.IEquiv$iface, lcoc_core.IHash$iface, dc.Comparable<lcoc_core.Symbol> {
final dc.String? ns;
final dc.String name;
final meta;
dc.int $UNDERSCORE_hash;

Symbol(this.ns, this.name, this.meta, this.$UNDERSCORE_hash, ):super();

dc.dynamic $_print$1(dc.dynamic sink$1, ){
final dc.StringSink sink$2=(sink$1 as dc.StringSink);
if((ns!=null)){
sink$2.write(ns, );
sink$2.write("/", );
}else{
}
return (sink$2.write(name, ));
}

dc.dynamic $_meta$0(){
return meta;
}

dc.dynamic $_with_meta$1(dc.dynamic new_meta$1, ){
if(dc.identical((new_meta$1 as dc.Object?), (meta as dc.Object?), )){
return this;
}
return lcoc_core.Symbol(ns, name, (new_meta$1 as dc.dynamic), $UNDERSCORE_hash, );
}

dc.dynamic $_name$0(){
return name;
}

dc.dynamic $_namespace$0(){
return ns;
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.$get_.$_invoke$2(coll$1, this, ));
}

dc.dynamic $_invoke$2(dc.dynamic coll$2, dc.dynamic not_found$1, ){
return (lcoc_core.$get_.$_invoke$3(coll$2, this, not_found$1, ));
}

dc.dynamic $_equiv$1(dc.dynamic other$1, ){
final dc.bool and$7187_$AUTO_$1=(other$1 is lcoc_core.Symbol);
if(and$7187_$AUTO_$1){
final lcoc_core.Symbol other$2=(other$1 as lcoc_core.Symbol);
final dc.bool and$7187_$AUTO_$2=(ns==other$2.ns);
if(and$7187_$AUTO_$2){
return (name==other$2.name);
}
return and$7187_$AUTO_$2;
}
return and$7187_$AUTO_$1;
}

dc.dynamic $_hash$0(){
final dc.int h$7900_$AUTO_$1=$UNDERSCORE_hash;
if((h$7900_$AUTO_$1<0)){
final dc.int h$7900_$AUTO_$2=lcoc_core.hash_symbol(this, );
$UNDERSCORE_hash=h$7900_$AUTO_$2;
return h$7900_$AUTO_$2;
}
return h$7900_$AUTO_$1;
}

dc.int compareTo(lcoc_core.Symbol y$1, ){
final dc.String? nsy$1=y$1.ns;
if((lcoc_core.$EQ_.$_invoke$2(this, y$1, ))){
return 0;
}
final dc.bool and$7187_$AUTO_$3=(null==ns);
late final dc.Object? $if_$1;
if(and$7187_$AUTO_$3){
$if_$1=nsy$1;
}else{
$if_$1=and$7187_$AUTO_$3;
}
if((($if_$1!=false)&&($if_$1!=null))){
return -1;
}
if((ns!=null)){
if((null==nsy$1)){
return 1;
}
final dc.int nsc$1=((ns as dc.String).compareTo((nsy$1 as dc.String), ));
if((0==nsc$1)){
return (name.compareTo(y$1.name, ));
}
return nsc$1;
}
return (name.compareTo(y$1.name, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Symbol

// BEGIN ToStringMixin
abstract class ToStringMixin extends dc.Object {

dc.String toString(){
final dc.StringBuffer sb$1=dc.StringBuffer();
final lcoc_core.ToStringMixin o7290$1=this;
final dc.StringBuffer string_sink7291$1=sb$1;
if((o7290$1 is lcoc_core.IPrint$iface)){
(o7290$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7291$1, );
}else{
(lcoc_core.IPrint.extensions(o7290$1, ) as lcoc_core.IPrint$ext).$_print$1(o7290$1, string_sink7291$1, );
}
return (sb$1.toString());
}
}

// END ToStringMixin

// BEGIN TransientHashMap
class TransientHashMap extends dc.Object implements lcoc_core.ITransientCollection$iface, lcoc_core.ITransientAssociative$iface, lcoc_core.ITransientMap$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.IFn$iface {
dc.bool editable;
lcoc_core.BitmapNode root;

TransientHashMap(this.editable, this.root, ):super();

dc.dynamic $_conj$BANG_$1(dc.dynamic o$1, ){
if(editable){
}else{
throw dc.ArgumentError("conj! after persistent!", );
}
if(lcoc_core.map_entry$QMARK_(o$1, )){
final lcoc_core.TransientHashMap tcoll7452$1=this;
final dc.dynamic coll7553$1=o$1;
late final dc.dynamic key7453$1;
if((coll7553$1 is lcoc_core.IMapEntry$iface)){
key7453$1=((coll7553$1 as lcoc_core.IMapEntry$iface).$_key$0());
}else{
key7453$1=((lcoc_core.IMapEntry.extensions((coll7553$1 as dc.dynamic), ) as lcoc_core.IMapEntry$ext).$_key$0((coll7553$1 as dc.dynamic), ));
}
final dc.dynamic coll7558$1=o$1;
late final dc.dynamic val7454$1;
if((coll7558$1 is lcoc_core.IMapEntry$iface)){
val7454$1=((coll7558$1 as lcoc_core.IMapEntry$iface).$_val$0());
}else{
val7454$1=((lcoc_core.IMapEntry.extensions((coll7558$1 as dc.dynamic), ) as lcoc_core.IMapEntry$ext).$_val$0((coll7558$1 as dc.dynamic), ));
}
return (tcoll7452$1.$_assoc$BANG_$2(key7453$1, val7454$1, ));
}
if(lcoc_core.vector$QMARK_(o$1, )){
final lcoc_core.TransientHashMap tcoll7452$2=this;
final dc.dynamic coll7481$1=o$1;
final dc.int n7482$1=0;
late final dc.dynamic key7453$2;
if((coll7481$1 is lcoc_core.IIndexed$iface)){
key7453$2=((coll7481$1 as lcoc_core.IIndexed$iface).$_nth$1(n7482$1, ));
}else{
key7453$2=((lcoc_core.IIndexed.extensions((coll7481$1 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$1 as dc.dynamic), n7482$1, ));
}
final dc.dynamic coll7481$2=o$1;
final dc.int n7482$2=1;
late final dc.dynamic val7454$2;
if((coll7481$2 is lcoc_core.IIndexed$iface)){
val7454$2=((coll7481$2 as lcoc_core.IIndexed$iface).$_nth$1(n7482$2, ));
}else{
val7454$2=((lcoc_core.IIndexed.extensions((coll7481$2 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$2 as dc.dynamic), n7482$2, ));
}
return (tcoll7452$2.$_assoc$BANG_$2(key7453$2, val7454$2, ));
}
final dc.dynamic coll7370$1=o$1;
final dc.Function f7371$1=lcoc_core.$_conj$BANG_;
final lcoc_core.TransientHashMap start7372$1=this;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_persistent$BANG_$0(){
if(editable){
}else{
throw dc.ArgumentError("persistent! called twice", );
}
editable=false;
return lcoc_core.PersistentHashMap(null, root, -1, );
}

dc.dynamic $_assoc$BANG_$2(dc.dynamic k$1, dc.dynamic v$1, ){
if(editable){
}else{
throw dc.ArgumentError("assoc! after persistent!", );
}
final dc.dynamic o7533$1=k$1;
late final dc.int cast$1;
if((o7533$1 is lcoc_core.IHash$iface)){
cast$1=(((o7533$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), )) as dc.int);
}
root=(root.inode_assoc_transient(0, cast$1, (k$1 as dc.dynamic), (v$1 as dc.dynamic), ));
return this;
}

dc.dynamic $_dissoc$BANG_$1(dc.dynamic k$2, ){
if(editable){
}else{
throw dc.ArgumentError("dissoc! after persistent!", );
}
final dc.dynamic o7533$2=k$2;
late final dc.int cast$2;
if((o7533$2 is lcoc_core.IHash$iface)){
cast$2=(((o7533$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions((o7533$2 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$2 as dc.dynamic), )) as dc.int);
}
root=(root.inode_without_transient(0, cast$2, (k$2 as dc.dynamic), ));
return this;
}

dc.dynamic $_count$0(){
if(editable){
}else{
throw dc.ArgumentError("count after persistent!", );
}
return root.cnt;
}

dc.dynamic $_lookup$1(dc.dynamic k$3, ){
if(editable){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
final lcoc_core.TransientHashMap o7486$1=this;
final dc.dynamic k7487$1=k$3;
final dc.Null not_found7488$1=null;
return (o7486$1.$_lookup$2((k7487$1 as dc.dynamic), not_found7488$1, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$4, dc.dynamic not_found$1, ){
if(editable){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
return (root.inode_lookup((k$4 as dc.dynamic), (not_found$1 as dc.dynamic), ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$5, ){
if(editable){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
if(dc.identical(root, (root.inode_lookup((k$5 as dc.dynamic), root, )), )){
return false;
}
return true;
}

dc.dynamic $_invoke$1(dc.dynamic k$6, ){
final lcoc_core.TransientHashMap o7490$1=this;
final dc.dynamic k7491$1=k$6;
return (o7490$1.$_lookup$1((k7491$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic k$7, dc.dynamic not_found$2, ){
final lcoc_core.TransientHashMap o7486$2=this;
final dc.dynamic k7487$2=k$7;
final dc.dynamic not_found7488$2=not_found$2;
return (o7486$2.$_lookup$2((k7487$2 as dc.dynamic), (not_found7488$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TransientHashMap

// BEGIN TransientHashSet
class TransientHashSet extends dc.Object implements lcoc_core.ITransientCollection$iface, lcoc_core.ITransientSet$iface, lcoc_core.ICounted$iface, lcoc_core.ILookup$iface, lcoc_core.IFn$iface {
lcoc_core.TransientHashMap transient_map;

TransientHashSet(this.transient_map, ):super();

dc.dynamic $_conj$BANG_$1(dc.dynamic o$1, ){
transient_map=(lcoc_core.assoc$BANG_.$_invoke$3(transient_map, o$1, o$1, ));
return this;
}

dc.dynamic $_persistent$BANG_$0(){
return lcoc_core.PersistentHashSet(null, (lcoc_core.persistent$BANG_(transient_map, ) as lcoc_core.PersistentHashMap<dc.dynamic, dc.dynamic>), -1, );
}

dc.dynamic $_disjoin$BANG_$1(dc.dynamic v$1, ){
transient_map=(lcoc_core.dissoc$BANG_.$_invoke$2(transient_map, v$1, ));
return this;
}

dc.dynamic $_count$0(){
final lcoc_core.TransientHashMap coll7390$1=transient_map;
return ((coll7390$1.$_count$0()) as dc.int);
}

dc.dynamic $_lookup$1(dc.dynamic v$2, ){
final lcoc_core.TransientHashSet o7486$1=this;
final dc.dynamic k7487$1=v$2;
final dc.Null not_found7488$1=null;
return (o7486$1.$_lookup$2((k7487$1 as dc.dynamic), not_found7488$1, ));
}

dc.dynamic $_lookup$2(dc.dynamic v$3, dc.dynamic not_found$1, ){
final lcoc_core.TransientHashMap o7486$2=transient_map;
final dc.dynamic k7487$2=v$3;
final dc.dynamic not_found7488$2=not_found$1;
return (o7486$2.$_lookup$2((k7487$2 as dc.dynamic), (not_found7488$2 as dc.dynamic), ));
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic k$1, ){
final lcoc_core.TransientHashMap o7495$1=transient_map;
final dc.dynamic k7496$1=k$1;
return (o7495$1.$_contains_key$QMARK_$1((k7496$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$1(dc.dynamic k$2, ){
final lcoc_core.TransientHashSet o7486$3=this;
final dc.dynamic k7487$3=k$2;
final dc.Null not_found7488$3=null;
return (o7486$3.$_lookup$2((k7487$3 as dc.dynamic), not_found7488$3, ));
}

dc.dynamic $_invoke$2(dc.dynamic k$3, dc.dynamic not_found$2, ){
final lcoc_core.TransientHashSet o7486$4=this;
final dc.dynamic k7487$4=k$3;
final dc.dynamic not_found7488$4=not_found$2;
return (o7486$4.$_lookup$2((k7487$4 as dc.dynamic), (not_found7488$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TransientHashSet

// BEGIN TransientVector
class TransientVector extends dc.Object implements lcoc_core.ITransientCollection$iface, lcoc_core.ITransientAssociative$iface, lcoc_core.ITransientVector$iface, lcoc_core.ICounted$iface, lcoc_core.IIndexed$iface, lcoc_core.ILookup$iface, lcoc_core.IFn$iface {
dc.int cnt;
dc.int shift;
dc.dynamic edit;
lcoc_core.VectorNode root;
dc.List tail;

TransientVector(this.cnt, this.shift, this.edit, this.root, this.tail, ):super();

dc.dynamic $_conj$BANG_$1(dc.dynamic o$1, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("conj! after persistent!", );
}
final dc.int tail_len$1=(cnt&31);
final dc.bool or$7228_$AUTO_$1=(0<tail_len$1);
late final dc.bool $if_$1;
if(or$7228_$AUTO_$1){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=(0==cnt);
}
if($if_$1){
final dc.dynamic v$7774_$AUTO_$1=o$1;
tail[tail_len$1]=(v$7774_$AUTO_$1 as dc.dynamic);
}else{
final lcoc_core.VectorNode tail_node$1=lcoc_core.VectorNode((edit as dc.dynamic), tail, );
final dc.List<dc.dynamic> new_tail$1=(dc.List<dc.dynamic>.filled(32, null, ));
final dc.dynamic v$7774_$AUTO_$2=o$1;
new_tail$1[0]=(v$7774_$AUTO_$2 as dc.dynamic);
tail=new_tail$1;
if(((4294967295&(1<<(31&shift)))<(cnt>>(31&5)))){
final dc.List<dc.dynamic> new_root_array$1=(dc.List<dc.dynamic>.filled(32, null, ));
final dc.int new_shift$1=(shift+5);
final lcoc_core.VectorNode v$7774_$AUTO_$3=root;
new_root_array$1[0]=v$7774_$AUTO_$3;
final lcoc_core.VectorNode v$7774_$AUTO_$4=lcoc_core.tv_new_path(edit, shift, tail_node$1, );
new_root_array$1[1]=v$7774_$AUTO_$4;
root=lcoc_core.VectorNode((edit as dc.dynamic), new_root_array$1, );
shift=new_shift$1;
}else{
root=lcoc_core.tv_push_tail(this, shift, root, tail_node$1, );
}
}
cnt=(1+cnt);
return this;
}

dc.dynamic $_persistent$BANG_$0(){
if((edit!=null)){
}else{
throw dc.ArgumentError("persistent! called twice", );
}
edit=null;
final dc.int cnt32$1=(cnt&31);
if((0<cnt32$1)){
return lcoc_core.PersistentVector(null, cnt, shift, root, lcoc_core.ashrink(tail, cnt32$1, ), -1, );
}
if((0==cnt)){
return lcoc_core.$_EMPTY_VECTOR;
}
return lcoc_core.PersistentVector(null, cnt, shift, root, tail, -1, );
}

dc.dynamic $_assoc$BANG_$2(dc.dynamic key$1, dc.dynamic val$1, ){
if((key$1 is dc.int)){
}else{
throw dc.ArgumentError("TransientVector's key for assoc! must be a number.", );
}
final lcoc_core.TransientVector tcoll7459$1=this;
final dc.dynamic n7460$1=key$1;
final dc.dynamic val7461$1=val$1;
return (tcoll7459$1.$_assoc_n$BANG_$2((n7460$1 as dc.dynamic), (val7461$1 as dc.dynamic), ));
}

dc.dynamic $_assoc_n$BANG_$2(dc.dynamic n$1, dc.dynamic val$2, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("assoc! after persistent!", );
}
final dc.bool and$7187_$AUTO_$1=(0<=(n$1 as dc.num));
late final dc.bool $if_$2;
if(and$7187_$AUTO_$1){
$if_$2=((n$1 as dc.num)<=cnt);
}else{
$if_$2=and$7187_$AUTO_$1;
}
if($if_$2){
}else{
throw dc.ArgumentError((lcoc_core.str.$_invoke$5("Index ", n$1, " out of bounds  [0,", cnt, "]", )), );
}
if((n$1==cnt)){
final lcoc_core.TransientVector tcoll7568$1=this;
final dc.dynamic val7569$1=val$2;
tcoll7568$1.$_conj$BANG_$1((val7569$1 as dc.dynamic), );
}else if((((cnt-1)&(~31))<=(n$1 as dc.num))){
final dc.dynamic v$7774_$AUTO_$5=val$2;
tail[((n$1 as dc.int)&31)]=(v$7774_$AUTO_$5 as dc.dynamic);
}else{
root=lcoc_core.tv_ensure_editable(edit, root, );
dc.List arr$1=root.arr;
dc.int level$1=shift;
do {
final dc.int subidx$1=(((n$1 as dc.int)>>(31&shift))&31);
if((0<level$1)){
final lcoc_core.VectorNode child$1=lcoc_core.tv_ensure_editable(edit, (arr$1[subidx$1]), );
final lcoc_core.VectorNode v$7774_$AUTO_$7=child$1;
arr$1[subidx$1]=v$7774_$AUTO_$7;
arr$1=v$7774_$AUTO_$7.arr;
level$1=(level$1-5);
continue;
}
final dc.dynamic v$7774_$AUTO_$6=val$2;
arr$1[((n$1 as dc.int)&31)]=(v$7774_$AUTO_$6 as dc.dynamic);
break;
} while(true);
}
return this;
}

dc.dynamic $_pop$BANG_$0(){
if((edit!=null)){
}else{
throw dc.ArgumentError("pop! after persistent!", );
}
if((0==cnt)){
throw dc.ArgumentError("Can't pop empty vector", );
}
final dc.int cnt_1$1=(cnt-1);
final dc.int subidx$2=(cnt_1$1&31);
final dc.bool or$7228_$AUTO_$2=(0<subidx$2);
late final dc.bool $if_$3;
if(or$7228_$AUTO_$2){
$if_$3=or$7228_$AUTO_$2;
}else{
$if_$3=(0==cnt_1$1);
}
if($if_$3){
final dc.Null v$7774_$AUTO_$8=null;
tail[subidx$2]=v$7774_$AUTO_$8;
}else{
final dc.int new_tail_length$1=(cnt_1$1-(cnt_1$1&(~31)));
tail=lcoc_core.tv_editable_array_for(this, cnt_1$1, );
if((5==shift)){
final dc.Null v$7774_$AUTO_$9=null;
root.arr[((cnt_1$1-1)>>(31&5))]=v$7774_$AUTO_$9;
}else if(((cnt_1$1-32)==(4294967295&(1<<(31&shift))))){
root=(root.arr[0]);
shift=(shift-5);
}else{
lcoc_core.tv_pop_tail$BANG_(this, shift, root, );
}
}
cnt=(cnt-1);
return this;
}

dc.dynamic $_count$0(){
if((edit!=null)){
}else{
throw dc.ArgumentError("count after persistent!", );
}
return cnt;
}

dc.dynamic $_nth$1(dc.dynamic n$2, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("nth after persistent!", );
}
final dc.bool or$7228_$AUTO_$3=(cnt<=(n$2 as dc.num));
late final dc.bool $if_$4;
if(or$7228_$AUTO_$3){
$if_$4=or$7228_$AUTO_$3;
}else{
$if_$4=((n$2 as dc.num)<0);
}
if($if_$4){
throw dc.ArgumentError((lcoc_core.str.$_invoke$4("No item ", n$2, " in vector of length ", cnt, )), );
}
late final dc.List arr$2;
if((((cnt-1)&(~31))<=(n$2 as dc.num))){
arr$2=tail;
}else{
arr$2=lcoc_core.unchecked_array_for(root, shift, n$2, );
}
return (arr$2[((n$2 as dc.int)&31)]);
}

dc.dynamic $_nth$2(dc.dynamic n$3, dc.dynamic not_found$1, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("nth after persistent!", );
}
final dc.bool or$7228_$AUTO_$4=(cnt<=(n$3 as dc.num));
late final dc.bool $if_$5;
if(or$7228_$AUTO_$4){
$if_$5=or$7228_$AUTO_$4;
}else{
$if_$5=((n$3 as dc.num)<0);
}
if($if_$5){
return not_found$1;
}
late final dc.List arr$3;
if((((cnt-1)&(~31))<=(n$3 as dc.num))){
arr$3=tail;
}else{
arr$3=lcoc_core.unchecked_array_for(root, shift, n$3, );
}
return (arr$3[((n$3 as dc.int)&31)]);
}

dc.dynamic $_lookup$1(dc.dynamic k$1, ){
final lcoc_core.TransientVector o7486$1=this;
final dc.dynamic k7487$1=k$1;
final dc.Null not_found7488$1=null;
return (o7486$1.$_lookup$2((k7487$1 as dc.dynamic), not_found7488$1, ));
}

dc.dynamic $_lookup$2(dc.dynamic k$2, dc.dynamic not_found$2, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("lookup after persistent!", );
}
if((k$2 is dc.int)){
final lcoc_core.TransientVector coll7477$1=this;
final dc.dynamic n7478$1=k$2;
final dc.dynamic not_found7479$1=not_found$2;
return (coll7477$1.$_nth$2((n7478$1 as dc.dynamic), (not_found7479$1 as dc.dynamic), ));
}
return not_found$2;
}

dc.dynamic $_contains_key$QMARK_$1(dc.dynamic n$4, ){
if((edit!=null)){
}else{
throw dc.ArgumentError("contains? after persistent!", );
}
final dc.bool and$7187_$AUTO_$2=(0<=(n$4 as dc.num));
if(and$7187_$AUTO_$2){
return ((n$4 as dc.num)<cnt);
}
return and$7187_$AUTO_$2;
}

dc.dynamic $_invoke$1(dc.dynamic k$3, ){
final lcoc_core.TransientVector o7490$1=this;
final dc.dynamic k7491$1=k$3;
return (o7490$1.$_lookup$1((k7491$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic k$4, dc.dynamic not_found$3, ){
final lcoc_core.TransientVector o7486$2=this;
final dc.dynamic k7487$2=k$4;
final dc.dynamic not_found7488$2=not_found$3;
return (o7486$2.$_lookup$2((k7487$2 as dc.dynamic), (not_found7488$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END TransientVector

// BEGIN VectorNode
class VectorNode extends dc.Object {
final edit;
final dc.List arr;

const VectorNode(this.edit, this.arr, ):super();
}

// END VectorNode

// BEGIN Volatile
class Volatile extends dc.Object implements lcoc_core.IVolatile$iface, lcoc_core.IDeref$iface {
var state;

Volatile(this.state, ):super();

dc.dynamic $_vreset$BANG_$1(dc.dynamic new_state$1, ){
state=new_state$1;
return state;
}

dc.dynamic $_deref$0(){
return state;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END Volatile

// BEGIN XformIterator
class XformIterator<E> extends dc.Object implements dc.Iterator<E> {
final dc.List buf;
dc.int i;
final move_next;
dc.bool in_progress;

XformIterator(this.buf, this.i, this.move_next, this.in_progress, ):super();

E get current{
return (buf[i]);
}

dc.bool moveNext(){
i=(1+i);
final dc.bool or$7228_$AUTO_$1=(i<buf.length);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
buf.clear();
i=0;
do {
final dc.bool and$7187_$AUTO_$1=in_progress;
late final dc.dynamic $if_$1;
if(and$7187_$AUTO_$1){
if((move_next is dc.Function)){
$if_$1=(move_next as dc.Function)();
}else if((move_next is lcoc_core.IFn$iface)){
$if_$1=((move_next as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(move_next, ).$_invoke$0(move_next, ));
}
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.bool or$7228_$AUTO_$2=(0<buf.length);
if(or$7228_$AUTO_$2){
return or$7228_$AUTO_$2;
}
continue;
}
in_progress=false;
return (0<buf.length);
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END XformIterator

// BEGIN aclone
dc.List aclone(dc.dynamic arr$1, ){
return (dc.List.from((arr$1 as dc.List), growable: false, ));
}

// END aclone

// BEGIN add-watch
lcoc_core.Atom add_watch(dc.dynamic reference$1, dc.dynamic key$1, dc.dynamic fn$1, ){
final lcoc_core.Atom this7628$1=(reference$1 as lcoc_core.Atom);
final dc.dynamic key7629$1=key$1;
final dc.dynamic f7630$1=fn$1;
this7628$1.$_add_watch$2((key7629$1 as dc.dynamic), (f7630$1 as dc.dynamic), );
return (reference$1 as lcoc_core.Atom);
}

// END add-watch

// BEGIN aget
lcoc_core.IFn$iface aget=lcoc_core.aget$ifn(null, );

// END aget

// BEGIN aget$ifn
class aget$ifn extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const aget$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.aget$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic array$1, dc.dynamic idx$1, dc.dynamic idxs$1, ){
final dc.List array$2=(array$1 as dc.List);
final dc.int idx$2=(idx$1 as dc.int);
return (lcoc_core.apply.$_invoke$3(lcoc_core.aget, (array$2[idx$2]), idxs$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic array$3, dc.dynamic idx$3, ){
final dc.List array$4=(array$3 as dc.List);
final dc.int idx$4=(idx$3 as dc.int);
return (array$4[idx$4]);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END aget$ifn

// BEGIN alength
dc.int alength(dc.dynamic array$1, ){
return (array$1 as dc.List).length;
}

// END alength

// BEGIN alter-meta!
lcoc_core.IFn$iface alter_meta$BANG_=lcoc_core.alter_meta$BANG_$ifn(null, );

// END alter-meta!

// BEGIN alter_meta$BANG_$ifn
class alter_meta$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const alter_meta$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.alter_meta$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic atom$1, dc.dynamic f$1, dc.dynamic args$1, ){
final lcoc_core.Atom atom$2=(atom$1 as lcoc_core.Atom);
final dc.dynamic arg$1=(lcoc_core.apply.$_invoke$3(f$1, atom$2.meta, args$1, ));
atom$2.meta=arg$1;
return arg$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END alter_meta$BANG_$ifn

// BEGIN amap
dc.dynamic amap(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic a$1, dc.dynamic idx$1, dc.dynamic ret$1, dc.dynamic expr$1, ){
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8482__auto__", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(a$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(ret$1, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aclone", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8482__auto__", )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$9=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(idx$1, )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1(idx$1, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "alength", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8482__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$5, arg$4, $4, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aset", )), )), (lcoc_core.list.$_invoke$1(ret$1, )), (lcoc_core.list.$_invoke$1(idx$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$7=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1(idx$1, )), ));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7310$8=(lcoc_core.concat.$_invoke$2(arg$6, $5, ));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7310$9=(lcoc_core.concat.$_invoke$3(arg$7, $7, $6, ));
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7310$10=(lcoc_core.concat.$_invoke$4(arg$8, $9, $8, (lcoc_core.list.$_invoke$1(ret$1, )), ));
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7310$11=(lcoc_core.concat.$_invoke$3(arg$9, $11, $10, ));
late final dc.dynamic $if_$11;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7310$12=(lcoc_core.concat.$_invoke$3(arg$10, $13, $12, ));
if((o7310$12 is lcoc_core.ISeqable$iface)){
return ((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}

// END amap

// BEGIN and
lcoc_core.IFn$iface and=lcoc_core.and$ifn(null, );

// END and

// BEGIN and$ifn
class and$ifn extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const and$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.and$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic next$1, ){
final dc.dynamic arg$27=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$10=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "and__8229__auto__", )), )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$9;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$9, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$26=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$25=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "and__8229__auto__", )), ));
final dc.dynamic o7310$11=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), )), next$1, ));
late final dc.dynamic $if_$10;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7310$12=(lcoc_core.concat.$_invoke$4(arg$26, arg$25, $2, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "and__8229__auto__", )), )), ));
late final dc.dynamic $if_$11;
if((o7310$12 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7310$13=(lcoc_core.concat.$_invoke$3(arg$27, $4, $3, ));
if((o7310$13 is lcoc_core.ISeqable$iface)){
return ((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, ){
return true;
}

dc.dynamic $_invoke$3(dc.dynamic $AMPERSAND_form$3, dc.dynamic $AMPERSAND_env$3, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END and$ifn

// BEGIN any?
dc.bool any$QMARK_(dc.dynamic x$1, ){
return true;
}

// END any?

// BEGIN apply
lcoc_core.IFn$iface apply=lcoc_core.apply$ifn(null, );

// END apply

// BEGIN apply$ifn
class apply$ifn extends dc.Object with lcoc_core.IFnMixin_uuXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const apply$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.apply$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic args$1, ){
final dc.dynamic args$2=lcoc_core.cons(a$1, lcoc_core.cons(b$1, lcoc_core.cons(c$1, lcoc_core.cons(d$1, lcoc_core.spread(args$1, ), ), ), ), );
if(((lcoc_core.IFn.satisfies((f$1 as dc.dynamic), )) as dc.bool)){
final dc.dynamic this7154$1=f$1;
final dc.dynamic more7155$1=args$2;
if((this7154$1 is lcoc_core.IFn$iface)){
return ((this7154$1 as lcoc_core.IFn$iface).$_apply$1((more7155$1 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions((this7154$1 as dc.dynamic), ) as lcoc_core.IFn$ext).$_apply$1((this7154$1 as dc.dynamic), (more7155$1 as dc.dynamic), ));
}
final dc.dynamic maybe_f$1=f$1;
late final dc.Function wrapper_f$1;
if((maybe_f$1 is dc.Function)){
wrapper_f$1=maybe_f$1;
}else{
wrapper_f$1=(){
if((maybe_f$1 is dc.Function)){
return (maybe_f$1 as dc.Function)();
}
if((maybe_f$1 is lcoc_core.IFn$iface)){
return ((maybe_f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$1, ).$_invoke$0(maybe_f$1, ));
};
}
return (dc.Function.apply(wrapper_f$1, lcoc_core.to_array(args$2, ), ));
}

dc.dynamic $_invoke$2(dc.dynamic f$2, dc.dynamic args$3, ){
if(((lcoc_core.IFn.satisfies((f$2 as dc.dynamic), )) as dc.bool)){
final dc.dynamic this7154$2=f$2;
final dc.dynamic o7310$8=args$3;
late final dc.dynamic more7155$2;
if((o7310$8 is lcoc_core.ISeqable$iface)){
more7155$2=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
more7155$2=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
if((this7154$2 is lcoc_core.IFn$iface)){
return ((this7154$2 as lcoc_core.IFn$iface).$_apply$1(more7155$2, ));
}
return ((lcoc_core.IFn.extensions((this7154$2 as dc.dynamic), ) as lcoc_core.IFn$ext).$_apply$1((this7154$2 as dc.dynamic), more7155$2, ));
}
final dc.dynamic maybe_f$2=f$2;
late final dc.Function wrapper_f$2;
if((maybe_f$2 is dc.Function)){
wrapper_f$2=maybe_f$2;
}else{
wrapper_f$2=(){
if((maybe_f$2 is dc.Function)){
return (maybe_f$2 as dc.Function)();
}
if((maybe_f$2 is lcoc_core.IFn$iface)){
return ((maybe_f$2 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$2, ).$_invoke$0(maybe_f$2, ));
};
}
return (dc.Function.apply(wrapper_f$2, lcoc_core.to_array(args$3, ), ));
}

dc.dynamic $_invoke$3(dc.dynamic f$3, dc.dynamic x$1, dc.dynamic args$4, ){
final dc.dynamic args$5=(lcoc_core.list$STAR_.$_invoke$2(x$1, args$4, ));
if(((lcoc_core.IFn.satisfies((f$3 as dc.dynamic), )) as dc.bool)){
final dc.dynamic this7154$3=f$3;
final dc.dynamic more7155$3=args$5;
if((this7154$3 is lcoc_core.IFn$iface)){
return ((this7154$3 as lcoc_core.IFn$iface).$_apply$1((more7155$3 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions((this7154$3 as dc.dynamic), ) as lcoc_core.IFn$ext).$_apply$1((this7154$3 as dc.dynamic), (more7155$3 as dc.dynamic), ));
}
final dc.dynamic maybe_f$3=f$3;
late final dc.Function wrapper_f$3;
if((maybe_f$3 is dc.Function)){
wrapper_f$3=maybe_f$3;
}else{
wrapper_f$3=(){
if((maybe_f$3 is dc.Function)){
return (maybe_f$3 as dc.Function)();
}
if((maybe_f$3 is lcoc_core.IFn$iface)){
return ((maybe_f$3 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$3, ).$_invoke$0(maybe_f$3, ));
};
}
return (dc.Function.apply(wrapper_f$3, lcoc_core.to_array(args$5, ), ));
}

dc.dynamic $_invoke$4(dc.dynamic f$4, dc.dynamic x$2, dc.dynamic y$1, dc.dynamic args$6, ){
final dc.dynamic args$7=(lcoc_core.list$STAR_.$_invoke$3(x$2, y$1, args$6, ));
if(((lcoc_core.IFn.satisfies((f$4 as dc.dynamic), )) as dc.bool)){
final dc.dynamic this7154$4=f$4;
final dc.dynamic more7155$4=args$7;
if((this7154$4 is lcoc_core.IFn$iface)){
return ((this7154$4 as lcoc_core.IFn$iface).$_apply$1((more7155$4 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions((this7154$4 as dc.dynamic), ) as lcoc_core.IFn$ext).$_apply$1((this7154$4 as dc.dynamic), (more7155$4 as dc.dynamic), ));
}
final dc.dynamic maybe_f$4=f$4;
late final dc.Function wrapper_f$4;
if((maybe_f$4 is dc.Function)){
wrapper_f$4=maybe_f$4;
}else{
wrapper_f$4=(){
if((maybe_f$4 is dc.Function)){
return (maybe_f$4 as dc.Function)();
}
if((maybe_f$4 is lcoc_core.IFn$iface)){
return ((maybe_f$4 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$4, ).$_invoke$0(maybe_f$4, ));
};
}
return (dc.Function.apply(wrapper_f$4, lcoc_core.to_array(args$7, ), ));
}

dc.dynamic $_invoke$5(dc.dynamic f$5, dc.dynamic x$3, dc.dynamic y$2, dc.dynamic z$1, dc.dynamic args$8, ){
final dc.dynamic args$9=(lcoc_core.list$STAR_.$_invoke$4(x$3, y$2, z$1, args$8, ));
if(((lcoc_core.IFn.satisfies((f$5 as dc.dynamic), )) as dc.bool)){
final dc.dynamic this7154$5=f$5;
final dc.dynamic more7155$5=args$9;
if((this7154$5 is lcoc_core.IFn$iface)){
return ((this7154$5 as lcoc_core.IFn$iface).$_apply$1((more7155$5 as dc.dynamic), ));
}
return ((lcoc_core.IFn.extensions((this7154$5 as dc.dynamic), ) as lcoc_core.IFn$ext).$_apply$1((this7154$5 as dc.dynamic), (more7155$5 as dc.dynamic), ));
}
final dc.dynamic maybe_f$5=f$5;
late final dc.Function wrapper_f$5;
if((maybe_f$5 is dc.Function)){
wrapper_f$5=maybe_f$5;
}else{
wrapper_f$5=(){
if((maybe_f$5 is dc.Function)){
return (maybe_f$5 as dc.Function)();
}
if((maybe_f$5 is lcoc_core.IFn$iface)){
return ((maybe_f$5 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(maybe_f$5, ).$_invoke$0(maybe_f$5, ));
};
}
return (dc.Function.apply(wrapper_f$5, lcoc_core.to_array(args$9, ), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END apply$ifn

// BEGIN areduce
dc.dynamic areduce(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic a$1, dc.dynamic idx$1, dc.dynamic ret$1, dc.dynamic init$1, dc.dynamic expr$1, ){
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2(null, "a__8483__auto__", ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("\$lib:dc", "List", )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$1, ));
final dc.dynamic $2=lcoc_core.with_meta(arg$1, $1, );
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2($3, (lcoc_core.list.$_invoke$1(a$1, )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$4(idx$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "tag", 2780644040, ), (lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), )), (lcoc_core.list.$_invoke$1(0, )), (lcoc_core.list.$_invoke$1(ret$1, )), (lcoc_core.list.$_invoke$1(init$1, )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($5, ));
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(idx$1, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "alength", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8483__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $6, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1(idx$1, )), ));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7310$7=(lcoc_core.concat.$_invoke$3(arg$4, $7, (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7310$8=(lcoc_core.concat.$_invoke$4(arg$5, $9, $8, (lcoc_core.list.$_invoke$1(ret$1, )), ));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7310$9=(lcoc_core.concat.$_invoke$3(arg$6, $11, $10, ));
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7310$10=(lcoc_core.concat.$_invoke$3(arg$7, $13, $12, ));
if((o7310$10 is lcoc_core.ISeqable$iface)){
return ((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}

// END areduce

// BEGIN aresize
dc.List aresize(dc.dynamic a$1, dc.dynamic from$1, dc.dynamic to$1, dc.dynamic pad$1, ){
final dc.List<dc.dynamic> a$PRIME_$1=(dc.List.filled((to$1 as dc.int), (pad$1 as dc.dynamic), ));
final dc.int n$7923_$AUTO_$1=(from$1 as dc.int);
dc.int i$1=0;
do {
if((i$1<n$7923_$AUTO_$1)){
final dc.dynamic v$7774_$AUTO_$1=((a$1 as dc.List)[i$1]);
a$PRIME_$1[i$1]=v$7774_$AUTO_$1;
i$1=(1+i$1);
continue;
}
break;
} while(true);
return a$PRIME_$1;
}

// END aresize

// BEGIN argument-error
dc.dynamic argument_error(dc.dynamic msg$1, ){
return dc.ArgumentError((msg$1 as dc.dynamic), );
}

// END argument-error

// BEGIN as->
lcoc_core.IFn$iface as_$GT_=lcoc_core.as_$GT_$ifn(null, );

// END as->

// BEGIN as_$GT_$ifn
class as_$GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const as_$GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.as_$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic name$1, dc.dynamic forms$1, ){
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(name$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(name$1, )), lcoc_core.butlast(forms$1, ), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$2=forms$1;
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
late final dc.bool $if_$3;
if((($if_$2!=false)&&($if_$2!=null))){
$if_$3=false;
}else{
$if_$3=true;
}
late final dc.dynamic $if_$4;
if($if_$3){
$if_$4=name$1;
}else{
$if_$4=lcoc_core.last(forms$1, );
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, $2, ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END as_$GT_$ifn

// BEGIN aset
lcoc_core.IFn$iface aset=lcoc_core.aset$ifn(null, );

// END aset

// BEGIN aset$ifn
class aset$ifn extends dc.Object with lcoc_core.IFnMixin_uuuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const aset$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.aset$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic array$1, dc.dynamic idx$1, dc.dynamic idx2$1, dc.dynamic idxv$1, ){
final dc.List array$2=(array$1 as dc.List);
final dc.int idx$2=(idx$1 as dc.int);
final dc.int idx2$2=(idx2$1 as dc.int);
return (lcoc_core.apply.$_invoke$4(lcoc_core.aset, (array$2[idx$2]), idx2$2, idxv$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic array$3, dc.dynamic idx$3, dc.dynamic val$1, ){
final dc.List array$4=(array$3 as dc.List);
final dc.int idx$4=(idx$3 as dc.int);
array$4[idx$4]=(val$1 as dc.dynamic);
return val$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END aset$ifn

// BEGIN ashrink
dc.List ashrink(dc.dynamic a$1, dc.dynamic to$1, ){
final dc.List<dc.dynamic> a$PRIME_$1=(dc.List<dc.dynamic>.filled((to$1 as dc.int), null, ));
final dc.int n$7923_$AUTO_$1=(to$1 as dc.int);
dc.int i$1=0;
do {
if((i$1<n$7923_$AUTO_$1)){
final dc.dynamic v$7774_$AUTO_$1=((a$1 as dc.List)[i$1]);
a$PRIME_$1[i$1]=v$7774_$AUTO_$1;
i$1=(1+i$1);
continue;
}
break;
} while(true);
return a$PRIME_$1;
}

// END ashrink

// BEGIN assert
lcoc_core.IFn$iface $assert_=lcoc_core.$assert_$ifn(null, );

// END assert

// BEGIN assoc
lcoc_core.IFn$iface assoc=lcoc_core.assoc$ifn(null, );

// END assoc

// BEGIN assoc!
lcoc_core.IFn$iface assoc$BANG_=lcoc_core.assoc$BANG_$ifn(null, );

// END assoc!

// BEGIN assoc$BANG_$ifn
class assoc$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const assoc$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.assoc$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic coll$2, dc.dynamic key$2, dc.dynamic val$2, dc.dynamic kvs$2, ){
dc.dynamic coll$1=coll$2;
dc.dynamic key$1=key$2;
dc.dynamic val$1=val$2;
dc.dynamic kvs$1=kvs$2;
do {
final dc.dynamic tcoll7452$1=coll$1;
final dc.dynamic key7453$1=key$1;
final dc.dynamic val7454$1=val$1;
late final dc.dynamic ret$1;
if((tcoll7452$1 is lcoc_core.ITransientAssociative$iface)){
ret$1=((tcoll7452$1 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2((key7453$1 as dc.dynamic), (val7454$1 as dc.dynamic), ));
}else{
ret$1=((lcoc_core.ITransientAssociative.extensions((tcoll7452$1 as dc.dynamic), ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2((tcoll7452$1 as dc.dynamic), (key7453$1 as dc.dynamic), (val7454$1 as dc.dynamic), ));
}
if(((kvs$1!=false)&&(kvs$1!=null))){
coll$1=ret$1;
key$1=lcoc_core.first(kvs$1, );
val$1=lcoc_core.second(kvs$1, );
kvs$1=lcoc_core.nnext(kvs$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$3(dc.dynamic coll$3, dc.dynamic key$3, dc.dynamic val$3, ){
final dc.dynamic tcoll7452$2=coll$3;
final dc.dynamic key7453$2=key$3;
final dc.dynamic val7454$2=val$3;
if((tcoll7452$2 is lcoc_core.ITransientAssociative$iface)){
return ((tcoll7452$2 as lcoc_core.ITransientAssociative$iface).$_assoc$BANG_$2((key7453$2 as dc.dynamic), (val7454$2 as dc.dynamic), ));
}
return ((lcoc_core.ITransientAssociative.extensions((tcoll7452$2 as dc.dynamic), ) as lcoc_core.ITransientAssociative$ext).$_assoc$BANG_$2((tcoll7452$2 as dc.dynamic), (key7453$2 as dc.dynamic), (val7454$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END assoc$BANG_$ifn

// BEGIN assoc$ifn
class assoc$ifn extends dc.Object with lcoc_core.IFnMixin_uuuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const assoc$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.assoc$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic map$2, dc.dynamic key$2, dc.dynamic val$2, dc.dynamic kvs$2, ){
dc.dynamic map$1=map$2;
dc.dynamic key$1=key$2;
dc.dynamic val$1=val$2;
dc.dynamic kvs$1=kvs$2;
do {
final dc.dynamic coll7440$1=map$1;
final dc.dynamic k7441$1=key$1;
final dc.dynamic v7442$1=val$1;
late final dc.dynamic ret$1;
if((coll7440$1 is lcoc_core.IAssociative$iface)){
ret$1=((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}else{
ret$1=((lcoc_core.IAssociative.extensions((coll7440$1 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$1 as dc.dynamic), (k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
if(((kvs$1!=false)&&(kvs$1!=null))){
final dc.dynamic test$1=lcoc_core.next(kvs$1, );
if(((test$1!=false)&&(test$1!=null))){
map$1=ret$1;
key$1=lcoc_core.first(kvs$1, );
val$1=lcoc_core.second(kvs$1, );
kvs$1=lcoc_core.nnext(kvs$1, );
continue;
}
throw dc.ArgumentError("assoc expects even number of arguments after map/vector, found odd number", );
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$3(dc.dynamic map$3, dc.dynamic key$3, dc.dynamic val$3, ){
final dc.dynamic coll7440$2=map$3;
final dc.dynamic k7441$2=key$3;
final dc.dynamic v7442$2=val$3;
if((coll7440$2 is lcoc_core.IAssociative$iface)){
return ((coll7440$2 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$2 as dc.dynamic), (v7442$2 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$2 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$2 as dc.dynamic), (k7441$2 as dc.dynamic), (v7442$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END assoc$ifn

// BEGIN assoc-in
dc.dynamic assoc_in(dc.dynamic m$1, dc.dynamic p$8334_$1, dc.dynamic v$1, ){
final dc.dynamic vec$8335_$1=p$8334_$1;
final dc.dynamic o7310$1=vec$8335_$1;
late final dc.dynamic seq$8336_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
seq$8336_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8336_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic first$8337_$1=lcoc_core.first(seq$8336_$1, );
final dc.dynamic seq$8336_$2=lcoc_core.next(seq$8336_$1, );
final dc.dynamic k$1=first$8337_$1;
final dc.dynamic ks$1=seq$8336_$2;
if(((ks$1!=false)&&(ks$1!=null))){
final dc.dynamic coll7440$1=m$1;
final dc.dynamic k7441$1=k$1;
final dc.dynamic v7442$1=lcoc_core.assoc_in((lcoc_core.$get_.$_invoke$2(m$1, k$1, )), ks$1, v$1, );
if((coll7440$1 is lcoc_core.IAssociative$iface)){
return ((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$1 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$1 as dc.dynamic), (k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
final dc.dynamic coll7440$2=m$1;
final dc.dynamic k7441$2=k$1;
final dc.dynamic v7442$2=v$1;
if((coll7440$2 is lcoc_core.IAssociative$iface)){
return ((coll7440$2 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$2 as dc.dynamic), (v7442$2 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$2 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$2 as dc.dynamic), (k7441$2 as dc.dynamic), (v7442$2 as dc.dynamic), ));
}

// END assoc-in

// BEGIN associative?
dc.bool associative$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IAssociative.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END associative?

// BEGIN atom
lcoc_core.IFn$iface atom=lcoc_core.atom$ifn(null, );

// END atom

// BEGIN atom$ifn
class atom$ifn extends dc.Object with lcoc_core.IFnMixin_uY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const atom$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.atom$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic p$8438_$1, ){
final dc.dynamic map$8441_$1=p$8438_$1;
late final dc.dynamic map$8441_$2;
if(((lcoc_core.ISeq.satisfies((map$8441_$1 as dc.dynamic), )) as dc.bool)){
final dc.dynamic o7310$12=map$8441_$1;
late final dc.dynamic $if_$11;
if((o7310$12 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
map$8441_$2=lcoc_core.$_map_lit($if_$11, );
}else{
map$8441_$2=map$8441_$1;
}
final dc.dynamic o$1=map$8441_$2;
final dc.dynamic meta$1=(lcoc_core.$get_.$_invoke$2(map$8441_$2, const lcoc_core.Keyword(null, "meta", 569132720, ), ));
final dc.dynamic validator$1=(lcoc_core.$get_.$_invoke$2(map$8441_$2, const lcoc_core.Keyword(null, "validator", 3753690768, ), ));
final dc.bool or$7228_$AUTO_$1=(null==(meta$1 as dc.dynamic));
late final dc.bool $if_$12;
if(or$7228_$AUTO_$1){
$if_$12=or$7228_$AUTO_$1;
}else{
$if_$12=lcoc_core.map$QMARK_(meta$1, );
}
if($if_$12){
}else{
throw dc.Exception("meta must satisfies IMap.", );
}
if(((validator$1!=false)&&(validator$1!=null))){
lcoc_core.validate_atom_state(validator$1, x$1, );
}else{
}
return lcoc_core.Atom((x$1 as dc.dynamic), (meta$1 as dc.dynamic), (validator$1 as dc.dynamic), lcoc_core.$_EMPTY_MAP, );
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.Atom((x$2 as dc.dynamic), null, null, lcoc_core.$_EMPTY_MAP, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END atom$ifn

// BEGIN await
dc.dynamic $await_(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "bindings__8758__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-DYNAMIC-BINDINGS", )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "try", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart", "await", )), )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "finally", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "set!", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-DYNAMIC-BINDINGS", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "bindings__8758__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$2(arg$1, $2, ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$2, $4, $3, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$3, $6, $5, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

// END await

// BEGIN binding
lcoc_core.IFn$iface binding=lcoc_core.binding$ifn(null, );

// END binding

// BEGIN binding$ifn
class binding$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const binding$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.binding$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "prev-bindings__8752__auto__", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "push-dynamic-bindings", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.into.$_invoke$3(lcoc_core.$_EMPTY_MAP, (lcoc_core.map.$_invoke$1((dc.dynamic p$8754_$1, ){
final dc.dynamic vec$8755_$1=p$8754_$1;
final dc.dynamic sym$1=(lcoc_core.nth.$_invoke$3(vec$8755_$1, 0, null, ));
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$8755_$1, 1, null, ));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "var", )), sym$1, )), ));
fl$1[1]=v$1;
return lcoc_core.$_vec_owning(fl$1, );
}, )), (lcoc_core.partition.$_invoke$2(2, bindings$1, )), )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "try", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "finally", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "restore-dynamic-bindings", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "prev-bindings__8752__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$2(arg$2, $3, ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$3, body$1, $4, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$4, $6, $5, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END binding$ifn

// BEGIN bit-and
lcoc_core.IFn$iface bit_and=lcoc_core.bit_and$ifn(null, );

// END bit-and

// BEGIN bit-and-not
lcoc_core.IFn$iface bit_and_not=lcoc_core.bit_and_not$ifn(null, );

// END bit-and-not

// BEGIN bit-clear
dc.int bit_clear(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)&(~(1<<((n$1 as dc.int)&63))));
}

// END bit-clear

// BEGIN bit-flip
dc.int bit_flip(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)^(1<<((n$1 as dc.int)&63)));
}

// END bit-flip

// BEGIN bit-not
dc.int bit_not(dc.dynamic x$1, ){
return (~(x$1 as dc.int));
}

// END bit-not

// BEGIN bit-or
lcoc_core.IFn$iface bit_or=lcoc_core.bit_or$ifn(null, );

// END bit-or

// BEGIN bit-set
dc.int bit_set(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)|(1<<((n$1 as dc.int)&63)));
}

// END bit-set

// BEGIN bit-shift-left
dc.int bit_shift_left(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)<<((n$1 as dc.int)&63));
}

// END bit-shift-left

// BEGIN bit-shift-right
dc.int bit_shift_right(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)>>((n$1 as dc.int)&63));
}

// END bit-shift-right

// BEGIN bit-test
dc.bool bit_test(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)>>((n$1 as dc.int)&63)).isOdd;
}

// END bit-test

// BEGIN bit-xor
lcoc_core.IFn$iface bit_xor=lcoc_core.bit_xor$ifn(null, );

// END bit-xor

// BEGIN bit_and$ifn
class bit_and$ifn extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const bit_and$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.bit_and$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.bit_and;
final dc.int start7372$1=((x$1 as dc.int)&(y$1 as dc.int));
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)&(y$2 as dc.int));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_and$ifn

// BEGIN bit_and_not$ifn
class bit_and_not$ifn extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const bit_and_not$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.bit_and_not$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.bit_and_not;
final dc.int start7372$1=((x$1 as dc.int)&(~(y$1 as dc.int)));
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)&(~(y$2 as dc.int)));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_and_not$ifn

// BEGIN bit_or$ifn
class bit_or$ifn extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const bit_or$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.bit_or$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.bit_or;
final dc.int start7372$1=((x$1 as dc.int)|(y$1 as dc.int));
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)|(y$2 as dc.int));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_or$ifn

// BEGIN bit_xor$ifn
class bit_xor$ifn extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const bit_xor$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.bit_xor$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.bit_xor;
final dc.int start7372$1=((x$1 as dc.int)^(y$1 as dc.int));
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$2, dc.dynamic y$2, ){
return ((x$2 as dc.int)^(y$2 as dc.int));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END bit_xor$ifn

// BEGIN boolean
dc.bool boolean(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=(null==(x$1 as dc.dynamic));
late final dc.bool $if_$1;
if(or$7228_$AUTO_$1){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=dc.identical((x$1 as dc.Object?), false, );
}
if($if_$1){
return false;
}
return true;
}

// END boolean

// BEGIN boolean-array
lcoc_core.IFn$iface boolean_array=lcoc_core.boolean_array$ifn(null, );

// END boolean-array

// BEGIN boolean?
dc.bool boolean$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.bool);
}

// END boolean?

// BEGIN boolean_array$ifn
class boolean_array$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const boolean_array$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.boolean_array$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if(lcoc_core.int$QMARK_(size_or_seq$1, )){
return (dc.List<dc.bool>.filled((size_or_seq$1 as dc.int), false, ));
}
return (dc.List<dc.bool>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies((init_val_or_seq$1 as dc.dynamic), )) as dc.bool)){
final dc.List<dc.bool> a$7797_$AUTO_$1=(dc.List<dc.bool>.filled((size$1 as dc.int), false, ));
dc.dynamic i$7798_$AUTO_$1=0;
final dc.dynamic o7310$1=init_val_or_seq$1;
dc.dynamic s$7799_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$7799_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$7799_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
final dc.dynamic and$7187_$AUTO_$1=s$7799_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=((i$7798_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$7774_$AUTO_$1=lcoc_core.first(s$7799_$AUTO_$1, );
a$7797_$AUTO_$1[(i$7798_$AUTO_$1 as dc.int)]=(v$7774_$AUTO_$1 as dc.bool);
i$7798_$AUTO_$1=(1+(i$7798_$AUTO_$1 as dc.num));
s$7799_$AUTO_$1=lcoc_core.next(s$7799_$AUTO_$1, );
continue;
}
return a$7797_$AUTO_$1;
} while(true);
}else{
return (dc.List<dc.bool>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.bool), ));
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END boolean_array$ifn

// BEGIN booleans
dc.List<dc.bool> booleans(dc.dynamic xs$1, ){
return ((xs$1 as dc.List).cast<dc.bool>());
}

// END booleans

// BEGIN bounded-count
dc.int bounded_count(dc.dynamic n$1, dc.dynamic coll$1, ){
if(lcoc_core.counted$QMARK_(coll$1, )){
final dc.dynamic coll7390$1=coll$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
return (((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}
return (((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
dc.int i$1=0;
final dc.dynamic o7310$1=coll$1;
dc.dynamic s$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
final dc.dynamic and$7187_$AUTO_$1=s$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=(i$1<(n$1 as dc.num));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
i$1=(1+i$1);
s$1=lcoc_core.next(s$1, );
continue;
}
return i$1;
} while(true);
}

// END bounded-count

// BEGIN butlast
dc.dynamic butlast(dc.dynamic s$1, ){
dc.dynamic ret$1=lcoc_core.$_EMPTY_VECTOR;
dc.dynamic s$2=s$1;
do {
final dc.dynamic test$1=lcoc_core.next(s$2, );
if(((test$1!=false)&&(test$1!=null))){
final dc.dynamic coll7355$1=ret$1;
final dc.dynamic o7356$1=lcoc_core.first(s$2, );
if((coll7355$1 is lcoc_core.ICollection$iface)){
ret$1=((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}else{
ret$1=((lcoc_core.ICollection.extensions((coll7355$1 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$1 as dc.dynamic), (o7356$1 as dc.dynamic), ));
}
s$2=lcoc_core.next(s$2, );
continue;
}
final dc.dynamic o7310$1=ret$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
} while(true);
}

// END butlast

// BEGIN case
lcoc_core.IFn$iface $case_=lcoc_core.$case_$ifn(null, );

// END case

// BEGIN cat
dc.dynamic cat(dc.dynamic rf$1, ){
final dc.dynamic rrf$1=lcoc_core.preserving_reduced(rf$1, );
final dc.dynamic f$1=lcoc_core.Reify$40(null, rf$1, rrf$1, );
return f$1;
}

// END cat

// BEGIN chunk
dc.dynamic chunk(dc.dynamic b$1, ){
return ((b$1 as lcoc_core.ChunkBuffer).chunk());
}

// END chunk

// BEGIN chunk-append
dc.dynamic chunk_append(dc.dynamic b$1, dc.dynamic x$1, ){
return ((b$1 as lcoc_core.ChunkBuffer).add((x$1 as dc.dynamic), ));
}

// END chunk-append

// BEGIN chunk-buffer
lcoc_core.ChunkBuffer chunk_buffer(dc.dynamic capacity$1, ){
return lcoc_core.ChunkBuffer((dc.List<dc.dynamic>.filled((capacity$1 as dc.int), null, )), 0, );
}

// END chunk-buffer

// BEGIN chunk-cons
dc.dynamic chunk_cons(dc.dynamic chunk$1, dc.dynamic rest$1, ){
final dc.dynamic coll7390$1=chunk$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.bool $1=(0<cast$1);
if($1){
return lcoc_core.ChunkedCons((chunk$1 as dc.dynamic), (rest$1 as dc.dynamic), null, -1, );
}
return rest$1;
}

// END chunk-cons

// BEGIN chunk-first
dc.dynamic chunk_first(dc.dynamic s$1, ){
final dc.dynamic coll7411$1=s$1;
if((coll7411$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7411$1 as lcoc_core.IChunkedSeq$iface).$_chunked_first$0());
}
return ((lcoc_core.IChunkedSeq.extensions((coll7411$1 as dc.dynamic), ) as lcoc_core.IChunkedSeq$ext).$_chunked_first$0((coll7411$1 as dc.dynamic), ));
}

// END chunk-first

// BEGIN chunk-next
dc.dynamic chunk_next(dc.dynamic s$1, ){
final dc.dynamic coll7421$1=s$1;
if((coll7421$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7421$1 as lcoc_core.IChunkedSeq$iface).$_chunked_next$0());
}
return ((lcoc_core.IChunkedSeq.extensions((coll7421$1 as dc.dynamic), ) as lcoc_core.IChunkedSeq$ext).$_chunked_next$0((coll7421$1 as dc.dynamic), ));
}

// END chunk-next

// BEGIN chunk-reduce
dc.dynamic chunk_reduce(dc.dynamic f$1, dc.dynamic val$1, dc.dynamic coll$1, ){
final dc.dynamic coll7404$1=coll$1;
final dc.dynamic f7405$1=f$1;
final dc.dynamic init7406$1=val$1;
if((coll7404$1 is lcoc_core.IChunk$iface)){
return ((coll7404$1 as lcoc_core.IChunk$iface).$_chunk_reduce$2((f7405$1 as dc.dynamic), (init7406$1 as dc.dynamic), ));
}
return ((lcoc_core.IChunk.extensions((coll7404$1 as dc.dynamic), ) as lcoc_core.IChunk$ext).$_chunk_reduce$2((coll7404$1 as dc.dynamic), (f7405$1 as dc.dynamic), (init7406$1 as dc.dynamic), ));
}

// END chunk-reduce

// BEGIN chunk-rest
dc.dynamic chunk_rest(dc.dynamic s$1, ){
final dc.dynamic coll7416$1=s$1;
if((coll7416$1 is lcoc_core.IChunkedSeq$iface)){
return ((coll7416$1 as lcoc_core.IChunkedSeq$iface).$_chunked_rest$0());
}
return ((lcoc_core.IChunkedSeq.extensions((coll7416$1 as dc.dynamic), ) as lcoc_core.IChunkedSeq$ext).$_chunked_rest$0((coll7416$1 as dc.dynamic), ));
}

// END chunk-rest

// BEGIN chunked-iterator-seq
lcoc_core.IFn$iface chunked_iterator_seq=lcoc_core.chunked_iterator_seq$ifn(null, );

// END chunked-iterator-seq

// BEGIN chunked-seq?
dc.bool chunked_seq$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IChunkedSeq.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END chunked-seq?

// BEGIN chunked_iterator_seq$ifn
class chunked_iterator_seq$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const chunked_iterator_seq$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.chunked_iterator_seq$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic iter$1, ){
final dc.Iterator iter$2=(iter$1 as dc.Iterator);
return (lcoc_core.chunked_iterator_seq.$_invoke$2(iter$2, 32, ));
}

dc.dynamic $_invoke$2(dc.dynamic iter$3, dc.dynamic chunk_size$1, ){
final dc.Iterator iter$4=(iter$3 as dc.Iterator);
final dc.int chunk_size$2=(chunk_size$1 as dc.int);
if((iter$4.moveNext())){
return lcoc_core.LazySeq(null, ((){
final lcoc_core.ChunkBuffer buf$1=lcoc_core.chunk_buffer(chunk_size$2, );
lcoc_core.chunk_append(buf$1, iter$4.current, );
dc.int rem$1=(chunk_size$2-1);
do {
final dc.bool and$7187_$AUTO_$1=(0<rem$1);
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(iter$4.moveNext());
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
lcoc_core.chunk_append(buf$1, iter$4.current, );
rem$1=(rem$1-1);
continue;
}
break;
} while(true);
return lcoc_core.chunk_cons(lcoc_core.chunk(buf$1, ), (lcoc_core.chunked_iterator_seq.$_invoke$2(iter$4, chunk_size$2, )), );
} as dc.dynamic), null, -1, );
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END chunked_iterator_seq$ifn

// BEGIN coll?
dc.bool coll$QMARK_(dc.dynamic x$1, ){
if((null==(x$1 as dc.dynamic))){
return false;
}
return ((lcoc_core.ICollection.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END coll?

// BEGIN comment
lcoc_core.IFn$iface comment=lcoc_core.comment$ifn(null, );

// END comment

// BEGIN comment$ifn
class comment$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const comment$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.comment$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END comment$ifn

// BEGIN comp
lcoc_core.IFn$iface comp=lcoc_core.comp$ifn(null, );

// END comp

// BEGIN comp$ifn
class comp$ifn extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const comp$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.comp$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic g$1, dc.dynamic fs$1, ){
final dc.dynamic coll7370$1=lcoc_core.cons(g$1, fs$1, );
final lcoc_core.IFn$iface f7371$1=lcoc_core.comp;
final dc.dynamic start7372$1=f$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$0(){
return lcoc_core.identity;
}

dc.dynamic $_invoke$1(dc.dynamic f$2, ){
return f$2;
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic g$2, ){
final dc.dynamic f$4=lcoc_core.Reify$8(null, f$3, g$2, );
return f$4;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END comp$ifn

// BEGIN compare
dc.int compare(dc.dynamic x$1, dc.dynamic y$1, ){
if(dc.identical((x$1 as dc.Object?), (y$1 as dc.Object?), )){
return 0;
}
if((null==(x$1 as dc.dynamic))){
return -1;
}
if((null==(y$1 as dc.dynamic))){
return 1;
}
return ((x$1 as dc.Comparable).compareTo((y$1 as dc.dynamic), ));
}

// END compare

// BEGIN compare-and-set!
dc.bool compare_and_set$BANG_(dc.dynamic a$1, dc.dynamic oldval$1, dc.dynamic newval$1, ){
final lcoc_core.Atom o7365$1=(a$1 as lcoc_core.Atom);
final dc.dynamic $1=(o7365$1.$_deref$0());
final dc.bool $2=(lcoc_core.$EQ_.$_invoke$2($1, oldval$1, ));
if($2){
lcoc_core.reset$BANG_((a$1 as lcoc_core.Atom), newval$1, );
return true;
}
return false;
}

// END compare-and-set!

// BEGIN compare-indexed
dc.int compare_indexed(dc.dynamic x$1, dc.dynamic y$1, ){
final dc.dynamic coll7390$1=x$1;
late final dc.dynamic cntx$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cntx$1=((coll7390$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
cntx$1=((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), ));
}
final dc.dynamic coll7390$2=y$1;
late final dc.dynamic cnty$1;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cnty$1=((coll7390$2 as lcoc_core.ICounted$iface).$_count$0());
}else{
cnty$1=((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), ));
}
if(((cntx$1 as dc.num)<(cnty$1 as dc.num))){
return -1;
}
if(((cnty$1 as dc.num)<(cntx$1 as dc.num))){
return 1;
}
dc.int idx$1=0;
do {
if((idx$1<(cntx$1 as dc.num))){
final dc.dynamic coll7481$1=x$1;
final dc.int n7482$1=idx$1;
late final dc.Comparable cast$1;
if((coll7481$1 is lcoc_core.IIndexed$iface)){
cast$1=(((coll7481$1 as lcoc_core.IIndexed$iface).$_nth$1(n7482$1, )) as dc.Comparable);
}else{
cast$1=(((lcoc_core.IIndexed.extensions((coll7481$1 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$1 as dc.dynamic), n7482$1, )) as dc.Comparable);
}
final dc.dynamic coll7481$2=y$1;
final dc.int n7482$2=idx$1;
late final dc.dynamic $if_$1;
if((coll7481$2 is lcoc_core.IIndexed$iface)){
$if_$1=((coll7481$2 as lcoc_core.IIndexed$iface).$_nth$1(n7482$2, ));
}else{
$if_$1=((lcoc_core.IIndexed.extensions((coll7481$2 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$2 as dc.dynamic), n7482$2, ));
}
final dc.int c$1=(cast$1.compareTo($if_$1, ));
if((0==c$1)){
idx$1=(1+idx$1);
continue;
}
return c$1;
}
return 0;
} while(true);
}

// END compare-indexed

// BEGIN complement
dc.dynamic complement(dc.dynamic f$1, ){
final dc.dynamic f$2=lcoc_core.Reify$22(null, f$1, );
return f$2;
}

// END complement

// BEGIN completing
lcoc_core.IFn$iface completing=lcoc_core.completing$ifn(null, );

// END completing

// BEGIN completing$ifn
class completing$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const completing$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.completing$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (lcoc_core.completing.$_invoke$2(f$1, lcoc_core.identity, ));
}

dc.dynamic $_invoke$2(dc.dynamic f$2, dc.dynamic cf$1, ){
final dc.dynamic f$3=lcoc_core.Reify$48(null, f$2, cf$1, );
return f$3;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END completing$ifn

// BEGIN concat
lcoc_core.IFn$iface concat=lcoc_core.concat$ifn(null, );

// END concat

// BEGIN concat$ifn
class concat$ifn extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const concat$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.concat$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic zs$1, ){
lcoc_core.LazySeq cat$1(dc.dynamic xys$1, dc.dynamic zs$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$2=xys$1;
late final dc.dynamic xys$3;
if((o7310$2 is lcoc_core.ISeqable$iface)){
xys$3=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xys$3=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
if(((xys$3!=false)&&(xys$3!=null))){
if(lcoc_core.chunked_seq$QMARK_(xys$3, )){
return lcoc_core.chunk_cons(lcoc_core.chunk_first(xys$3, ), cat$1(lcoc_core.chunk_rest(xys$3, ), zs$2, ), );
}
return lcoc_core.cons(lcoc_core.first(xys$3, ), cat$1(lcoc_core.rest(xys$3, ), zs$2, ), );
}
if(((zs$2!=false)&&(zs$2!=null))){
return cat$1(lcoc_core.first(zs$2, ), lcoc_core.next(zs$2, ), );
}
return null;
} as dc.dynamic), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) cat$2=cat$1;
return cat$2((lcoc_core.concat.$_invoke$2(x$1, y$1, )), zs$1, );
}

dc.dynamic $_invoke$0(){
return lcoc_core.LazySeq(null, ((){
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.LazySeq(null, ((){
return x$2;
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$3=x$3;
late final dc.dynamic s$1;
if((o7310$3 is lcoc_core.ISeqable$iface)){
s$1=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
if(((s$1!=false)&&(s$1!=null))){
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
return lcoc_core.chunk_cons(lcoc_core.chunk_first(s$1, ), (lcoc_core.concat.$_invoke$2(lcoc_core.chunk_rest(s$1, ), y$2, )), );
}
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.concat.$_invoke$2(lcoc_core.rest(s$1, ), y$2, )), );
}
return y$2;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END concat$ifn

// BEGIN cond
lcoc_core.IFn$iface cond=lcoc_core.cond$ifn(null, );

// END cond

// BEGIN cond$ifn
class cond$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const cond$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.cond$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic clauses$1, ){
if(((clauses$1!=false)&&(clauses$1!=null))){
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2(null, "if", ));
final dc.dynamic arg$1=lcoc_core.first(clauses$1, );
final dc.dynamic test$1=lcoc_core.next(clauses$1, );
late final dc.dynamic $if_$1;
if(((test$1!=false)&&(test$1!=null))){
$if_$1=lcoc_core.second(clauses$1, );
}else{
throw lcoc_core.argument_error("cond requires an even number of forms", );
}
return (lcoc_core.list.$_invoke$4(arg$2, arg$1, $if_$1, lcoc_core.cons((lcoc_core.symbol.$_invoke$2("cljd.core", "cond", )), lcoc_core.next(lcoc_core.next(clauses$1, ), ), ), ));
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END cond$ifn

// BEGIN cond->
lcoc_core.IFn$iface cond_$GT_=lcoc_core.cond_$GT_$ifn(null, );

// END cond->

// BEGIN cond->>
lcoc_core.IFn$iface cond_$GT_$GT_=lcoc_core.cond_$GT_$GT_$ifn(null, );

// END cond->>

// BEGIN cond_$GT_$GT_$ifn
class cond_$GT_$GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const cond_$GT_$GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.cond_$GT_$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic p$8257_$1, ){
final dc.dynamic vec$8258_$1=p$8257_$1;
final dc.dynamic test$1=(lcoc_core.nth.$_invoke$3(vec$8258_$1, 0, null, ));
final dc.dynamic step$1=(lcoc_core.nth.$_invoke$3(vec$8258_$1, 1, null, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->>", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $1, (lcoc_core.list.$_invoke$1(g$1, )), ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}, (lcoc_core.partition.$_invoke$2(2, clauses$1, )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$2;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$4=steps$1;
late final dc.dynamic $if_$3;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
late final dc.bool $if_$4;
if((($if_$3!=false)&&($if_$3!=null))){
$if_$4=false;
}else{
$if_$4=true;
}
late final dc.dynamic $if_$5;
if($if_$4){
$if_$5=g$1;
}else{
$if_$5=lcoc_core.last(steps$1, );
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END cond_$GT_$GT_$ifn

// BEGIN cond_$GT_$ifn
class cond_$GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const cond_$GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.cond_$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic p$8252_$1, ){
final dc.dynamic vec$8253_$1=p$8252_$1;
final dc.dynamic test$1=(lcoc_core.nth.$_invoke$3(vec$8253_$1, 0, null, ));
final dc.dynamic step$1=(lcoc_core.nth.$_invoke$3(vec$8253_$1, 1, null, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $1, (lcoc_core.list.$_invoke$1(g$1, )), ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}, (lcoc_core.partition.$_invoke$2(2, clauses$1, )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$2;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$4=steps$1;
late final dc.dynamic $if_$3;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
late final dc.bool $if_$4;
if((($if_$3!=false)&&($if_$3!=null))){
$if_$4=false;
}else{
$if_$4=true;
}
late final dc.dynamic $if_$5;
if($if_$4){
$if_$5=g$1;
}else{
$if_$5=lcoc_core.last(steps$1, );
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END cond_$GT_$ifn

// BEGIN condp
lcoc_core.IFn$iface condp=lcoc_core.condp$ifn(null, );

// END condp

// BEGIN condp$ifn
class condp$ifn extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const condp$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.condp$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic pred$1, dc.dynamic expr$1, dc.dynamic clauses$1, ){
late final dc.dynamic gpred$1;
if((lcoc_core.gensym is dc.Function)){
gpred$1=(lcoc_core.gensym as dc.Function)("pred__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gpred$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("pred__", ));
}else{
gpred$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "pred__", ));
}
late final dc.dynamic gexpr$1;
if((lcoc_core.gensym is dc.Function)){
gexpr$1=(lcoc_core.gensym as dc.Function)("expr__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gexpr$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("expr__", ));
}else{
gexpr$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "expr__", ));
}
dc.dynamic emit$1(dc.dynamic pred$2, dc.dynamic expr$2, dc.dynamic args$1, ){
late final dc.int $if_$16;
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, ">>", 1535291001, ), lcoc_core.second(args$1, ), ))){
$if_$16=3;
}else{
$if_$16=2;
}
final dc.dynamic vec$8270_$1=lcoc_core.split_at($if_$16, args$1, );
final dc.dynamic vec$8273_$1=(lcoc_core.nth.$_invoke$3(vec$8270_$1, 0, null, ));
final dc.dynamic a$2=(lcoc_core.nth.$_invoke$3(vec$8273_$1, 0, null, ));
final dc.dynamic b$2=(lcoc_core.nth.$_invoke$3(vec$8273_$1, 1, null, ));
final dc.dynamic c$2=(lcoc_core.nth.$_invoke$3(vec$8273_$1, 2, null, ));
final dc.dynamic clause$2=vec$8273_$1;
final dc.dynamic more$2=(lcoc_core.nth.$_invoke$3(vec$8270_$1, 1, null, ));
final dc.dynamic coll7390$2=clause$2;
late final dc.int n$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
n$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
n$2=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
if((lcoc_core.$EQ_.$_invoke$2(0, n$2, ))){
final dc.dynamic arg$39=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic arg$38=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "ArgumentError.", )), ));
final dc.dynamic o7310$19=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "str", )), )), (lcoc_core.list.$_invoke$1("No matching clause: ", )), (lcoc_core.list.$_invoke$1(expr$2, )), ));
late final dc.dynamic $if_$17;
if((o7310$19 is lcoc_core.ISeqable$iface)){
$if_$17=((o7310$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions((o7310$19 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$19 as dc.dynamic), ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7310$20=(lcoc_core.concat.$_invoke$2(arg$38, $8, ));
late final dc.dynamic $if_$18;
if((o7310$20 is lcoc_core.ISeqable$iface)){
$if_$18=((o7310$20 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions((o7310$20 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$20 as dc.dynamic), ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$18, ));
final dc.dynamic o7310$21=(lcoc_core.concat.$_invoke$2(arg$39, $9, ));
if((o7310$21 is lcoc_core.ISeqable$iface)){
return ((o7310$21 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$21 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$21 as dc.dynamic), ));
}
if((lcoc_core.$EQ_.$_invoke$2(1, n$2, ))){
return a$2;
}
if((lcoc_core.$EQ_.$_invoke$2(2, n$2, ))){
final dc.dynamic arg$40=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$22=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(pred$2, )), (lcoc_core.list.$_invoke$1(a$2, )), (lcoc_core.list.$_invoke$1(expr$2, )), ));
late final dc.dynamic $if_$19;
if((o7310$22 is lcoc_core.ISeqable$iface)){
$if_$19=((o7310$22 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions((o7310$22 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$22 as dc.dynamic), ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$19, ));
final dc.dynamic o7310$23=(lcoc_core.concat.$_invoke$4(arg$40, $10, (lcoc_core.list.$_invoke$1(b$2, )), (lcoc_core.list.$_invoke$1(emit$1(pred$2, expr$2, more$2, ), )), ));
if((o7310$23 is lcoc_core.ISeqable$iface)){
return ((o7310$23 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$23 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$23 as dc.dynamic), ));
}
final dc.dynamic arg$42=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-let", )), ));
final dc.dynamic arg$41=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "p__8261__auto__", )), ));
final dc.dynamic o7310$24=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(pred$2, )), (lcoc_core.list.$_invoke$1(a$2, )), (lcoc_core.list.$_invoke$1(expr$2, )), ));
late final dc.dynamic $if_$20;
if((o7310$24 is lcoc_core.ISeqable$iface)){
$if_$20=((o7310$24 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions((o7310$24 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$24 as dc.dynamic), ));
}
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($if_$20, ));
final dc.dynamic o7310$25=(lcoc_core.concat.$_invoke$2(arg$41, $11, ));
late final dc.dynamic $if_$21;
if((o7310$25 is lcoc_core.ISeqable$iface)){
$if_$21=((o7310$25 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions((o7310$25 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$25 as dc.dynamic), ));
}
final dc.dynamic $12=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$21, ));
final dc.dynamic $14=(lcoc_core.list.$_invoke$1($12, ));
final dc.dynamic o7310$26=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(c$2, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "p__8261__auto__", )), )), ));
late final dc.dynamic $if_$22;
if((o7310$26 is lcoc_core.ISeqable$iface)){
$if_$22=((o7310$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions((o7310$26 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$26 as dc.dynamic), ));
}
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($if_$22, ));
final dc.dynamic o7310$27=(lcoc_core.concat.$_invoke$4(arg$42, $14, $13, (lcoc_core.list.$_invoke$1(emit$1(pred$2, expr$2, more$2, ), )), ));
if((o7310$27 is lcoc_core.ISeqable$iface)){
return ((o7310$27 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$27 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$27 as dc.dynamic), ));
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, ) emit$2=emit$1;
final dc.dynamic arg$43=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$28=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1(gpred$1, )), (lcoc_core.list.$_invoke$1(pred$1, )), (lcoc_core.list.$_invoke$1(gexpr$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), ));
late final dc.dynamic $if_$23;
if((o7310$28 is lcoc_core.ISeqable$iface)){
$if_$23=((o7310$28 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$23=((lcoc_core.ISeqable.extensions((o7310$28 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$28 as dc.dynamic), ));
}
final dc.dynamic $15=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$23, ));
final dc.dynamic $16=(lcoc_core.list.$_invoke$1($15, ));
final dc.dynamic o7310$29=(lcoc_core.concat.$_invoke$3(arg$43, $16, (lcoc_core.list.$_invoke$1(emit$2(gpred$1, gexpr$1, clauses$1, ), )), ));
if((o7310$29 is lcoc_core.ISeqable$iface)){
return ((o7310$29 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$29 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$29 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END condp$ifn

// BEGIN conj
lcoc_core.IFn$iface conj=lcoc_core.conj$ifn(null, );

// END conj

// BEGIN conj!
lcoc_core.IFn$iface conj$BANG_=lcoc_core.conj$BANG_$ifn(null, );

// END conj!

// BEGIN conj$BANG_$ifn
class conj$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_XXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const conj$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.conj$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
return lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return coll$1;
}

dc.dynamic $_invoke$2(dc.dynamic coll$2, dc.dynamic x$1, ){
final dc.dynamic tcoll7568$1=coll$2;
final dc.dynamic val7569$1=x$1;
if((tcoll7568$1 is lcoc_core.ITransientCollection$iface)){
return ((tcoll7568$1 as lcoc_core.ITransientCollection$iface).$_conj$BANG_$1((val7569$1 as dc.dynamic), ));
}
return ((lcoc_core.ITransientCollection.extensions((tcoll7568$1 as dc.dynamic), ) as lcoc_core.ITransientCollection$ext).$_conj$BANG_$1((tcoll7568$1 as dc.dynamic), (val7569$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END conj$BANG_$ifn

// BEGIN conj$ifn
class conj$ifn extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const conj$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.conj$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic coll$2, dc.dynamic x$2, dc.dynamic xs$2, ){
dc.dynamic coll$1=coll$2;
dc.dynamic x$1=x$2;
dc.dynamic xs$1=xs$2;
do {
if(((xs$1!=false)&&(xs$1!=null))){
final dc.dynamic coll7355$2=coll$1;
final dc.dynamic o7356$2=x$1;
if((coll7355$2 is lcoc_core.ICollection$iface)){
coll$1=((coll7355$2 as lcoc_core.ICollection$iface).$_conj$1((o7356$2 as dc.dynamic), ));
}else{
coll$1=((lcoc_core.ICollection.extensions((coll7355$2 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$2 as dc.dynamic), (o7356$2 as dc.dynamic), ));
}
x$1=lcoc_core.first(xs$1, );
xs$1=lcoc_core.next(xs$1, );
continue;
}
final dc.dynamic coll7355$1=coll$1;
final dc.dynamic o7356$1=x$1;
if((coll7355$1 is lcoc_core.ICollection$iface)){
return ((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}
return ((lcoc_core.ICollection.extensions((coll7355$1 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$1 as dc.dynamic), (o7356$1 as dc.dynamic), ));
} while(true);
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic $_invoke$1(dc.dynamic coll$3, ){
return coll$3;
}

dc.dynamic $_invoke$2(dc.dynamic coll$4, dc.dynamic x$3, ){
final dc.dynamic coll7355$3=coll$4;
final dc.dynamic o7356$3=x$3;
if((coll7355$3 is lcoc_core.ICollection$iface)){
return ((coll7355$3 as lcoc_core.ICollection$iface).$_conj$1((o7356$3 as dc.dynamic), ));
}
return ((lcoc_core.ICollection.extensions((coll7355$3 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$3 as dc.dynamic), (o7356$3 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END conj$ifn

// BEGIN cons
dc.dynamic cons(dc.dynamic x$1, dc.dynamic coll$1, ){
if((null==(coll$1 as dc.dynamic))){
return lcoc_core.PersistentList(null, (x$1 as dc.dynamic), null, 1, -1, );
}
if(((lcoc_core.ISeq.satisfies((coll$1 as dc.dynamic), )) as dc.bool)){
return lcoc_core.Cons(null, (x$1 as dc.dynamic), (coll$1 as dc.dynamic), -1, );
}
final dc.dynamic arg$1=(x$1 as dc.dynamic);
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
return lcoc_core.Cons(null, arg$1, $if_$1, -1, );
}

// END cons

// BEGIN constantly
dc.dynamic constantly(dc.dynamic x$1, ){
final dc.dynamic f$1=lcoc_core.Reify$21(null, x$1, );
return f$1;
}

// END constantly

// BEGIN contains?
dc.bool contains$QMARK_(dc.dynamic coll$1, dc.dynamic key$1, ){
final dc.dynamic o7495$1=coll$1;
final dc.dynamic k7496$1=key$1;
if((o7495$1 is lcoc_core.ILookup$iface)){
return ((o7495$1 as lcoc_core.ILookup$iface).$_contains_key$QMARK_$1((k7496$1 as dc.dynamic), ));
}
return ((lcoc_core.ILookup.extensions((o7495$1 as dc.dynamic), ) as lcoc_core.ILookup$ext).$_contains_key$QMARK_$1((o7495$1 as dc.dynamic), (k7496$1 as dc.dynamic), ));
}

// END contains?

// BEGIN count
dc.int count(dc.dynamic coll$1, ){
final dc.dynamic coll7390$1=coll$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
return ((coll7390$1 as lcoc_core.ICounted$iface).$_count$0());
}
return ((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), ));
}

// END count

// BEGIN counted?
dc.bool counted$QMARK_(dc.dynamic coll$1, ){
return ((lcoc_core.ICounted.satisfies((coll$1 as dc.dynamic), )) as dc.bool);
}

// END counted?

// BEGIN cycle
dc.dynamic cycle(dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7200_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7200_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7200_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==temp$7200_$AUTO_$1)){
return lcoc_core.$_EMPTY_LIST;
}
final dc.dynamic s$1=temp$7200_$AUTO_$1;
return (lcoc_core.concat.$_invoke$2(s$1, lcoc_core.cycle(s$1, ), ));
} as dc.dynamic), null, -1, );
}

// END cycle

// BEGIN dec
dc.num dec(dc.dynamic x$1, ){
return ((x$1 as dc.num)-1);
}

// END dec

// BEGIN declare
lcoc_core.IFn$iface declare=lcoc_core.declare$ifn(null, );

// END declare

// BEGIN declare$ifn
class declare$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const declare$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.declare$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic names$1, ){
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), (lcoc_core.map.$_invoke$2((dc.dynamic p1$8227_$SHARP_$1, ){
return (lcoc_core.list.$_invoke$3((lcoc_core.symbol.$_invoke$2(null, "def", )), p1$8227_$SHARP_$1, null, ));
}, names$1, )), ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END declare$ifn

// BEGIN dedupe
lcoc_core.IFn$iface dedupe=lcoc_core.dedupe$ifn(null, );

// END dedupe

// BEGIN dedupe$ifn
class dedupe$ifn extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const dedupe$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.dedupe$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile pv$1=lcoc_core.volatile$BANG_(const lcoc_core.Keyword("cljd.core", "none", 2242281999, ), );
final dc.dynamic f$1=lcoc_core.Reify$45(null, rf$1, pv$1, );
return f$1;
};
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.sequence.$_invoke$2((lcoc_core.dedupe.$_invoke$0()), coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dedupe$ifn

// BEGIN def-list-for-type
dc.dynamic def_list_for_type(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic fn_name$1, dc.dynamic doc_str$1, dc.dynamic class_name$1, dc.dynamic default_value$1, ){
final dc.dynamic arg$31=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$30=(lcoc_core.list.$_invoke$1(fn_name$1, ));
final dc.dynamic arg$29=(lcoc_core.list.$_invoke$1(doc_str$1, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $14=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "int?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".filled", )), ));
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$2(arg$1, $2, ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$4, ));
final dc.dynamic $4=lcoc_core.with_meta(arg$2, $3, );
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$4(arg$3, $5, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), (lcoc_core.list.$_invoke$1(default_value$1, )), ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".from", )), ));
final dc.dynamic arg$5=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7310$7=(lcoc_core.concat.$_invoke$2(arg$4, $6, ));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}
final dc.dynamic $7=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$7, ));
final dc.dynamic $8=lcoc_core.with_meta(arg$5, $7, );
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($8, ));
final dc.dynamic o7310$8=(lcoc_core.concat.$_invoke$6(arg$6, $9, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size-or-seq", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".&", )), )), (lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "growable", 666238074, ), )), (lcoc_core.list.$_invoke$1(false, )), ));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7310$9=(lcoc_core.concat.$_invoke$4(arg$7, $12, $11, $10, ));
late final dc.dynamic $if_$9;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7310$10=(lcoc_core.concat.$_invoke$2($14, $13, ));
late final dc.dynamic $if_$10;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
final dc.dynamic $46=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7310$11=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$11;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
final dc.dynamic $15=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$11, ));
final dc.dynamic $44=(lcoc_core.list.$_invoke$1($15, ));
final dc.dynamic arg$28=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$12=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$12;
if((o7310$12 is lcoc_core.ISeqable$iface)){
$if_$12=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
final dc.dynamic $42=(lcoc_core.list.$_invoke$1($if_$12, ));
final dc.dynamic arg$24=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$11=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8484__auto__", )), ));
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".filled", )), ));
final dc.dynamic arg$9=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7310$13=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$13;
if((o7310$13 is lcoc_core.ISeqable$iface)){
$if_$13=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
final dc.dynamic $16=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic o7310$14=(lcoc_core.concat.$_invoke$2(arg$8, $16, ));
late final dc.dynamic $if_$14;
if((o7310$14 is lcoc_core.ISeqable$iface)){
$if_$14=((o7310$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions((o7310$14 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$14 as dc.dynamic), ));
}
final dc.dynamic $17=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$14, ));
final dc.dynamic $18=lcoc_core.with_meta(arg$9, $17, );
final dc.dynamic $19=(lcoc_core.list.$_invoke$1($18, ));
final dc.dynamic o7310$15=(lcoc_core.concat.$_invoke$4(arg$10, $19, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), (lcoc_core.list.$_invoke$1(default_value$1, )), ));
late final dc.dynamic $if_$15;
if((o7310$15 is lcoc_core.ISeqable$iface)){
$if_$15=((o7310$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions((o7310$15 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$15 as dc.dynamic), ));
}
final dc.dynamic $20=(lcoc_core.list.$_invoke$1($if_$15, ));
final dc.dynamic o7310$16=(lcoc_core.concat.$_invoke$2(arg$11, $20, ));
late final dc.dynamic $if_$16;
if((o7310$16 is lcoc_core.ISeqable$iface)){
$if_$16=((o7310$16 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions((o7310$16 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$16 as dc.dynamic), ));
}
final dc.dynamic $21=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$16, ));
final dc.dynamic $35=(lcoc_core.list.$_invoke$1($21, ));
final dc.dynamic arg$23=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic arg$14=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8485__auto__", )), ));
final dc.dynamic arg$13=(lcoc_core.list.$_invoke$1(0, ));
final dc.dynamic arg$12=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8486__auto__", )), ));
final dc.dynamic o7310$17=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$17;
if((o7310$17 is lcoc_core.ISeqable$iface)){
$if_$17=((o7310$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions((o7310$17 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$17 as dc.dynamic), ));
}
final dc.dynamic $22=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7310$18=(lcoc_core.concat.$_invoke$4(arg$14, arg$13, arg$12, $22, ));
late final dc.dynamic $if_$18;
if((o7310$18 is lcoc_core.ISeqable$iface)){
$if_$18=((o7310$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions((o7310$18 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$18 as dc.dynamic), ));
}
final dc.dynamic $23=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$18, ));
final dc.dynamic $33=(lcoc_core.list.$_invoke$1($23, ));
final dc.dynamic arg$22=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$16=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), ));
final dc.dynamic arg$15=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8486__auto__", )), ));
final dc.dynamic o7310$19=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8485__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), ));
late final dc.dynamic $if_$19;
if((o7310$19 is lcoc_core.ISeqable$iface)){
$if_$19=((o7310$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions((o7310$19 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$19 as dc.dynamic), ));
}
final dc.dynamic $24=(lcoc_core.list.$_invoke$1($if_$19, ));
final dc.dynamic o7310$20=(lcoc_core.concat.$_invoke$3(arg$16, arg$15, $24, ));
late final dc.dynamic $if_$20;
if((o7310$20 is lcoc_core.ISeqable$iface)){
$if_$20=((o7310$20 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions((o7310$20 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$20 as dc.dynamic), ));
}
final dc.dynamic $31=(lcoc_core.list.$_invoke$1($if_$20, ));
final dc.dynamic arg$21=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic arg$19=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "aset", )), ));
final dc.dynamic arg$18=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8484__auto__", )), ));
final dc.dynamic arg$17=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8485__auto__", )), ));
final dc.dynamic o7310$21=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8486__auto__", )), )), ));
late final dc.dynamic $if_$21;
if((o7310$21 is lcoc_core.ISeqable$iface)){
$if_$21=((o7310$21 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions((o7310$21 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$21 as dc.dynamic), ));
}
final dc.dynamic $25=(lcoc_core.list.$_invoke$1($if_$21, ));
final dc.dynamic o7310$22=(lcoc_core.concat.$_invoke$4(arg$19, arg$18, arg$17, $25, ));
late final dc.dynamic $if_$22;
if((o7310$22 is lcoc_core.ISeqable$iface)){
$if_$22=((o7310$22 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions((o7310$22 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$22 as dc.dynamic), ));
}
final dc.dynamic $29=(lcoc_core.list.$_invoke$1($if_$22, ));
final dc.dynamic arg$20=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$23=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8485__auto__", )), )), ));
late final dc.dynamic $if_$23;
if((o7310$23 is lcoc_core.ISeqable$iface)){
$if_$23=((o7310$23 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$23=((lcoc_core.ISeqable.extensions((o7310$23 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$23 as dc.dynamic), ));
}
final dc.dynamic $27=(lcoc_core.list.$_invoke$1($if_$23, ));
final dc.dynamic o7310$24=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8486__auto__", )), )), ));
late final dc.dynamic $if_$24;
if((o7310$24 is lcoc_core.ISeqable$iface)){
$if_$24=((o7310$24 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$24=((lcoc_core.ISeqable.extensions((o7310$24 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$24 as dc.dynamic), ));
}
final dc.dynamic $26=(lcoc_core.list.$_invoke$1($if_$24, ));
final dc.dynamic o7310$25=(lcoc_core.concat.$_invoke$3(arg$20, $27, $26, ));
late final dc.dynamic $if_$25;
if((o7310$25 is lcoc_core.ISeqable$iface)){
$if_$25=((o7310$25 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$25=((lcoc_core.ISeqable.extensions((o7310$25 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$25 as dc.dynamic), ));
}
final dc.dynamic $28=(lcoc_core.list.$_invoke$1($if_$25, ));
final dc.dynamic o7310$26=(lcoc_core.concat.$_invoke$3(arg$21, $29, $28, ));
late final dc.dynamic $if_$26;
if((o7310$26 is lcoc_core.ISeqable$iface)){
$if_$26=((o7310$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$26=((lcoc_core.ISeqable.extensions((o7310$26 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$26 as dc.dynamic), ));
}
final dc.dynamic $30=(lcoc_core.list.$_invoke$1($if_$26, ));
final dc.dynamic o7310$27=(lcoc_core.concat.$_invoke$4(arg$22, $31, $30, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "a__8484__auto__", )), )), ));
late final dc.dynamic $if_$27;
if((o7310$27 is lcoc_core.ISeqable$iface)){
$if_$27=((o7310$27 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$27=((lcoc_core.ISeqable.extensions((o7310$27 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$27 as dc.dynamic), ));
}
final dc.dynamic $32=(lcoc_core.list.$_invoke$1($if_$27, ));
final dc.dynamic o7310$28=(lcoc_core.concat.$_invoke$3(arg$23, $33, $32, ));
late final dc.dynamic $if_$28;
if((o7310$28 is lcoc_core.ISeqable$iface)){
$if_$28=((o7310$28 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$28=((lcoc_core.ISeqable.extensions((o7310$28 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$28 as dc.dynamic), ));
}
final dc.dynamic $34=(lcoc_core.list.$_invoke$1($if_$28, ));
final dc.dynamic o7310$29=(lcoc_core.concat.$_invoke$3(arg$24, $35, $34, ));
late final dc.dynamic $if_$29;
if((o7310$29 is lcoc_core.ISeqable$iface)){
$if_$29=((o7310$29 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$29=((lcoc_core.ISeqable.extensions((o7310$29 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$29 as dc.dynamic), ));
}
final dc.dynamic $41=(lcoc_core.list.$_invoke$1($if_$29, ));
final dc.dynamic arg$27=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".filled", )), ));
final dc.dynamic arg$26=(lcoc_core.symbol.$_invoke$2("dart:core", "List", ));
final dc.dynamic arg$25=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.dynamic o7310$30=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(class_name$1, )), ));
late final dc.dynamic $if_$30;
if((o7310$30 is lcoc_core.ISeqable$iface)){
$if_$30=((o7310$30 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$30=((lcoc_core.ISeqable.extensions((o7310$30 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$30 as dc.dynamic), ));
}
final dc.dynamic $36=(lcoc_core.list.$_invoke$1($if_$30, ));
final dc.dynamic o7310$31=(lcoc_core.concat.$_invoke$2(arg$25, $36, ));
late final dc.dynamic $if_$31;
if((o7310$31 is lcoc_core.ISeqable$iface)){
$if_$31=((o7310$31 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$31=((lcoc_core.ISeqable.extensions((o7310$31 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$31 as dc.dynamic), ));
}
final dc.dynamic $37=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$31, ));
final dc.dynamic $38=lcoc_core.with_meta(arg$26, $37, );
final dc.dynamic $39=(lcoc_core.list.$_invoke$1($38, ));
final dc.dynamic o7310$32=(lcoc_core.concat.$_invoke$4(arg$27, $39, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init-val-or-seq", )), )), ));
late final dc.dynamic $if_$32;
if((o7310$32 is lcoc_core.ISeqable$iface)){
$if_$32=((o7310$32 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$32=((lcoc_core.ISeqable.extensions((o7310$32 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$32 as dc.dynamic), ));
}
final dc.dynamic $40=(lcoc_core.list.$_invoke$1($if_$32, ));
final dc.dynamic o7310$33=(lcoc_core.concat.$_invoke$4(arg$28, $42, $41, $40, ));
late final dc.dynamic $if_$33;
if((o7310$33 is lcoc_core.ISeqable$iface)){
$if_$33=((o7310$33 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$33=((lcoc_core.ISeqable.extensions((o7310$33 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$33 as dc.dynamic), ));
}
final dc.dynamic $43=(lcoc_core.list.$_invoke$1($if_$33, ));
final dc.dynamic o7310$34=(lcoc_core.concat.$_invoke$2($44, $43, ));
late final dc.dynamic $if_$34;
if((o7310$34 is lcoc_core.ISeqable$iface)){
$if_$34=((o7310$34 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$34=((lcoc_core.ISeqable.extensions((o7310$34 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$34 as dc.dynamic), ));
}
final dc.dynamic $45=(lcoc_core.list.$_invoke$1($if_$34, ));
final dc.dynamic o7310$35=(lcoc_core.concat.$_invoke$5(arg$31, arg$30, arg$29, $46, $45, ));
if((o7310$35 is lcoc_core.ISeqable$iface)){
return ((o7310$35 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$35 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$35 as dc.dynamic), ));
}

// END def-list-for-type

// BEGIN default-data-readers
var default_data_readers=(){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(4, (lcoc_core.symbol.$_invoke$2(null, "inst", )), ));
fl$1[1]=(dc.dynamic form$1, ){
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "form", 3383402018, ), ));
fl$2[1]=form$1;
final lcoc_core.PersistentHashMap $2=lcoc_core.$_map_lit(fl$2, );
throw (lcoc_core.ex_info.$_invoke$2("Not implemented yet", $2, ));
};
fl$1[2]=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
fl$1[3]=(dc.dynamic form$2, ){
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "form", 3383402018, ), ));
fl$3[1]=form$2;
final lcoc_core.PersistentHashMap $3=lcoc_core.$_map_lit(fl$3, );
throw (lcoc_core.ex_info.$_invoke$2("Not implemented yet", $3, ));
};
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
return $1;
}();

// END default-data-readers

// BEGIN definterface
lcoc_core.IFn$iface definterface=lcoc_core.definterface$ifn(null, );

// END definterface

// BEGIN definterface$ifn
class definterface$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const definterface$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.definterface$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic iface$1, dc.dynamic meths$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "deftype", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$4(iface$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "abstract", 928480153, ), true, )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$7(arg$3, arg$2, $4, (lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-only", 3917315094, ), )), (lcoc_core.list.$_invoke$1(true, )), (lcoc_core.list.$_invoke$1(iface$1, )), (lcoc_core.map.$_invoke$2((dc.dynamic p$8198_$1, ){
final dc.dynamic vec$8199_$1=p$8198_$1;
final dc.dynamic meth$1=(lcoc_core.nth.$_invoke$3(vec$8199_$1, 0, null, ));
final dc.dynamic args$1=(lcoc_core.nth.$_invoke$3(vec$8199_$1, 1, null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(meth$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "_", )), )), args$1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2(arg$1, $3, ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}, meths$1, )), ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END definterface$ifn

// BEGIN defmacro
lcoc_core.IFn$iface defmacro=lcoc_core.defmacro$ifn(null, );

// END defmacro

// BEGIN defmacro$ifn
class defmacro$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const defmacro$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.defmacro$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic args$1, ){
final dc.dynamic name$2=(lcoc_core.vary_meta.$_invoke$4(name$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "macro", 2712250679, ), true, ));
late final dc.dynamic prefix$1;
dc.dynamic p$1=(lcoc_core.list.$_invoke$1(name$2, ));
dc.dynamic args$2=args$1;
do {
final dc.dynamic f$1=lcoc_core.first(args$2, );
if(lcoc_core.string$QMARK_(f$1, )){
p$1=lcoc_core.cons(f$1, p$1, );
args$2=lcoc_core.next(args$2, );
continue;
}
if(lcoc_core.map$QMARK_(f$1, )){
p$1=lcoc_core.cons(f$1, p$1, );
args$2=lcoc_core.next(args$2, );
continue;
}
prefix$1=p$1;
break;
} while(true);
late final dc.dynamic fdecl$1;
dc.dynamic fd$1=args$1;
do {
if(lcoc_core.string$QMARK_(lcoc_core.first(fd$1, ), )){
fd$1=lcoc_core.next(fd$1, );
continue;
}
if(lcoc_core.map$QMARK_(lcoc_core.first(fd$1, ), )){
fd$1=lcoc_core.next(fd$1, );
continue;
}
fdecl$1=fd$1;
break;
} while(true);
late final dc.dynamic fdecl$2;
if(lcoc_core.vector$QMARK_(lcoc_core.first(fdecl$1, ), )){
fdecl$2=(lcoc_core.list.$_invoke$1(fdecl$1, ));
}else{
fdecl$2=fdecl$1;
}
dc.dynamic add_implicit_args$1(dc.dynamic fd$2, ){
final dc.dynamic args$3=lcoc_core.first(fd$2, );
return lcoc_core.cons(lcoc_core.vec(lcoc_core.cons((lcoc_core.symbol.$_invoke$2(null, "&form", )), lcoc_core.cons((lcoc_core.symbol.$_invoke$2(null, "&env", )), args$3, ), ), ), lcoc_core.next(fd$2, ), );
}
dc.dynamic add_args$1(dc.dynamic acc$2, dc.dynamic ds$2, ){
dc.dynamic acc$1=acc$2;
dc.dynamic ds$1=ds$2;
do {
if((null==(ds$1 as dc.dynamic))){
return acc$1;
}
final dc.dynamic d$1=lcoc_core.first(ds$1, );
if(lcoc_core.map$QMARK_(d$1, )){
final dc.dynamic coll7355$1=acc$1;
final dc.dynamic o7356$1=d$1;
if((coll7355$1 is lcoc_core.ICollection$iface)){
return ((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}
return ((lcoc_core.ICollection.extensions((coll7355$1 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$1 as dc.dynamic), (o7356$1 as dc.dynamic), ));
}
final dc.dynamic coll7355$2=acc$1;
final dc.dynamic o7356$2=add_implicit_args$1(d$1, );
if((coll7355$2 is lcoc_core.ICollection$iface)){
acc$1=((coll7355$2 as lcoc_core.ICollection$iface).$_conj$1(o7356$2, ));
}else{
acc$1=((lcoc_core.ICollection.extensions((coll7355$2 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$2 as dc.dynamic), o7356$2, ));
}
ds$1=lcoc_core.next(ds$1, );
continue;
} while(true);
}
final dc.dynamic o7310$1=add_args$1(lcoc_core.$_EMPTY_VECTOR, fdecl$2, );
late final dc.dynamic fdecl$3;
if((o7310$1 is lcoc_core.ISeqable$iface)){
fdecl$3=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
fdecl$3=((lcoc_core.ISeqable.extensions(o7310$1, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$1, ));
}
late final dc.dynamic decl$1;
dc.dynamic p$2=prefix$1;
dc.dynamic d$2=fdecl$3;
do {
if(((p$2!=false)&&(p$2!=null))){
final dc.dynamic p$2tmp=lcoc_core.next(p$2, );
d$2=lcoc_core.cons(lcoc_core.first(p$2, ), d$2, );
p$2=p$2tmp;
continue;
}
decl$1=d$2;
break;
} while(true);
return lcoc_core.cons((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), decl$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defmacro$ifn

// BEGIN defn
var defn=(){
final dc.dynamic defn$1=lcoc_core.defn$ifn(null, );
return defn$1;
}();

// END defn

// BEGIN defn$ifn
class defn$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const defn$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.defn$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic fname$1, dc.dynamic fdecl$1, ){
if(lcoc_core.symbol$QMARK_(fname$1, )){
}else{
throw lcoc_core.argument_error("First argument to defn must be a symbol", );
}
late final lcoc_core.PersistentHashMap m$1;
if(lcoc_core.string$QMARK_(lcoc_core.first(fdecl$1, ), )){
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "doc", 32388919, ), ));
fl$10[1]=lcoc_core.first(fdecl$1, );
m$1=lcoc_core.$_map_lit(fl$10, );
}else{
m$1=lcoc_core.$_EMPTY_MAP;
}
late final dc.dynamic fdecl$2;
if(lcoc_core.string$QMARK_(lcoc_core.first(fdecl$1, ), )){
fdecl$2=lcoc_core.next(fdecl$1, );
}else{
fdecl$2=fdecl$1;
}
late final dc.dynamic m$2;
if(lcoc_core.map$QMARK_(lcoc_core.first(fdecl$2, ), )){
final lcoc_core.PersistentHashMap coll7355$1=m$1;
final dc.dynamic o7356$1=lcoc_core.first(fdecl$2, );
m$2=(coll7355$1.$_conj$1((o7356$1 as dc.dynamic), ));
}else{
m$2=m$1;
}
late final dc.dynamic fdecl$3;
if(lcoc_core.map$QMARK_(lcoc_core.first(fdecl$2, ), )){
fdecl$3=lcoc_core.next(fdecl$2, );
}else{
fdecl$3=fdecl$2;
}
late final dc.dynamic fdecl$4;
if(lcoc_core.vector$QMARK_(lcoc_core.first(fdecl$3, ), )){
fdecl$4=(lcoc_core.list.$_invoke$1(fdecl$3, ));
}else{
fdecl$4=fdecl$3;
}
late final dc.dynamic m$3;
if(lcoc_core.map$QMARK_(lcoc_core.last(fdecl$4, ), )){
final dc.dynamic coll7355$2=m$2;
final dc.dynamic o7356$2=lcoc_core.last(fdecl$4, );
if((coll7355$2 is lcoc_core.ICollection$iface)){
m$3=((coll7355$2 as lcoc_core.ICollection$iface).$_conj$1((o7356$2 as dc.dynamic), ));
}else{
m$3=((lcoc_core.ICollection.extensions(coll7355$2, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$2, (o7356$2 as dc.dynamic), ));
}
}else{
m$3=m$2;
}
late final dc.dynamic fdecl$5;
if(lcoc_core.map$QMARK_(lcoc_core.last(fdecl$4, ), )){
fdecl$5=lcoc_core.butlast(fdecl$4, );
}else{
fdecl$5=fdecl$4;
}
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "arglists", 265572513, ), ));
fl$11[1]=(lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "quote", )), lcoc_core.sigs(fdecl$5, ), ));
final lcoc_core.PersistentHashMap coll7355$3=lcoc_core.$_map_lit(fl$11, );
final dc.dynamic o7356$3=m$3;
final dc.dynamic m$4=(coll7355$3.$_conj$1(o7356$3, ));
final dc.dynamic inline$1=(const lcoc_core.Keyword(null, "inline", 51465281, ).$_invoke$1(m$4, ));
final dc.dynamic ifn$1=lcoc_core.first(inline$1, );
final dc.dynamic iname$1=lcoc_core.second(inline$1, );
late final dc.bool? $if_$10;
if((lcoc_core.$EQ_.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "fn", )), ifn$1, ))){
if(lcoc_core.symbol$QMARK_(iname$1, )){
$if_$10=false;
}else{
$if_$10=true;
}
}else{
$if_$10=null;
}
late final dc.dynamic m$5;
if((($if_$10!=false)&&($if_$10!=null))){
final dc.dynamic coll7440$1=m$4;
final lcoc_core.Keyword k7441$1=const lcoc_core.Keyword(null, "inline", 51465281, );
final dc.dynamic v7442$1=lcoc_core.cons(ifn$1, lcoc_core.cons((lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2(lcoc_core.name(fname$1, ), "__inliner", )), )), lcoc_core.next(inline$1, ), ), );
if((coll7440$1 is lcoc_core.IAssociative$iface)){
m$5=((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7441$1, (v7442$1 as dc.dynamic), ));
}else{
m$5=((lcoc_core.IAssociative.extensions(coll7440$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7440$1, k7441$1, (v7442$1 as dc.dynamic), ));
}
}else{
m$5=m$4;
}
final dc.dynamic o7524$1=fname$1;
late final dc.dynamic $if_$11;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$11=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$11=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
late final dc.dynamic coll7355$4;
if((($if_$11!=false)&&($if_$11!=null))){
final dc.dynamic o7524$2=fname$1;
if((o7524$2 is lcoc_core.IMeta$iface)){
coll7355$4=((o7524$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
coll7355$4=((lcoc_core.IMeta.extensions((o7524$2 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$2 as dc.dynamic), ));
}
}else{
coll7355$4=lcoc_core.$_EMPTY_MAP;
}
final dc.dynamic o7356$4=m$5;
late final dc.dynamic m$6;
if((coll7355$4 is lcoc_core.ICollection$iface)){
m$6=((coll7355$4 as lcoc_core.ICollection$iface).$_conj$1(o7356$4, ));
}else{
m$6=((lcoc_core.ICollection.extensions(coll7355$4, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$4, o7356$4, ));
}
final dc.dynamic arg$30=(lcoc_core.symbol.$_invoke$2(null, "def", ));
final dc.dynamic arg$29=lcoc_core.with_meta(fname$1, m$6, );
final dc.dynamic arg$28=lcoc_core.cons((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), fdecl$5, );
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "rettag", 211607520, ), ));
fl$12[1]=(const lcoc_core.Keyword(null, "tag", 2780644040, ).$_invoke$1(m$6, ));
fl$12[2]=const lcoc_core.Keyword(null, "async", 3061312102, );
fl$12[3]=(const lcoc_core.Keyword(null, "async", 3061312102, ).$_invoke$1(m$6, ));
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$12, );
final dc.dynamic $2=lcoc_core.with_meta(arg$28, $1, );
return (lcoc_core.list.$_invoke$3(arg$30, arg$29, $2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defn$ifn

// BEGIN defn-
lcoc_core.IFn$iface defn_=lcoc_core.defn_$ifn(null, );

// END defn-

// BEGIN defn_$ifn
class defn_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const defn_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.defn_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic decls$1, ){
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2("clojure.core", "defn", ));
final dc.dynamic o7524$1=name$1;
late final dc.dynamic coll7440$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
coll7440$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
coll7440$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
final lcoc_core.Keyword k7441$1=const lcoc_core.Keyword(null, "private", 3017064578, );
final dc.bool v7442$1=true;
late final dc.dynamic $if_$1;
if((coll7440$1 is lcoc_core.IAssociative$iface)){
$if_$1=((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2(k7441$1, v7442$1, ));
}else{
$if_$1=((lcoc_core.IAssociative.extensions(coll7440$1, ) as lcoc_core.IAssociative$ext).$_assoc$2(coll7440$1, k7441$1, v7442$1, ));
}
final dc.dynamic $1=lcoc_core.with_meta(name$1, $if_$1, );
return (lcoc_core.list$STAR_.$_invoke$3(arg$1, $1, decls$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defn_$ifn

// BEGIN defrecord
lcoc_core.IFn$iface defrecord=lcoc_core.defrecord$ifn(null, );

// END defrecord

// BEGIN defrecord$ifn
class defrecord$ifn extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const defrecord$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.defrecord$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic p$8829_$1, dc.dynamic opts$PLUS_specs$1, ){
final dc.dynamic vec$8831_$1=p$8829_$1;
final dc.dynamic o7310$1=vec$8831_$1;
late final dc.dynamic seq$8832_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
seq$8832_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8832_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic fields$1=seq$8832_$1;
late final dc.dynamic key$1;
if((lcoc_core.gensym is dc.Function)){
key$1=(lcoc_core.gensym as dc.Function)("key", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
key$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("key", ));
}else{
key$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "key", ));
}
final dc.dynamic arg$2=(lcoc_core.symbol.$_invoke$2(null, "extmap", ));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2("dart:core", "Map", ));
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
fl$3[1]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentList $3=lcoc_core.$_list_lit(fl$3, );
fl$2[1]=$3;
final lcoc_core.PersistentHashMap $2=lcoc_core.$_map_lit(fl$2, );
final dc.dynamic $4=lcoc_core.with_meta(arg$1, $2, );
fl$1[1]=$4;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic extmap$1=lcoc_core.with_meta(arg$2, $1, );
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(38, (lcoc_core.symbol.$_invoke$2("cljd.core", "EqualsEquivMixin", )), ));
fl$4[1]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IRecord", ));
fl$4[2]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IEquiv", ));
late final dc.dynamic $if_$11;
if((lcoc_core.gensym is dc.Function)){
$if_$11=(lcoc_core.gensym as dc.Function)("this", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
$if_$11=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("this", ));
}else{
$if_$11=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "this", ));
}
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$10[1]=name$1;
final lcoc_core.PersistentHashMap $32=lcoc_core.$_map_lit(fl$10, );
final dc.dynamic $this_$1=lcoc_core.with_meta($if_$11, $32, );
late final dc.dynamic other$1;
if((lcoc_core.gensym is dc.Function)){
other$1=(lcoc_core.gensym as dc.Function)("other", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
other$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("other", ));
}else{
other$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "other", ));
}
final dc.dynamic arg$32=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-equiv", )), ));
final dc.dynamic o7310$13=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1($this_$1, )), (lcoc_core.list.$_invoke$1(other$1, )), ));
late final dc.dynamic $if_$12;
if((o7310$13 is lcoc_core.ISeqable$iface)){
$if_$12=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
final dc.dynamic $33=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$12, ));
final dc.dynamic $47=(lcoc_core.list.$_invoke$1($33, ));
final dc.dynamic arg$31=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic o7310$14=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "identical?", )), )), (lcoc_core.list.$_invoke$1($this_$1, )), (lcoc_core.list.$_invoke$1(other$1, )), ));
late final dc.dynamic $if_$13;
if((o7310$14 is lcoc_core.ISeqable$iface)){
$if_$13=((o7310$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$13=((lcoc_core.ISeqable.extensions((o7310$14 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$14 as dc.dynamic), ));
}
final dc.dynamic $45=(lcoc_core.list.$_invoke$1($if_$13, ));
final dc.dynamic arg$30=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), ));
final dc.dynamic o7310$15=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart", "is?", )), )), (lcoc_core.list.$_invoke$1(other$1, )), (lcoc_core.list.$_invoke$1(name$1, )), ));
late final dc.dynamic $if_$14;
if((o7310$15 is lcoc_core.ISeqable$iface)){
$if_$14=((o7310$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$14=((lcoc_core.ISeqable.extensions((o7310$15 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$15 as dc.dynamic), ));
}
final dc.dynamic $43=(lcoc_core.list.$_invoke$1($if_$14, ));
final dc.dynamic arg$29=(lcoc_core.map.$_invoke$2((dc.dynamic field$1, ){
final dc.dynamic arg$25=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "=", )), ));
final dc.dynamic arg$24=(lcoc_core.list.$_invoke$1((lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2(".-", field$1, )), )), $this_$1, )), ));
final dc.dynamic arg$23=(lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2(".-", field$1, )), ));
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$11[1]=name$1;
final lcoc_core.PersistentHashMap $34=lcoc_core.$_map_lit(fl$11, );
final dc.dynamic $35=lcoc_core.with_meta(other$1, $34, );
final dc.dynamic $36=(lcoc_core.list.$_invoke$2(arg$23, $35, ));
final dc.dynamic $37=(lcoc_core.list.$_invoke$1($36, ));
final dc.dynamic o7310$16=(lcoc_core.concat.$_invoke$3(arg$25, arg$24, $37, ));
if((o7310$16 is lcoc_core.ISeqable$iface)){
return ((o7310$16 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$16 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$16 as dc.dynamic), ));
}, fields$1, ));
final dc.dynamic arg$28=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "=", )), ));
final dc.dynamic arg$27=(lcoc_core.list.$_invoke$1(extmap$1, ));
final dc.dynamic arg$26=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-extmap", )), ));
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$12[1]=name$1;
final lcoc_core.PersistentHashMap $38=lcoc_core.$_map_lit(fl$12, );
final dc.dynamic $39=lcoc_core.with_meta(other$1, $38, );
final dc.dynamic $40=(lcoc_core.list.$_invoke$1($39, ));
final dc.dynamic o7310$17=(lcoc_core.concat.$_invoke$2(arg$26, $40, ));
late final dc.dynamic $if_$15;
if((o7310$17 is lcoc_core.ISeqable$iface)){
$if_$15=((o7310$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions((o7310$17 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$17 as dc.dynamic), ));
}
final dc.dynamic $41=(lcoc_core.list.$_invoke$1($if_$15, ));
final dc.dynamic o7310$18=(lcoc_core.concat.$_invoke$3(arg$28, arg$27, $41, ));
late final dc.dynamic $if_$16;
if((o7310$18 is lcoc_core.ISeqable$iface)){
$if_$16=((o7310$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions((o7310$18 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$18 as dc.dynamic), ));
}
final dc.dynamic $42=(lcoc_core.list.$_invoke$1($if_$16, ));
final dc.dynamic o7310$19=(lcoc_core.concat.$_invoke$4(arg$30, $43, arg$29, $42, ));
late final dc.dynamic $if_$17;
if((o7310$19 is lcoc_core.ISeqable$iface)){
$if_$17=((o7310$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions((o7310$19 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$19 as dc.dynamic), ));
}
final dc.dynamic $44=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7310$20=(lcoc_core.concat.$_invoke$3(arg$31, $45, $44, ));
late final dc.dynamic $if_$18;
if((o7310$20 is lcoc_core.ISeqable$iface)){
$if_$18=((o7310$20 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions((o7310$20 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$20 as dc.dynamic), ));
}
final dc.dynamic $46=(lcoc_core.list.$_invoke$1($if_$18, ));
final dc.dynamic o7310$21=(lcoc_core.concat.$_invoke$3(arg$32, $47, $46, ));
late final dc.dynamic $if_$19;
if((o7310$21 is lcoc_core.ISeqable$iface)){
$if_$19=((o7310$21 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions((o7310$21 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$21 as dc.dynamic), ));
}
fl$4[3]=$if_$19;
fl$4[4]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IMap", ));
final dc.dynamic arg$41=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-dissoc", )), ));
final dc.dynamic o7310$22=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8795__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8796__auto__", )), )), ));
late final dc.dynamic $if_$20;
if((o7310$22 is lcoc_core.ISeqable$iface)){
$if_$20=((o7310$22 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions((o7310$22 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$22 as dc.dynamic), ));
}
final dc.dynamic $48=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$20, ));
final dc.dynamic $64=(lcoc_core.list.$_invoke$1($48, ));
final dc.dynamic arg$40=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$33=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "contains?", )), ));
final dc.dynamic o7310$23=(lcoc_core.concat.$_invoke$1((lcoc_core.map.$_invoke$2(lcoc_core.keyword, fields$1, )), ));
late final dc.dynamic $if_$21;
if((o7310$23 is lcoc_core.ISeqable$iface)){
$if_$21=((o7310$23 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions((o7310$23 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$23 as dc.dynamic), ));
}
final dc.dynamic $49=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_set, $if_$21, ));
final dc.dynamic $50=(lcoc_core.list.$_invoke$1($49, ));
final dc.dynamic o7310$24=(lcoc_core.concat.$_invoke$3(arg$33, $50, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8796__auto__", )), )), ));
late final dc.dynamic $if_$22;
if((o7310$24 is lcoc_core.ISeqable$iface)){
$if_$22=((o7310$24 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions((o7310$24 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$24 as dc.dynamic), ));
}
final dc.dynamic $62=(lcoc_core.list.$_invoke$1($if_$22, ));
final dc.dynamic arg$36=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dissoc", )), ));
final dc.dynamic arg$35=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "with-meta", )), ));
final dc.dynamic arg$34=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "into", )), ));
final dc.dynamic o7310$25=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$23;
if((o7310$25 is lcoc_core.ISeqable$iface)){
$if_$23=((o7310$25 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$23=((lcoc_core.ISeqable.extensions((o7310$25 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$25 as dc.dynamic), ));
}
final dc.dynamic $51=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$23, ));
final dc.dynamic $52=(lcoc_core.list.$_invoke$1($51, ));
final dc.dynamic o7310$26=(lcoc_core.concat.$_invoke$3(arg$34, $52, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8795__auto__", )), )), ));
late final dc.dynamic $if_$24;
if((o7310$26 is lcoc_core.ISeqable$iface)){
$if_$24=((o7310$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$24=((lcoc_core.ISeqable.extensions((o7310$26 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$26 as dc.dynamic), ));
}
final dc.dynamic $53=(lcoc_core.list.$_invoke$1($if_$24, ));
final dc.dynamic o7310$27=(lcoc_core.concat.$_invoke$3(arg$35, $53, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "meta", )), )), ));
late final dc.dynamic $if_$25;
if((o7310$27 is lcoc_core.ISeqable$iface)){
$if_$25=((o7310$27 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$25=((lcoc_core.ISeqable.extensions((o7310$27 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$27 as dc.dynamic), ));
}
final dc.dynamic $54=(lcoc_core.list.$_invoke$1($if_$25, ));
final dc.dynamic o7310$28=(lcoc_core.concat.$_invoke$3(arg$36, $54, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8796__auto__", )), )), ));
late final dc.dynamic $if_$26;
if((o7310$28 is lcoc_core.ISeqable$iface)){
$if_$26=((o7310$28 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$26=((lcoc_core.ISeqable.extensions((o7310$28 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$28 as dc.dynamic), ));
}
final dc.dynamic $61=(lcoc_core.list.$_invoke$1($if_$26, ));
final dc.dynamic arg$39=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$38=(lcoc_core.list.$_invoke$1(name$1, ));
final lcoc_core.PersistentVector coll7355$1=lcoc_core.vec(fields$1, );
final dc.dynamic o7356$1=(lcoc_core.symbol.$_invoke$2(null, "meta", ));
final dc.dynamic $59=(coll7355$1.$_conj$1((o7356$1 as dc.dynamic), ));
final dc.dynamic arg$37=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic o7310$29=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dissoc", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8796__auto__", )), )), ));
late final dc.dynamic $if_$27;
if((o7310$29 is lcoc_core.ISeqable$iface)){
$if_$27=((o7310$29 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$27=((lcoc_core.ISeqable.extensions((o7310$29 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$29 as dc.dynamic), ));
}
final dc.dynamic $57=(lcoc_core.list.$_invoke$1($if_$27, ));
final dc.dynamic o7310$30=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$28;
if((o7310$30 is lcoc_core.ISeqable$iface)){
$if_$28=((o7310$30 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$28=((lcoc_core.ISeqable.extensions((o7310$30 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$30 as dc.dynamic), ));
}
final dc.dynamic $55=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$28, ));
final dc.dynamic $56=(lcoc_core.list.$_invoke$1($55, ));
final dc.dynamic o7310$31=(lcoc_core.concat.$_invoke$3(arg$37, $57, $56, ));
late final dc.dynamic $if_$29;
if((o7310$31 is lcoc_core.ISeqable$iface)){
$if_$29=((o7310$31 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$29=((lcoc_core.ISeqable.extensions((o7310$31 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$31 as dc.dynamic), ));
}
final dc.dynamic $58=(lcoc_core.list.$_invoke$1($if_$29, ));
final dc.dynamic o7310$32=(lcoc_core.concat.$_invoke$5(arg$39, arg$38, $59, $58, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$30;
if((o7310$32 is lcoc_core.ISeqable$iface)){
$if_$30=((o7310$32 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$30=((lcoc_core.ISeqable.extensions((o7310$32 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$32 as dc.dynamic), ));
}
final dc.dynamic $60=(lcoc_core.list.$_invoke$1($if_$30, ));
final dc.dynamic o7310$33=(lcoc_core.concat.$_invoke$4(arg$40, $62, $61, $60, ));
late final dc.dynamic $if_$31;
if((o7310$33 is lcoc_core.ISeqable$iface)){
$if_$31=((o7310$33 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$31=((lcoc_core.ISeqable.extensions((o7310$33 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$33 as dc.dynamic), ));
}
final dc.dynamic $63=(lcoc_core.list.$_invoke$1($if_$31, ));
final dc.dynamic o7310$34=(lcoc_core.concat.$_invoke$3(arg$41, $64, $63, ));
late final dc.dynamic $if_$32;
if((o7310$34 is lcoc_core.ISeqable$iface)){
$if_$32=((o7310$34 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$32=((lcoc_core.ISeqable.extensions((o7310$34 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$34 as dc.dynamic), ));
}
fl$4[5]=$if_$32;
fl$4[6]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ISeqable", ));
final dc.dynamic arg$44=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-seq", )), ));
final dc.dynamic o7310$35=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8798__auto__", )), )), ));
late final dc.dynamic $if_$33;
if((o7310$35 is lcoc_core.ISeqable$iface)){
$if_$33=((o7310$35 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$33=((lcoc_core.ISeqable.extensions((o7310$35 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$35 as dc.dynamic), ));
}
final dc.dynamic $65=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$33, ));
final dc.dynamic $70=(lcoc_core.list.$_invoke$1($65, ));
final dc.dynamic arg$43=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), ));
final dc.dynamic arg$42=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "concat", )), ));
final dc.dynamic o7310$36=(lcoc_core.concat.$_invoke$1((lcoc_core.map.$_invoke$2((dc.dynamic p1$8797_$SHARP_$1, ){
return (lcoc_core.list.$_invoke$5((lcoc_core.symbol.$_invoke$2(null, "new", )), (lcoc_core.symbol.$_invoke$2("cljd.core", "PersistentMapEntry", )), (lcoc_core.keyword.$_invoke$1(p1$8797_$SHARP_$1, )), p1$8797_$SHARP_$1, -1, ));
}, fields$1, )), ));
late final dc.dynamic $if_$34;
if((o7310$36 is lcoc_core.ISeqable$iface)){
$if_$34=((o7310$36 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$34=((lcoc_core.ISeqable.extensions((o7310$36 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$36 as dc.dynamic), ));
}
final dc.dynamic $66=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$34, ));
final dc.dynamic $67=(lcoc_core.list.$_invoke$1($66, ));
final dc.dynamic o7310$37=(lcoc_core.concat.$_invoke$3(arg$42, $67, (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$35;
if((o7310$37 is lcoc_core.ISeqable$iface)){
$if_$35=((o7310$37 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$35=((lcoc_core.ISeqable.extensions((o7310$37 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$37 as dc.dynamic), ));
}
final dc.dynamic $68=(lcoc_core.list.$_invoke$1($if_$35, ));
final dc.dynamic o7310$38=(lcoc_core.concat.$_invoke$2(arg$43, $68, ));
late final dc.dynamic $if_$36;
if((o7310$38 is lcoc_core.ISeqable$iface)){
$if_$36=((o7310$38 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$36=((lcoc_core.ISeqable.extensions((o7310$38 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$38 as dc.dynamic), ));
}
final dc.dynamic $69=(lcoc_core.list.$_invoke$1($if_$36, ));
final dc.dynamic o7310$39=(lcoc_core.concat.$_invoke$3(arg$44, $70, $69, ));
late final dc.dynamic $if_$37;
if((o7310$39 is lcoc_core.ISeqable$iface)){
$if_$37=((o7310$39 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$37=((lcoc_core.ISeqable.extensions((o7310$39 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$39 as dc.dynamic), ));
}
fl$4[7]=$if_$37;
fl$4[8]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IAssociative", ));
late final dc.dynamic v$1;
if((lcoc_core.gensym is dc.Function)){
v$1=(lcoc_core.gensym as dc.Function)("val", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
v$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("val", ));
}else{
v$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "val", ));
}
final dc.dynamic arg$52=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-assoc", )), ));
final dc.dynamic o7310$40=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8799__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8800__auto__", )), )), (lcoc_core.list.$_invoke$1(v$1, )), ));
late final dc.dynamic $if_$38;
if((o7310$40 is lcoc_core.ISeqable$iface)){
$if_$38=((o7310$40 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$38=((lcoc_core.ISeqable.extensions((o7310$40 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$40 as dc.dynamic), ));
}
final dc.dynamic $71=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$38, ));
final dc.dynamic $78=(lcoc_core.list.$_invoke$1($71, ));
final dc.dynamic arg$51=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), ));
final dc.dynamic arg$50=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8800__auto__", )), ));
final dc.dynamic arg$49=(lcoc_core.mapcat.$_invoke$2((dc.dynamic fld$1, ){
final dc.List<dc.dynamic> fl$13=(dc.List<dc.dynamic>.filled(2, (lcoc_core.keyword.$_invoke$1(fld$1, )), ));
final dc.dynamic arg$45=(lcoc_core.symbol.$_invoke$2(null, "new", ));
final dc.List<dc.dynamic> fl$14=(dc.List<dc.dynamic>.filled(2, fld$1, ));
fl$14[1]=v$1;
final lcoc_core.PersistentHashMap $72=lcoc_core.$_map_lit(fl$14, );
final dc.dynamic $73=(lcoc_core.replace.$_invoke$2($72, (lcoc_core.conj.$_invoke$4(lcoc_core.vec(fields$1, ), (lcoc_core.symbol.$_invoke$2(null, "meta", )), extmap$1, -1, )), ));
final dc.dynamic $74=(lcoc_core.list$STAR_.$_invoke$3(arg$45, name$1, $73, ));
fl$13[1]=$74;
return lcoc_core.$_vec_owning(fl$13, );
}, fields$1, ));
final dc.dynamic arg$48=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$47=(lcoc_core.list.$_invoke$1(name$1, ));
final dc.dynamic arg$46=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "meta", )), ));
final dc.dynamic o7310$41=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assoc", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8800__auto__", )), )), (lcoc_core.list.$_invoke$1(v$1, )), ));
late final dc.dynamic $if_$39;
if((o7310$41 is lcoc_core.ISeqable$iface)){
$if_$39=((o7310$41 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$39=((lcoc_core.ISeqable.extensions((o7310$41 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$41 as dc.dynamic), ));
}
final dc.dynamic $75=(lcoc_core.list.$_invoke$1($if_$39, ));
final dc.dynamic o7310$42=(lcoc_core.concat.$_invoke$6(arg$48, arg$47, fields$1, arg$46, $75, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$40;
if((o7310$42 is lcoc_core.ISeqable$iface)){
$if_$40=((o7310$42 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$40=((lcoc_core.ISeqable.extensions((o7310$42 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$42 as dc.dynamic), ));
}
final dc.dynamic $76=(lcoc_core.list.$_invoke$1($if_$40, ));
final dc.dynamic o7310$43=(lcoc_core.concat.$_invoke$4(arg$51, arg$50, arg$49, $76, ));
late final dc.dynamic $if_$41;
if((o7310$43 is lcoc_core.ISeqable$iface)){
$if_$41=((o7310$43 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$41=((lcoc_core.ISeqable.extensions((o7310$43 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$43 as dc.dynamic), ));
}
final dc.dynamic $77=(lcoc_core.list.$_invoke$1($if_$41, ));
final dc.dynamic o7310$44=(lcoc_core.concat.$_invoke$3(arg$52, $78, $77, ));
late final dc.dynamic $if_$42;
if((o7310$44 is lcoc_core.ISeqable$iface)){
$if_$42=((o7310$44 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$42=((lcoc_core.ISeqable.extensions((o7310$44 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$44 as dc.dynamic), ));
}
fl$4[9]=$if_$42;
fl$4[10]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ILookup", ));
final dc.dynamic arg$57=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-contains-key?", )), ));
final dc.dynamic o7310$45=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8801__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), ));
late final dc.dynamic $if_$43;
if((o7310$45 is lcoc_core.ISeqable$iface)){
$if_$43=((o7310$45 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$43=((lcoc_core.ISeqable.extensions((o7310$45 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$45 as dc.dynamic), ));
}
final dc.dynamic $79=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$43, ));
final dc.dynamic $82=(lcoc_core.list.$_invoke$1($79, ));
final dc.dynamic o7310$46=fields$1;
late final dc.dynamic $if_$44;
if((o7310$46 is lcoc_core.ISeqable$iface)){
$if_$44=((o7310$46 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$44=((lcoc_core.ISeqable.extensions(o7310$46, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$46, ));
}
late final dc.dynamic $if_$46;
if((($if_$44!=false)&&($if_$44!=null))){
final dc.dynamic arg$56=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), ));
final dc.dynamic arg$55=(lcoc_core.list.$_invoke$1(key$1, ));
final dc.dynamic arg$54=(lcoc_core.list.$_invoke$1((lcoc_core.map.$_invoke$2(lcoc_core.keyword, fields$1, )), ));
final dc.dynamic arg$53=(lcoc_core.list.$_invoke$1(true, ));
final dc.dynamic o7310$47=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "contains?", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1(key$1, )), ));
late final dc.dynamic $if_$45;
if((o7310$47 is lcoc_core.ISeqable$iface)){
$if_$45=((o7310$47 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$45=((lcoc_core.ISeqable.extensions((o7310$47 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$47 as dc.dynamic), ));
}
final dc.dynamic $80=(lcoc_core.list.$_invoke$1($if_$45, ));
final dc.dynamic o7310$48=(lcoc_core.concat.$_invoke$5(arg$56, arg$55, arg$54, arg$53, $80, ));
if((o7310$48 is lcoc_core.ISeqable$iface)){
$if_$46=((o7310$48 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$46=((lcoc_core.ISeqable.extensions((o7310$48 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$48 as dc.dynamic), ));
}
}else{
final dc.dynamic o7310$49=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "contains?", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1(key$1, )), ));
if((o7310$49 is lcoc_core.ISeqable$iface)){
$if_$46=((o7310$49 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$46=((lcoc_core.ISeqable.extensions((o7310$49 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$49 as dc.dynamic), ));
}
}
final dc.dynamic $81=(lcoc_core.list.$_invoke$1($if_$46, ));
final dc.dynamic o7310$50=(lcoc_core.concat.$_invoke$3(arg$57, $82, $81, ));
late final dc.dynamic $if_$47;
if((o7310$50 is lcoc_core.ISeqable$iface)){
$if_$47=((o7310$50 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$47=((lcoc_core.ISeqable.extensions((o7310$50 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$50 as dc.dynamic), ));
}
fl$4[11]=$if_$47;
final dc.dynamic arg$58=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-lookup", )), ));
final dc.dynamic o7310$51=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8802__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), ));
late final dc.dynamic $if_$48;
if((o7310$51 is lcoc_core.ISeqable$iface)){
$if_$48=((o7310$51 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$48=((lcoc_core.ISeqable.extensions((o7310$51 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$51 as dc.dynamic), ));
}
final dc.dynamic $83=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$48, ));
final dc.dynamic $85=(lcoc_core.list.$_invoke$1($83, ));
final dc.dynamic o7310$52=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-lookup", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8802__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), (lcoc_core.list.$_invoke$1(null, )), ));
late final dc.dynamic $if_$49;
if((o7310$52 is lcoc_core.ISeqable$iface)){
$if_$49=((o7310$52 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$49=((lcoc_core.ISeqable.extensions((o7310$52 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$52 as dc.dynamic), ));
}
final dc.dynamic $84=(lcoc_core.list.$_invoke$1($if_$49, ));
final dc.dynamic o7310$53=(lcoc_core.concat.$_invoke$3(arg$58, $85, $84, ));
late final dc.dynamic $if_$50;
if((o7310$53 is lcoc_core.ISeqable$iface)){
$if_$50=((o7310$53 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$50=((lcoc_core.ISeqable.extensions((o7310$53 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$53 as dc.dynamic), ));
}
fl$4[12]=$if_$50;
final dc.dynamic arg$62=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-lookup", )), ));
final dc.dynamic o7310$54=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8803__auto__", )), )), (lcoc_core.list.$_invoke$1(key$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "not-found__8804__auto__", )), )), ));
late final dc.dynamic $if_$51;
if((o7310$54 is lcoc_core.ISeqable$iface)){
$if_$51=((o7310$54 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$51=((lcoc_core.ISeqable.extensions((o7310$54 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$54 as dc.dynamic), ));
}
final dc.dynamic $86=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$51, ));
final dc.dynamic $89=(lcoc_core.list.$_invoke$1($86, ));
final dc.dynamic arg$61=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "case", )), ));
final dc.dynamic arg$60=(lcoc_core.list.$_invoke$1(key$1, ));
final dc.dynamic arg$59=(lcoc_core.mapcat.$_invoke$2((dc.dynamic f$1, ){
final dc.List<dc.dynamic> fl$15=(dc.List<dc.dynamic>.filled(2, (lcoc_core.keyword.$_invoke$1(f$1, )), ));
fl$15[1]=f$1;
return lcoc_core.$_vec_owning(fl$15, );
}, fields$1, ));
final dc.dynamic o7310$55=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "get", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), (lcoc_core.list.$_invoke$1(key$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "not-found__8804__auto__", )), )), ));
late final dc.dynamic $if_$52;
if((o7310$55 is lcoc_core.ISeqable$iface)){
$if_$52=((o7310$55 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$52=((lcoc_core.ISeqable.extensions((o7310$55 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$55 as dc.dynamic), ));
}
final dc.dynamic $87=(lcoc_core.list.$_invoke$1($if_$52, ));
final dc.dynamic o7310$56=(lcoc_core.concat.$_invoke$4(arg$61, arg$60, arg$59, $87, ));
late final dc.dynamic $if_$53;
if((o7310$56 is lcoc_core.ISeqable$iface)){
$if_$53=((o7310$56 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$53=((lcoc_core.ISeqable.extensions((o7310$56 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$56 as dc.dynamic), ));
}
final dc.dynamic $88=(lcoc_core.list.$_invoke$1($if_$53, ));
final dc.dynamic o7310$57=(lcoc_core.concat.$_invoke$3(arg$62, $89, $88, ));
late final dc.dynamic $if_$54;
if((o7310$57 is lcoc_core.ISeqable$iface)){
$if_$54=((o7310$57 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$54=((lcoc_core.ISeqable.extensions((o7310$57 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$57 as dc.dynamic), ));
}
fl$4[13]=$if_$54;
fl$4[14]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ICounted", ));
final dc.dynamic arg$64=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-count", )), ));
final dc.dynamic o7310$58=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8805__auto__", )), )), ));
late final dc.dynamic $if_$55;
if((o7310$58 is lcoc_core.ISeqable$iface)){
$if_$55=((o7310$58 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$55=((lcoc_core.ISeqable.extensions((o7310$58 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$58 as dc.dynamic), ));
}
final dc.dynamic $90=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$55, ));
final dc.dynamic $94=(lcoc_core.list.$_invoke$1($90, ));
final dc.dynamic arg$63=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "+", )), ));
final dc.dynamic coll7390$1=fields$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7390$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7390$1, )) as dc.int);
}
final dc.dynamic $92=(lcoc_core.list.$_invoke$1(cast$1, ));
final dc.dynamic o7310$59=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-length", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$56;
if((o7310$59 is lcoc_core.ISeqable$iface)){
$if_$56=((o7310$59 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$56=((lcoc_core.ISeqable.extensions((o7310$59 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$59 as dc.dynamic), ));
}
final dc.dynamic $91=(lcoc_core.list.$_invoke$1($if_$56, ));
final dc.dynamic o7310$60=(lcoc_core.concat.$_invoke$3(arg$63, $92, $91, ));
late final dc.dynamic $if_$57;
if((o7310$60 is lcoc_core.ISeqable$iface)){
$if_$57=((o7310$60 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$57=((lcoc_core.ISeqable.extensions((o7310$60 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$60 as dc.dynamic), ));
}
final dc.dynamic $93=(lcoc_core.list.$_invoke$1($if_$57, ));
final dc.dynamic o7310$61=(lcoc_core.concat.$_invoke$3(arg$64, $94, $93, ));
late final dc.dynamic $if_$58;
if((o7310$61 is lcoc_core.ISeqable$iface)){
$if_$58=((o7310$61 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$58=((lcoc_core.ISeqable.extensions((o7310$61 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$61 as dc.dynamic), ));
}
fl$4[15]=$if_$58;
fl$4[16]=(lcoc_core.symbol.$_invoke$2("cljd.core", "ICollection", ));
final dc.dynamic arg$70=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-conj", )), ));
final dc.dynamic o7310$62=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8806__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8807__auto__", )), )), ));
late final dc.dynamic $if_$59;
if((o7310$62 is lcoc_core.ISeqable$iface)){
$if_$59=((o7310$62 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$59=((lcoc_core.ISeqable.extensions((o7310$62 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$62 as dc.dynamic), ));
}
final dc.dynamic $95=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$59, ));
final dc.dynamic $105=(lcoc_core.list.$_invoke$1($95, ));
final dc.dynamic arg$69=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$66=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "and", )), ));
final dc.dynamic o7310$63=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "vector?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8807__auto__", )), )), ));
late final dc.dynamic $if_$60;
if((o7310$63 is lcoc_core.ISeqable$iface)){
$if_$60=((o7310$63 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$60=((lcoc_core.ISeqable.extensions((o7310$63 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$63 as dc.dynamic), ));
}
final dc.dynamic $98=(lcoc_core.list.$_invoke$1($if_$60, ));
final dc.dynamic arg$65=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "==", )), ));
final dc.dynamic o7310$64=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-count", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8807__auto__", )), )), ));
late final dc.dynamic $if_$61;
if((o7310$64 is lcoc_core.ISeqable$iface)){
$if_$61=((o7310$64 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$61=((lcoc_core.ISeqable.extensions((o7310$64 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$64 as dc.dynamic), ));
}
final dc.dynamic $96=(lcoc_core.list.$_invoke$1($if_$61, ));
final dc.dynamic o7310$65=(lcoc_core.concat.$_invoke$3(arg$65, $96, (lcoc_core.list.$_invoke$1(2, )), ));
late final dc.dynamic $if_$62;
if((o7310$65 is lcoc_core.ISeqable$iface)){
$if_$62=((o7310$65 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$62=((lcoc_core.ISeqable.extensions((o7310$65 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$65 as dc.dynamic), ));
}
final dc.dynamic $97=(lcoc_core.list.$_invoke$1($if_$62, ));
final dc.dynamic o7310$66=(lcoc_core.concat.$_invoke$3(arg$66, $98, $97, ));
late final dc.dynamic $if_$63;
if((o7310$66 is lcoc_core.ISeqable$iface)){
$if_$63=((o7310$66 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$63=((lcoc_core.ISeqable.extensions((o7310$66 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$66 as dc.dynamic), ));
}
final dc.dynamic $103=(lcoc_core.list.$_invoke$1($if_$63, ));
final dc.dynamic arg$68=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-assoc", )), ));
final dc.dynamic arg$67=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8806__auto__", )), ));
final dc.dynamic o7310$67=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-nth", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8807__auto__", )), )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$64;
if((o7310$67 is lcoc_core.ISeqable$iface)){
$if_$64=((o7310$67 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$64=((lcoc_core.ISeqable.extensions((o7310$67 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$67 as dc.dynamic), ));
}
final dc.dynamic $100=(lcoc_core.list.$_invoke$1($if_$64, ));
final dc.dynamic o7310$68=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-nth", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8807__auto__", )), )), (lcoc_core.list.$_invoke$1(1, )), ));
late final dc.dynamic $if_$65;
if((o7310$68 is lcoc_core.ISeqable$iface)){
$if_$65=((o7310$68 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$65=((lcoc_core.ISeqable.extensions((o7310$68 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$68 as dc.dynamic), ));
}
final dc.dynamic $99=(lcoc_core.list.$_invoke$1($if_$65, ));
final dc.dynamic o7310$69=(lcoc_core.concat.$_invoke$4(arg$68, arg$67, $100, $99, ));
late final dc.dynamic $if_$66;
if((o7310$69 is lcoc_core.ISeqable$iface)){
$if_$66=((o7310$69 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$66=((lcoc_core.ISeqable.extensions((o7310$69 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$69 as dc.dynamic), ));
}
final dc.dynamic $102=(lcoc_core.list.$_invoke$1($if_$66, ));
final dc.dynamic o7310$70=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-conj", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8806__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8807__auto__", )), )), ));
late final dc.dynamic $if_$67;
if((o7310$70 is lcoc_core.ISeqable$iface)){
$if_$67=((o7310$70 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$67=((lcoc_core.ISeqable.extensions((o7310$70 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$70 as dc.dynamic), ));
}
final dc.dynamic $101=(lcoc_core.list.$_invoke$1($if_$67, ));
final dc.dynamic o7310$71=(lcoc_core.concat.$_invoke$4(arg$69, $103, $102, $101, ));
late final dc.dynamic $if_$68;
if((o7310$71 is lcoc_core.ISeqable$iface)){
$if_$68=((o7310$71 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$68=((lcoc_core.ISeqable.extensions((o7310$71 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$71 as dc.dynamic), ));
}
final dc.dynamic $104=(lcoc_core.list.$_invoke$1($if_$68, ));
final dc.dynamic o7310$72=(lcoc_core.concat.$_invoke$3(arg$70, $105, $104, ));
late final dc.dynamic $if_$69;
if((o7310$72 is lcoc_core.ISeqable$iface)){
$if_$69=((o7310$72 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$69=((lcoc_core.ISeqable.extensions((o7310$72 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$72 as dc.dynamic), ));
}
fl$4[17]=$if_$69;
fl$4[18]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IWithMeta", ));
late final dc.dynamic meta$1;
if((lcoc_core.gensym is dc.Function)){
meta$1=(lcoc_core.gensym as dc.Function)("meta", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
meta$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("meta", ));
}else{
meta$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "meta", ));
}
final dc.dynamic arg$71=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-with-meta", )), ));
final dc.dynamic o7310$73=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8808__auto__", )), )), (lcoc_core.list.$_invoke$1(meta$1, )), ));
late final dc.dynamic $if_$70;
if((o7310$73 is lcoc_core.ISeqable$iface)){
$if_$70=((o7310$73 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$70=((lcoc_core.ISeqable.extensions((o7310$73 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$73 as dc.dynamic), ));
}
final dc.dynamic $106=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$70, ));
final dc.dynamic $108=(lcoc_core.list.$_invoke$1($106, ));
final dc.dynamic o7310$74=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), )), (lcoc_core.list.$_invoke$1(name$1, )), (lcoc_core.conj.$_invoke$4(lcoc_core.vec(fields$1, ), meta$1, extmap$1, -1, )), ));
late final dc.dynamic $if_$71;
if((o7310$74 is lcoc_core.ISeqable$iface)){
$if_$71=((o7310$74 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$71=((lcoc_core.ISeqable.extensions((o7310$74 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$74 as dc.dynamic), ));
}
final dc.dynamic $107=(lcoc_core.list.$_invoke$1($if_$71, ));
final dc.dynamic o7310$75=(lcoc_core.concat.$_invoke$3(arg$71, $108, $107, ));
late final dc.dynamic $if_$72;
if((o7310$75 is lcoc_core.ISeqable$iface)){
$if_$72=((o7310$75 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$72=((lcoc_core.ISeqable.extensions((o7310$75 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$75 as dc.dynamic), ));
}
fl$4[19]=$if_$72;
fl$4[20]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IMeta", ));
final dc.dynamic arg$72=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-meta", )), ));
final dc.dynamic o7310$76=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8809__auto__", )), )), ));
late final dc.dynamic $if_$73;
if((o7310$76 is lcoc_core.ISeqable$iface)){
$if_$73=((o7310$76 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$73=((lcoc_core.ISeqable.extensions((o7310$76 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$76 as dc.dynamic), ));
}
final dc.dynamic $109=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$73, ));
final dc.dynamic $110=(lcoc_core.list.$_invoke$1($109, ));
final dc.dynamic o7310$77=(lcoc_core.concat.$_invoke$3(arg$72, $110, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "meta", )), )), ));
late final dc.dynamic $if_$74;
if((o7310$77 is lcoc_core.ISeqable$iface)){
$if_$74=((o7310$77 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$74=((lcoc_core.ISeqable.extensions((o7310$77 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$77 as dc.dynamic), ));
}
fl$4[21]=$if_$74;
fl$4[22]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IKVReduce", ));
final dc.dynamic arg$76=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-kv-reduce", )), ));
final dc.dynamic o7310$78=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8810__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "f__8811__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init__8812__auto__", )), )), ));
late final dc.dynamic $if_$75;
if((o7310$78 is lcoc_core.ISeqable$iface)){
$if_$75=((o7310$78 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$75=((lcoc_core.ISeqable.extensions((o7310$78 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$78 as dc.dynamic), ));
}
final dc.dynamic $111=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$75, ));
final dc.dynamic $119=(lcoc_core.list.$_invoke$1($111, ));
final dc.dynamic arg$75=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), ));
final dc.dynamic arg$74=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic arg$73=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "ret__8813__auto__", )), ));
final dc.dynamic o7310$79=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8814__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "v__8815__auto__", )), )), ));
late final dc.dynamic $if_$76;
if((o7310$79 is lcoc_core.ISeqable$iface)){
$if_$76=((o7310$79 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$76=((lcoc_core.ISeqable.extensions((o7310$79 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$79 as dc.dynamic), ));
}
final dc.dynamic $112=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$76, ));
final dc.dynamic $113=(lcoc_core.list.$_invoke$1($112, ));
final dc.dynamic o7310$80=(lcoc_core.concat.$_invoke$2(arg$73, $113, ));
late final dc.dynamic $if_$77;
if((o7310$80 is lcoc_core.ISeqable$iface)){
$if_$77=((o7310$80 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$77=((lcoc_core.ISeqable.extensions((o7310$80 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$80 as dc.dynamic), ));
}
final dc.dynamic $114=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$77, ));
final dc.dynamic $116=(lcoc_core.list.$_invoke$1($114, ));
final dc.dynamic o7310$81=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "f__8811__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "ret__8813__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8814__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "v__8815__auto__", )), )), ));
late final dc.dynamic $if_$78;
if((o7310$81 is lcoc_core.ISeqable$iface)){
$if_$78=((o7310$81 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$78=((lcoc_core.ISeqable.extensions((o7310$81 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$81 as dc.dynamic), ));
}
final dc.dynamic $115=(lcoc_core.list.$_invoke$1($if_$78, ));
final dc.dynamic o7310$82=(lcoc_core.concat.$_invoke$3(arg$74, $116, $115, ));
late final dc.dynamic $if_$79;
if((o7310$82 is lcoc_core.ISeqable$iface)){
$if_$79=((o7310$82 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$79=((lcoc_core.ISeqable.extensions((o7310$82 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$82 as dc.dynamic), ));
}
final dc.dynamic $117=(lcoc_core.list.$_invoke$1($if_$79, ));
final dc.dynamic o7310$83=(lcoc_core.concat.$_invoke$4(arg$75, $117, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "init__8812__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8810__auto__", )), )), ));
late final dc.dynamic $if_$80;
if((o7310$83 is lcoc_core.ISeqable$iface)){
$if_$80=((o7310$83 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$80=((lcoc_core.ISeqable.extensions((o7310$83 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$83 as dc.dynamic), ));
}
final dc.dynamic $118=(lcoc_core.list.$_invoke$1($if_$80, ));
final dc.dynamic o7310$84=(lcoc_core.concat.$_invoke$3(arg$76, $119, $118, ));
late final dc.dynamic $if_$81;
if((o7310$84 is lcoc_core.ISeqable$iface)){
$if_$81=((o7310$84 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$81=((lcoc_core.ISeqable.extensions((o7310$84 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$84 as dc.dynamic), ));
}
fl$4[23]=$if_$81;
final dc.dynamic arg$77=(lcoc_core.symbol.$_invoke$2("\$lib:d_collection", "MapMixin", ));
final dc.List<dc.dynamic> fl$16=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "mixin", 2105145522, ), ));
fl$16[1]=true;
fl$16[2]=const lcoc_core.Keyword(null, "type-params", 3003227952, );
final dc.List<dc.dynamic> fl$17=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
fl$17[1]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentList $121=lcoc_core.$_list_lit(fl$17, );
fl$16[3]=$121;
final lcoc_core.PersistentHashMap $120=lcoc_core.$_map_lit(fl$16, );
final dc.dynamic $122=lcoc_core.with_meta(arg$77, $120, );
fl$4[24]=$122;
late final dc.dynamic coll$1;
if((lcoc_core.gensym is dc.Function)){
coll$1=(lcoc_core.gensym as dc.Function)("coll", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
coll$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("coll", ));
}else{
coll$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "coll", ));
}
final dc.dynamic arg$82=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "entries", )), ));
final dc.dynamic o7310$85=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(coll$1, )), ));
late final dc.dynamic $if_$82;
if((o7310$85 is lcoc_core.ISeqable$iface)){
$if_$82=((o7310$85 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$82=((lcoc_core.ISeqable.extensions((o7310$85 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$85 as dc.dynamic), ));
}
final dc.dynamic $123=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$82, ));
final dc.dynamic $130=(lcoc_core.list.$_invoke$1($123, ));
final dc.dynamic arg$81=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), ));
final dc.dynamic arg$79=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
final dc.dynamic arg$78=(lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$2((dc.dynamic p1$8816_$SHARP_$1, ){
return (lcoc_core.list.$_invoke$5((lcoc_core.symbol.$_invoke$2(null, "new", )), (lcoc_core.symbol.$_invoke$2("cljd.core", "PersistentMapEntry", )), (lcoc_core.keyword.$_invoke$1(p1$8816_$SHARP_$1, )), p1$8816_$SHARP_$1, -1, ));
}, fields$1, )), ));
final dc.List<dc.dynamic> fl$18=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "fixed", 3683927621, ), ));
fl$18[1]=true;
fl$18[2]=const lcoc_core.Keyword(null, "tag", 2780644040, );
fl$18[3]=(lcoc_core.symbol.$_invoke$2("dart:core", "MapEntry", ));
final lcoc_core.PersistentHashMap $124=lcoc_core.$_map_lit(fl$18, );
final dc.dynamic $125=lcoc_core.with_meta(arg$78, $124, );
late final dc.dynamic $if_$83;
if((lcoc_core.tagged_literal is dc.Function)){
$if_$83=(lcoc_core.tagged_literal as dc.Function)(arg$79, $125, );
}else if((lcoc_core.tagged_literal is lcoc_core.IFn$iface)){
$if_$83=((lcoc_core.tagged_literal as lcoc_core.IFn$iface).$_invoke$2(arg$79, $125, ));
}else{
$if_$83=(lcoc_core.IFn.extensions(lcoc_core.tagged_literal, ).$_invoke$2(lcoc_core.tagged_literal, arg$79, $125, ));
}
final dc.dynamic $128=(lcoc_core.list.$_invoke$1($if_$83, ));
final dc.dynamic arg$80=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".followedBy", )), ));
final dc.dynamic o7310$86=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-entries", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$84;
if((o7310$86 is lcoc_core.ISeqable$iface)){
$if_$84=((o7310$86 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$84=((lcoc_core.ISeqable.extensions((o7310$86 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$86 as dc.dynamic), ));
}
final dc.dynamic $126=(lcoc_core.list.$_invoke$1($if_$84, ));
final dc.dynamic o7310$87=(lcoc_core.concat.$_invoke$2(arg$80, $126, ));
late final dc.dynamic $if_$85;
if((o7310$87 is lcoc_core.ISeqable$iface)){
$if_$85=((o7310$87 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$85=((lcoc_core.ISeqable.extensions((o7310$87 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$87 as dc.dynamic), ));
}
final dc.dynamic $127=(lcoc_core.list.$_invoke$1($if_$85, ));
final dc.dynamic o7310$88=(lcoc_core.concat.$_invoke$3(arg$81, $128, $127, ));
late final dc.dynamic $if_$86;
if((o7310$88 is lcoc_core.ISeqable$iface)){
$if_$86=((o7310$88 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$86=((lcoc_core.ISeqable.extensions((o7310$88 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$88 as dc.dynamic), ));
}
final dc.dynamic $129=(lcoc_core.list.$_invoke$1($if_$86, ));
final dc.dynamic o7310$89=(lcoc_core.concat.$_invoke$3(arg$82, $130, $129, ));
late final dc.dynamic $if_$87;
if((o7310$89 is lcoc_core.ISeqable$iface)){
$if_$87=((o7310$89 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$87=((lcoc_core.ISeqable.extensions((o7310$89 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$89 as dc.dynamic), ));
}
fl$4[25]=$if_$87;
late final dc.dynamic coll$2;
if((lcoc_core.gensym is dc.Function)){
coll$2=(lcoc_core.gensym as dc.Function)("coll", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
coll$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("coll", ));
}else{
coll$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "coll", ));
}
final dc.dynamic arg$84=(lcoc_core.symbol.$_invoke$2(null, "keys", ));
final dc.List<dc.dynamic> fl$19=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
final dc.dynamic arg$83=(lcoc_core.symbol.$_invoke$2(null, "Iterable", ));
final dc.List<dc.dynamic> fl$20=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$21=(dc.List<dc.dynamic>.filled(1, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
final lcoc_core.PersistentList $133=lcoc_core.$_list_lit(fl$21, );
fl$20[1]=$133;
final lcoc_core.PersistentHashMap $132=lcoc_core.$_map_lit(fl$20, );
final dc.dynamic $134=lcoc_core.with_meta(arg$83, $132, );
fl$19[1]=$134;
final lcoc_core.PersistentHashMap $131=lcoc_core.$_map_lit(fl$19, );
final dc.dynamic $135=lcoc_core.with_meta(arg$84, $131, );
final dc.dynamic $149=(lcoc_core.list.$_invoke$1($135, ));
final dc.dynamic o7310$90=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(coll$2, )), ));
late final dc.dynamic $if_$88;
if((o7310$90 is lcoc_core.ISeqable$iface)){
$if_$88=((o7310$90 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$88=((lcoc_core.ISeqable.extensions((o7310$90 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$90 as dc.dynamic), ));
}
final dc.dynamic $136=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$88, ));
final dc.dynamic $148=(lcoc_core.list.$_invoke$1($136, ));
final dc.dynamic arg$89=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), ));
final dc.dynamic arg$87=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
final dc.dynamic arg$86=(lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$2((dc.dynamic field$2, ){
late final dc.dynamic k$2;
if((lcoc_core.gensym is dc.Function)){
k$2=(lcoc_core.gensym as dc.Function)("k", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
k$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("k", ));
}else{
k$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "k", ));
}
final dc.dynamic arg$85=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.List<dc.dynamic> fl$22=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$22[1]=(lcoc_core.symbol.$_invoke$2(null, "K", ));
final lcoc_core.PersistentHashMap $137=lcoc_core.$_map_lit(fl$22, );
final dc.dynamic $138=lcoc_core.with_meta(k$2, $137, );
final dc.dynamic $139=(lcoc_core.list.$_invoke$1($138, ));
final dc.dynamic o7310$91=(lcoc_core.concat.$_invoke$2($139, (lcoc_core.list.$_invoke$1((lcoc_core.keyword.$_invoke$1(field$2, )), )), ));
late final dc.dynamic $if_$89;
if((o7310$91 is lcoc_core.ISeqable$iface)){
$if_$89=((o7310$91 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$89=((lcoc_core.ISeqable.extensions((o7310$91 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$91 as dc.dynamic), ));
}
final dc.dynamic $140=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$89, ));
final dc.dynamic $141=(lcoc_core.list.$_invoke$1($140, ));
final dc.dynamic o7310$92=(lcoc_core.concat.$_invoke$3(arg$85, $141, (lcoc_core.list.$_invoke$1(k$2, )), ));
if((o7310$92 is lcoc_core.ISeqable$iface)){
return ((o7310$92 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$92 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$92 as dc.dynamic), ));
}, fields$1, )), ));
final dc.List<dc.dynamic> fl$23=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "fixed", 3683927621, ), ));
fl$23[1]=true;
fl$23[2]=const lcoc_core.Keyword(null, "tag", 2780644040, );
fl$23[3]=(lcoc_core.symbol.$_invoke$2(null, "K", ));
final lcoc_core.PersistentHashMap $142=lcoc_core.$_map_lit(fl$23, );
final dc.dynamic $143=lcoc_core.with_meta(arg$86, $142, );
late final dc.dynamic $if_$90;
if((lcoc_core.tagged_literal is dc.Function)){
$if_$90=(lcoc_core.tagged_literal as dc.Function)(arg$87, $143, );
}else if((lcoc_core.tagged_literal is lcoc_core.IFn$iface)){
$if_$90=((lcoc_core.tagged_literal as lcoc_core.IFn$iface).$_invoke$2(arg$87, $143, ));
}else{
$if_$90=(lcoc_core.IFn.extensions(lcoc_core.tagged_literal, ).$_invoke$2(lcoc_core.tagged_literal, arg$87, $143, ));
}
final dc.dynamic $146=(lcoc_core.list.$_invoke$1($if_$90, ));
final dc.dynamic arg$88=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".followedBy", )), ));
final dc.dynamic o7310$93=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-keys", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$91;
if((o7310$93 is lcoc_core.ISeqable$iface)){
$if_$91=((o7310$93 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$91=((lcoc_core.ISeqable.extensions((o7310$93 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$93 as dc.dynamic), ));
}
final dc.dynamic $144=(lcoc_core.list.$_invoke$1($if_$91, ));
final dc.dynamic o7310$94=(lcoc_core.concat.$_invoke$2(arg$88, $144, ));
late final dc.dynamic $if_$92;
if((o7310$94 is lcoc_core.ISeqable$iface)){
$if_$92=((o7310$94 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$92=((lcoc_core.ISeqable.extensions((o7310$94 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$94 as dc.dynamic), ));
}
final dc.dynamic $145=(lcoc_core.list.$_invoke$1($if_$92, ));
final dc.dynamic o7310$95=(lcoc_core.concat.$_invoke$3(arg$89, $146, $145, ));
late final dc.dynamic $if_$93;
if((o7310$95 is lcoc_core.ISeqable$iface)){
$if_$93=((o7310$95 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$93=((lcoc_core.ISeqable.extensions((o7310$95 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$95 as dc.dynamic), ));
}
final dc.dynamic $147=(lcoc_core.list.$_invoke$1($if_$93, ));
final dc.dynamic o7310$96=(lcoc_core.concat.$_invoke$3($149, $148, $147, ));
late final dc.dynamic $if_$94;
if((o7310$96 is lcoc_core.ISeqable$iface)){
$if_$94=((o7310$96 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$94=((lcoc_core.ISeqable.extensions((o7310$96 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$96 as dc.dynamic), ));
}
fl$4[26]=$if_$94;
late final dc.dynamic coll$3;
if((lcoc_core.gensym is dc.Function)){
coll$3=(lcoc_core.gensym as dc.Function)("coll", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
coll$3=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("coll", ));
}else{
coll$3=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "coll", ));
}
final dc.dynamic arg$94=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "values", )), ));
final dc.dynamic o7310$97=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(coll$3, )), ));
late final dc.dynamic $if_$95;
if((o7310$97 is lcoc_core.ISeqable$iface)){
$if_$95=((o7310$97 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$95=((lcoc_core.ISeqable.extensions((o7310$97 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$97 as dc.dynamic), ));
}
final dc.dynamic $150=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$95, ));
final dc.dynamic $157=(lcoc_core.list.$_invoke$1($150, ));
final dc.dynamic arg$93=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), ));
final dc.dynamic arg$91=(lcoc_core.symbol.$_invoke$2(null, "dart", ));
final lcoc_core.PersistentVector arg$90=lcoc_core.vec(fields$1, );
final dc.List<dc.dynamic> fl$24=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "fixed", 3683927621, ), ));
fl$24[1]=true;
fl$24[2]=const lcoc_core.Keyword(null, "tag", 2780644040, );
fl$24[3]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentHashMap $151=lcoc_core.$_map_lit(fl$24, );
final dc.dynamic $152=lcoc_core.with_meta(arg$90, $151, );
late final dc.dynamic $if_$96;
if((lcoc_core.tagged_literal is dc.Function)){
$if_$96=(lcoc_core.tagged_literal as dc.Function)(arg$91, $152, );
}else if((lcoc_core.tagged_literal is lcoc_core.IFn$iface)){
$if_$96=((lcoc_core.tagged_literal as lcoc_core.IFn$iface).$_invoke$2(arg$91, $152, ));
}else{
$if_$96=(lcoc_core.IFn.extensions(lcoc_core.tagged_literal, ).$_invoke$2(lcoc_core.tagged_literal, arg$91, $152, ));
}
final dc.dynamic $155=(lcoc_core.list.$_invoke$1($if_$96, ));
final dc.dynamic arg$92=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".followedBy", )), ));
final dc.dynamic o7310$98=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".-values", )), )), (lcoc_core.list.$_invoke$1(extmap$1, )), ));
late final dc.dynamic $if_$97;
if((o7310$98 is lcoc_core.ISeqable$iface)){
$if_$97=((o7310$98 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$97=((lcoc_core.ISeqable.extensions((o7310$98 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$98 as dc.dynamic), ));
}
final dc.dynamic $153=(lcoc_core.list.$_invoke$1($if_$97, ));
final dc.dynamic o7310$99=(lcoc_core.concat.$_invoke$2(arg$92, $153, ));
late final dc.dynamic $if_$98;
if((o7310$99 is lcoc_core.ISeqable$iface)){
$if_$98=((o7310$99 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$98=((lcoc_core.ISeqable.extensions((o7310$99 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$99 as dc.dynamic), ));
}
final dc.dynamic $154=(lcoc_core.list.$_invoke$1($if_$98, ));
final dc.dynamic o7310$100=(lcoc_core.concat.$_invoke$3(arg$93, $155, $154, ));
late final dc.dynamic $if_$99;
if((o7310$100 is lcoc_core.ISeqable$iface)){
$if_$99=((o7310$100 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$99=((lcoc_core.ISeqable.extensions((o7310$100 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$100 as dc.dynamic), ));
}
final dc.dynamic $156=(lcoc_core.list.$_invoke$1($if_$99, ));
final dc.dynamic o7310$101=(lcoc_core.concat.$_invoke$3(arg$94, $157, $156, ));
late final dc.dynamic $if_$100;
if((o7310$101 is lcoc_core.ISeqable$iface)){
$if_$100=((o7310$101 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$100=((lcoc_core.ISeqable.extensions((o7310$101 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$101 as dc.dynamic), ));
}
fl$4[27]=$if_$100;
final dc.dynamic arg$95=(lcoc_core.list.$_invoke$1("[]", ));
final dc.dynamic o7310$102=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8817__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8818__auto__", )), )), ));
late final dc.dynamic $if_$101;
if((o7310$102 is lcoc_core.ISeqable$iface)){
$if_$101=((o7310$102 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$101=((lcoc_core.ISeqable.extensions((o7310$102 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$102 as dc.dynamic), ));
}
final dc.dynamic $158=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$101, ));
final dc.dynamic $160=(lcoc_core.list.$_invoke$1($158, ));
final dc.dynamic o7310$103=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-lookup", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8817__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "k__8818__auto__", )), )), (lcoc_core.list.$_invoke$1(null, )), ));
late final dc.dynamic $if_$102;
if((o7310$103 is lcoc_core.ISeqable$iface)){
$if_$102=((o7310$103 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$102=((lcoc_core.ISeqable.extensions((o7310$103 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$103 as dc.dynamic), ));
}
final dc.dynamic $159=(lcoc_core.list.$_invoke$1($if_$102, ));
final dc.dynamic o7310$104=(lcoc_core.concat.$_invoke$3(arg$95, $160, $159, ));
late final dc.dynamic $if_$103;
if((o7310$104 is lcoc_core.ISeqable$iface)){
$if_$103=((o7310$104 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$103=((lcoc_core.ISeqable.extensions((o7310$104 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$104 as dc.dynamic), ));
}
fl$4[28]=$if_$103;
final dc.dynamic arg$97=(lcoc_core.list.$_invoke$1("[]=", ));
final dc.dynamic o7310$105=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8819__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "key__8820__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "val__8821__auto__", )), )), ));
late final dc.dynamic $if_$104;
if((o7310$105 is lcoc_core.ISeqable$iface)){
$if_$104=((o7310$105 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$104=((lcoc_core.ISeqable.extensions((o7310$105 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$105 as dc.dynamic), ));
}
final dc.dynamic $161=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$104, ));
final dc.dynamic $164=(lcoc_core.list.$_invoke$1($161, ));
final dc.dynamic arg$96=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic o7310$106=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "UnsupportedError.", )), )), (lcoc_core.list.$_invoke$1("[]= not supported on defrecord", )), ));
late final dc.dynamic $if_$105;
if((o7310$106 is lcoc_core.ISeqable$iface)){
$if_$105=((o7310$106 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$105=((lcoc_core.ISeqable.extensions((o7310$106 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$106 as dc.dynamic), ));
}
final dc.dynamic $162=(lcoc_core.list.$_invoke$1($if_$105, ));
final dc.dynamic o7310$107=(lcoc_core.concat.$_invoke$2(arg$96, $162, ));
late final dc.dynamic $if_$106;
if((o7310$107 is lcoc_core.ISeqable$iface)){
$if_$106=((o7310$107 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$106=((lcoc_core.ISeqable.extensions((o7310$107 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$107 as dc.dynamic), ));
}
final dc.dynamic $163=(lcoc_core.list.$_invoke$1($if_$106, ));
final dc.dynamic o7310$108=(lcoc_core.concat.$_invoke$3(arg$97, $164, $163, ));
late final dc.dynamic $if_$107;
if((o7310$108 is lcoc_core.ISeqable$iface)){
$if_$107=((o7310$108 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$107=((lcoc_core.ISeqable.extensions((o7310$108 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$108 as dc.dynamic), ));
}
fl$4[29]=$if_$107;
final dc.dynamic arg$99=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "remove", )), ));
final dc.dynamic o7310$109=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8822__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "val__8823__auto__", )), )), ));
late final dc.dynamic $if_$108;
if((o7310$109 is lcoc_core.ISeqable$iface)){
$if_$108=((o7310$109 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$108=((lcoc_core.ISeqable.extensions((o7310$109 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$109 as dc.dynamic), ));
}
final dc.dynamic $165=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$108, ));
final dc.dynamic $168=(lcoc_core.list.$_invoke$1($165, ));
final dc.dynamic arg$98=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic o7310$110=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "UnsupportedError.", )), )), (lcoc_core.list.$_invoke$1("remove not supported on defrecord", )), ));
late final dc.dynamic $if_$109;
if((o7310$110 is lcoc_core.ISeqable$iface)){
$if_$109=((o7310$110 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$109=((lcoc_core.ISeqable.extensions((o7310$110 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$110 as dc.dynamic), ));
}
final dc.dynamic $166=(lcoc_core.list.$_invoke$1($if_$109, ));
final dc.dynamic o7310$111=(lcoc_core.concat.$_invoke$2(arg$98, $166, ));
late final dc.dynamic $if_$110;
if((o7310$111 is lcoc_core.ISeqable$iface)){
$if_$110=((o7310$111 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$110=((lcoc_core.ISeqable.extensions((o7310$111 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$111 as dc.dynamic), ));
}
final dc.dynamic $167=(lcoc_core.list.$_invoke$1($if_$110, ));
final dc.dynamic o7310$112=(lcoc_core.concat.$_invoke$3(arg$99, $168, $167, ));
late final dc.dynamic $if_$111;
if((o7310$112 is lcoc_core.ISeqable$iface)){
$if_$111=((o7310$112 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$111=((lcoc_core.ISeqable.extensions((o7310$112 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$112 as dc.dynamic), ));
}
fl$4[30]=$if_$111;
final dc.dynamic arg$101=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "clear", )), ));
final dc.dynamic o7310$113=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8824__auto__", )), )), ));
late final dc.dynamic $if_$112;
if((o7310$113 is lcoc_core.ISeqable$iface)){
$if_$112=((o7310$113 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$112=((lcoc_core.ISeqable.extensions((o7310$113 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$113 as dc.dynamic), ));
}
final dc.dynamic $169=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$112, ));
final dc.dynamic $172=(lcoc_core.list.$_invoke$1($169, ));
final dc.dynamic arg$100=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "throw", )), ));
final dc.dynamic o7310$114=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "UnsupportedError.", )), )), (lcoc_core.list.$_invoke$1("clear not supported on defrecord", )), ));
late final dc.dynamic $if_$113;
if((o7310$114 is lcoc_core.ISeqable$iface)){
$if_$113=((o7310$114 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$113=((lcoc_core.ISeqable.extensions((o7310$114 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$114 as dc.dynamic), ));
}
final dc.dynamic $170=(lcoc_core.list.$_invoke$1($if_$113, ));
final dc.dynamic o7310$115=(lcoc_core.concat.$_invoke$2(arg$100, $170, ));
late final dc.dynamic $if_$114;
if((o7310$115 is lcoc_core.ISeqable$iface)){
$if_$114=((o7310$115 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$114=((lcoc_core.ISeqable.extensions((o7310$115 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$115 as dc.dynamic), ));
}
final dc.dynamic $171=(lcoc_core.list.$_invoke$1($if_$114, ));
final dc.dynamic o7310$116=(lcoc_core.concat.$_invoke$3(arg$101, $172, $171, ));
late final dc.dynamic $if_$115;
if((o7310$116 is lcoc_core.ISeqable$iface)){
$if_$115=((o7310$116 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$115=((lcoc_core.ISeqable.extensions((o7310$116 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$116 as dc.dynamic), ));
}
fl$4[31]=$if_$115;
final dc.dynamic arg$102=(lcoc_core.symbol.$_invoke$2(null, "cast", ));
final dc.List<dc.dynamic> fl$25=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
final dc.List<dc.dynamic> fl$26=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$27=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$27[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $175=lcoc_core.$_list_lit(fl$27, );
fl$26[1]=$175;
final lcoc_core.PersistentHashMap $174=lcoc_core.$_map_lit(fl$26, );
final dc.dynamic $176=lcoc_core.with_meta(name$1, $174, );
fl$25[1]=$176;
fl$25[2]=const lcoc_core.Keyword(null, "type-params", 3003227952, );
final dc.List<dc.dynamic> fl$28=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$28[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $177=lcoc_core.$_list_lit(fl$28, );
fl$25[3]=$177;
final lcoc_core.PersistentHashMap $173=lcoc_core.$_map_lit(fl$25, );
final dc.dynamic $178=lcoc_core.with_meta(arg$102, $173, );
final dc.dynamic $191=(lcoc_core.list.$_invoke$1($178, ));
final dc.dynamic o7310$117=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8825__auto__", )), )), ));
late final dc.dynamic $if_$116;
if((o7310$117 is lcoc_core.ISeqable$iface)){
$if_$116=((o7310$117 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$116=((lcoc_core.ISeqable.extensions((o7310$117 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$117 as dc.dynamic), ));
}
final dc.dynamic $179=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$116, ));
final dc.dynamic $190=(lcoc_core.list.$_invoke$1($179, ));
final dc.dynamic arg$107=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.List<dc.dynamic> fl$29=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$30=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$30[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $181=lcoc_core.$_list_lit(fl$30, );
fl$29[1]=$181;
final lcoc_core.PersistentHashMap $180=lcoc_core.$_map_lit(fl$29, );
final dc.dynamic $182=lcoc_core.with_meta(name$1, $180, );
final dc.dynamic $188=(lcoc_core.list.$_invoke$1($182, ));
final lcoc_core.PersistentVector arg$106=lcoc_core.vec(fields$1, );
final dc.dynamic arg$105=(lcoc_core.symbol.$_invoke$2(null, "meta", ));
final dc.dynamic arg$104=(lcoc_core.symbol.$_invoke$2(null, ".", ));
final dc.dynamic arg$103=(lcoc_core.symbol.$_invoke$2(null, "cast", ));
final dc.List<dc.dynamic> fl$31=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$32=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "RK", )), ));
fl$32[1]=(lcoc_core.symbol.$_invoke$2(null, "RV", ));
final lcoc_core.PersistentList $184=lcoc_core.$_list_lit(fl$32, );
fl$31[1]=$184;
final lcoc_core.PersistentHashMap $183=lcoc_core.$_map_lit(fl$31, );
final dc.dynamic $185=lcoc_core.with_meta(arg$103, $183, );
final dc.dynamic $186=(lcoc_core.list.$_invoke$3(arg$104, extmap$1, $185, ));
final dc.dynamic $187=(lcoc_core.conj.$_invoke$4(arg$106, arg$105, $186, (lcoc_core.symbol.$_invoke$2(null, "__hash", )), ));
final dc.dynamic o7310$118=(lcoc_core.concat.$_invoke$3(arg$107, $188, $187, ));
late final dc.dynamic $if_$117;
if((o7310$118 is lcoc_core.ISeqable$iface)){
$if_$117=((o7310$118 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$117=((lcoc_core.ISeqable.extensions((o7310$118 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$118 as dc.dynamic), ));
}
final dc.dynamic $189=(lcoc_core.list.$_invoke$1($if_$117, ));
final dc.dynamic o7310$119=(lcoc_core.concat.$_invoke$3($191, $190, $189, ));
late final dc.dynamic $if_$118;
if((o7310$119 is lcoc_core.ISeqable$iface)){
$if_$118=((o7310$119 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$118=((lcoc_core.ISeqable.extensions((o7310$119 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$119 as dc.dynamic), ));
}
fl$4[32]=$if_$118;
fl$4[33]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IHash", ));
final dc.dynamic arg$111=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-hash", )), ));
final dc.dynamic o7310$120=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8826__auto__", )), )), ));
late final dc.dynamic $if_$119;
if((o7310$120 is lcoc_core.ISeqable$iface)){
$if_$119=((o7310$120 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$119=((lcoc_core.ISeqable.extensions((o7310$120 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$120 as dc.dynamic), ));
}
final dc.dynamic $192=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$119, ));
final dc.dynamic $199=(lcoc_core.list.$_invoke$1($192, ));
final dc.dynamic arg$110=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "ensure-hash", )), ));
final dc.dynamic arg$109=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "__hash", )), ));
final dc.dynamic arg$108=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "bit-xor", )), ));
final dc.List<dc.dynamic> fl$33=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "nses", 3771051699, ), ));
fl$33[1]=const lcoc_core.Keyword(null, "current-ns", 1862637831, );
final lcoc_core.PersistentVector $193=lcoc_core.$_vec_owning(fl$33, );
final dc.dynamic o7533$1=(lcoc_core.get_in.$_invoke$2($AMPERSAND_env$1, $193, ));
late final dc.int cast$2;
if((o7533$1 is lcoc_core.IHash$iface)){
cast$2=(((o7533$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$2=(((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), )) as dc.int);
}
final dc.dynamic o7533$2=name$1;
late final dc.int cast$3;
if((o7533$2 is lcoc_core.IHash$iface)){
cast$3=(((o7533$2 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$3=(((lcoc_core.IHash.extensions((o7533$2 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$2 as dc.dynamic), )) as dc.int);
}
final dc.int $194=(cast$2^cast$3);
final dc.dynamic $196=(lcoc_core.list.$_invoke$1($194, ));
final dc.dynamic o7310$121=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "hash-unordered-coll", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "coll__8826__auto__", )), )), ));
late final dc.dynamic $if_$120;
if((o7310$121 is lcoc_core.ISeqable$iface)){
$if_$120=((o7310$121 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$120=((lcoc_core.ISeqable.extensions((o7310$121 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$121 as dc.dynamic), ));
}
final dc.dynamic $195=(lcoc_core.list.$_invoke$1($if_$120, ));
final dc.dynamic o7310$122=(lcoc_core.concat.$_invoke$3(arg$108, $196, $195, ));
late final dc.dynamic $if_$121;
if((o7310$122 is lcoc_core.ISeqable$iface)){
$if_$121=((o7310$122 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$121=((lcoc_core.ISeqable.extensions((o7310$122 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$122 as dc.dynamic), ));
}
final dc.dynamic $197=(lcoc_core.list.$_invoke$1($if_$121, ));
final dc.dynamic o7310$123=(lcoc_core.concat.$_invoke$3(arg$110, arg$109, $197, ));
late final dc.dynamic $if_$122;
if((o7310$123 is lcoc_core.ISeqable$iface)){
$if_$122=((o7310$123 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$122=((lcoc_core.ISeqable.extensions((o7310$123 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$123 as dc.dynamic), ));
}
final dc.dynamic $198=(lcoc_core.list.$_invoke$1($if_$122, ));
final dc.dynamic o7310$124=(lcoc_core.concat.$_invoke$3(arg$111, $199, $198, ));
late final dc.dynamic $if_$123;
if((o7310$124 is lcoc_core.ISeqable$iface)){
$if_$123=((o7310$124 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$123=((lcoc_core.ISeqable.extensions((o7310$124 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$124 as dc.dynamic), ));
}
fl$4[34]=$if_$123;
final dc.dynamic arg$112=(lcoc_core.symbol.$_invoke$2("cljd.core", "ToStringMixin", ));
final dc.List<dc.dynamic> fl$34=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "mixin", 2105145522, ), ));
fl$34[1]=true;
final lcoc_core.PersistentHashMap $200=lcoc_core.$_map_lit(fl$34, );
final dc.dynamic $201=lcoc_core.with_meta(arg$112, $200, );
fl$4[35]=$201;
fl$4[36]=(lcoc_core.symbol.$_invoke$2("cljd.core", "IPrint", ));
final dc.dynamic arg$113=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "-print", )), ));
final dc.dynamic o7310$125=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8827__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "sink__8828__auto__", )), )), ));
late final dc.dynamic $if_$124;
if((o7310$125 is lcoc_core.ISeqable$iface)){
$if_$124=((o7310$125 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$124=((lcoc_core.ISeqable.extensions((o7310$125 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$125 as dc.dynamic), ));
}
final dc.dynamic $202=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$124, ));
final dc.dynamic $204=(lcoc_core.list.$_invoke$1($202, ));
final dc.dynamic o7310$126=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "print-map", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "o__8827__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "sink__8828__auto__", )), )), ));
late final dc.dynamic $if_$125;
if((o7310$126 is lcoc_core.ISeqable$iface)){
$if_$125=((o7310$126 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$125=((lcoc_core.ISeqable.extensions((o7310$126 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$126 as dc.dynamic), ));
}
final dc.dynamic $203=(lcoc_core.list.$_invoke$1($if_$125, ));
final dc.dynamic o7310$127=(lcoc_core.concat.$_invoke$3(arg$113, $204, $203, ));
late final dc.dynamic $if_$126;
if((o7310$127 is lcoc_core.ISeqable$iface)){
$if_$126=((o7310$127 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$126=((lcoc_core.ISeqable.extensions((o7310$127 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$127 as dc.dynamic), ));
}
fl$4[37]=$if_$126;
final lcoc_core.PersistentVector record_body$1=lcoc_core.vec(fl$4, );
late final dc.dynamic m$1;
if((lcoc_core.gensym is dc.Function)){
m$1=(lcoc_core.gensym as dc.Function)("m", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
m$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("m", ));
}else{
m$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "m", ));
}
final dc.dynamic arg$22=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "deftype", )), ));
final dc.List<dc.dynamic> fl$5=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "type-params", 3003227952, ), ));
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2(null, "K", )), ));
fl$6[1]=(lcoc_core.symbol.$_invoke$2(null, "V", ));
final lcoc_core.PersistentList $6=lcoc_core.$_list_lit(fl$6, );
fl$5[1]=$6;
final lcoc_core.PersistentHashMap $5=lcoc_core.$_map_lit(fl$5, );
final dc.dynamic $7=lcoc_core.with_meta(name$1, $5, );
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($7, ));
final lcoc_core.PersistentVector arg$5=lcoc_core.vec(fields$1, );
final dc.dynamic arg$4=(lcoc_core.symbol.$_invoke$2(null, "meta", ));
final dc.dynamic arg$3=(lcoc_core.symbol.$_invoke$2(null, "__hash", ));
final dc.List<dc.dynamic> fl$7=(dc.List<dc.dynamic>.filled(4, const lcoc_core.Keyword(null, "mutable", 314630028, ), ));
fl$7[1]=true;
fl$7[2]=const lcoc_core.Keyword(null, "tag", 2780644040, );
fl$7[3]=(lcoc_core.symbol.$_invoke$2("dart:core", "int", ));
final lcoc_core.PersistentHashMap $8=lcoc_core.$_map_lit(fl$7, );
final dc.dynamic $9=lcoc_core.with_meta(arg$3, $8, );
final dc.dynamic $10=(lcoc_core.conj.$_invoke$4(arg$5, arg$4, extmap$1, $9, ));
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($10, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$6(arg$6, $12, $11, (lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "type-only", 3917315094, ), )), (lcoc_core.list.$_invoke$1(true, )), (lcoc_core.concat.$_invoke$2(opts$PLUS_specs$1, record_body$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $31=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic arg$12=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$7=(lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2("->", name$1, )), ));
final dc.List<dc.dynamic> fl$8=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$8[1]=name$1;
final lcoc_core.PersistentHashMap $13=lcoc_core.$_map_lit(fl$8, );
final dc.dynamic $14=lcoc_core.with_meta(arg$7, $13, );
final dc.dynamic $18=(lcoc_core.list.$_invoke$1($14, ));
final dc.dynamic arg$11=(lcoc_core.list.$_invoke$1(lcoc_core.vec(fields$1, ), ));
final dc.dynamic arg$10=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$9=(lcoc_core.list.$_invoke$1(name$1, ));
final dc.dynamic arg$8=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$2;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $15=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$2, ));
final dc.dynamic $16=(lcoc_core.list.$_invoke$1($15, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$6(arg$10, arg$9, fields$1, arg$8, $16, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$3;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $17=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$4(arg$12, $18, arg$11, $17, ));
late final dc.dynamic $if_$4;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $30=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic arg$21=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$13=(lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2("map->", name$1, )), ));
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(2, const lcoc_core.Keyword(null, "tag", 2780644040, ), ));
fl$9[1]=name$1;
final lcoc_core.PersistentHashMap $19=lcoc_core.$_map_lit(fl$9, );
final dc.dynamic $20=lcoc_core.with_meta(arg$13, $19, );
final dc.dynamic $28=(lcoc_core.list.$_invoke$1($20, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(m$1, )), ));
late final dc.dynamic $if_$5;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final dc.dynamic $21=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$5, ));
final dc.dynamic $27=(lcoc_core.list.$_invoke$1($21, ));
final dc.dynamic arg$20=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$19=(lcoc_core.list.$_invoke$1(name$1, ));
final dc.dynamic arg$18=(lcoc_core.map.$_invoke$2((dc.dynamic k$1, ){
return (lcoc_core.list.$_invoke$2((lcoc_core.keyword.$_invoke$1(k$1, )), m$1, ));
}, fields$1, ));
final dc.dynamic arg$17=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic arg$16=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), ));
final dc.dynamic arg$15=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dissoc", )), ));
final dc.dynamic arg$14=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "into", )), ));
final dc.dynamic o7310$7=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$6;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}
final dc.dynamic $22=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$6, ));
final dc.dynamic $23=(lcoc_core.list.$_invoke$1($22, ));
final dc.dynamic o7310$8=(lcoc_core.concat.$_invoke$3(arg$14, $23, (lcoc_core.list.$_invoke$1(m$1, )), ));
late final dc.dynamic $if_$7;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
final dc.dynamic $24=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7310$9=(lcoc_core.concat.$_invoke$4(arg$16, arg$15, $24, (lcoc_core.list.$_invoke$1((lcoc_core.into.$_invoke$3(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$1(lcoc_core.keyword, )), fields$1, )), )), ));
late final dc.dynamic $if_$8;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
final dc.dynamic $25=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7310$10=(lcoc_core.concat.$_invoke$6(arg$20, arg$19, arg$18, arg$17, $25, (lcoc_core.list.$_invoke$1(-1, )), ));
late final dc.dynamic $if_$9;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
final dc.dynamic $26=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic o7310$11=(lcoc_core.concat.$_invoke$4(arg$21, $28, $27, $26, ));
late final dc.dynamic $if_$10;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
final dc.dynamic $29=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7310$12=(lcoc_core.concat.$_invoke$4(arg$22, $31, $30, $29, ));
if((o7310$12 is lcoc_core.ISeqable$iface)){
return ((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END defrecord$ifn

// BEGIN deftype
lcoc_core.IFn$iface deftype=lcoc_core.deftype$ifn(null, );

// END deftype

// BEGIN deftype$ifn
class deftype$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const deftype$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.deftype$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic args$1, ){
final dc.dynamic vec$8191_$1=args$1;
final dc.dynamic o7310$1=vec$8191_$1;
late final dc.dynamic seq$8192_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
seq$8192_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8192_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic first$8193_$1=lcoc_core.first(seq$8192_$1, );
final dc.dynamic seq$8192_$2=lcoc_core.next(seq$8192_$1, );
final dc.dynamic class_name$1=first$8193_$1;
final dc.dynamic first$8193_$2=lcoc_core.first(seq$8192_$2, );
final dc.dynamic seq$8192_$3=lcoc_core.next(seq$8192_$2, );
final dc.dynamic fields$1=first$8193_$2;
final dc.dynamic args$2=seq$8192_$3;
final dc.dynamic vec$8194_$1=lcoc_core.roll_leading_opts(args$2, );
final dc.dynamic opts$1=(lcoc_core.nth.$_invoke$3(vec$8194_$1, 0, null, ));
final dc.dynamic specs$1=(lcoc_core.nth.$_invoke$3(vec$8194_$1, 1, null, ));
final dc.dynamic deftype_form$1=(lcoc_core.list$STAR_.$_invoke$5((lcoc_core.symbol.$_invoke$2(null, "deftype*", )), class_name$1, fields$1, opts$1, specs$1, ));
final dc.dynamic or$7228_$AUTO_$1=(const lcoc_core.Keyword(null, "type-only", 3917315094, ).$_invoke$1(opts$1, ));
late final dc.dynamic $if_$2;
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
$if_$2=or$7228_$AUTO_$1;
}else{
final dc.dynamic o7524$1=class_name$1;
late final dc.dynamic $if_$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
$if_$2=(const lcoc_core.Keyword(null, "abstract", 928480153, ).$_invoke$1($if_$1, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
return deftype_form$1;
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1(deftype_form$1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "defn", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$1((lcoc_core.str.$_invoke$2("->", class_name$1, )), )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$1(fields$1, ));
late final dc.dynamic $if_$3;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$3(class_name$1, lcoc_core.dissoc, const lcoc_core.Keyword(null, "type-params", 3003227952, ), )), )), fields$1, ));
late final dc.dynamic $if_$4;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$4(arg$2, arg$1, $3, $2, ));
late final dc.dynamic $if_$5;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$4, arg$3, $4, ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END deftype$ifn

// BEGIN delay
lcoc_core.IFn$iface delay=lcoc_core.delay$ifn(null, );

// END delay

// BEGIN delay$ifn
class delay$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const delay$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.delay$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "Delay", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3(arg$1, $2, body$1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4(arg$4, arg$3, arg$2, $3, ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END delay$ifn

// BEGIN delay?
dc.dynamic delay$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.Delay);
}

// END delay?

// BEGIN deref
dc.dynamic deref(dc.dynamic ref$1, ){
final dc.dynamic o7365$1=ref$1;
if((o7365$1 is lcoc_core.IDeref$iface)){
return ((o7365$1 as lcoc_core.IDeref$iface).$_deref$0());
}
return ((lcoc_core.IDeref.extensions((o7365$1 as dc.dynamic), ) as lcoc_core.IDeref$ext).$_deref$0((o7365$1 as dc.dynamic), ));
}

// END deref

// BEGIN destructure
dc.dynamic destructure(dc.dynamic bindings$1, ){
final dc.dynamic bents$1=(lcoc_core.partition.$_invoke$2(2, bindings$1, ));
dc.dynamic pb$1(dc.dynamic bvec$1, dc.dynamic b$1, dc.dynamic v$1, ){
dc.dynamic pvec$2(dc.dynamic bvec$4, dc.dynamic b$4, dc.dynamic val$2, ){
late final dc.dynamic gvec$2;
if((lcoc_core.gensym is dc.Function)){
gvec$2=(lcoc_core.gensym as dc.Function)("vec__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gvec$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("vec__", ));
}else{
gvec$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "vec__", ));
}
late final dc.dynamic gseq$2;
if((lcoc_core.gensym is dc.Function)){
gseq$2=(lcoc_core.gensym as dc.Function)("seq__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gseq$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("seq__", ));
}else{
gseq$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "seq__", ));
}
late final dc.dynamic gfirst$2;
if((lcoc_core.gensym is dc.Function)){
gfirst$2=(lcoc_core.gensym as dc.Function)("first__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gfirst$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("first__", ));
}else{
gfirst$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "first__", ));
}
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(1, (lcoc_core.symbol.$_invoke$2(null, "&", )), ));
final lcoc_core.PersistentHashSet $6=lcoc_core.$set_(fl$2, );
final dc.dynamic has_rest$2=lcoc_core.some($6, b$4, );
final dc.dynamic ret$5=(lcoc_core.conj.$_invoke$3(bvec$4, gvec$2, val$2, ));
dc.dynamic ret$6;
if(((has_rest$2!=false)&&(has_rest$2!=null))){
ret$6=(lcoc_core.conj.$_invoke$3(ret$5, gseq$2, (lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), gvec$2, )), ));
}else{
ret$6=ret$5;
}
dc.dynamic n$2=0;
dc.dynamic bs$2=b$4;
dc.dynamic seen_rest$QMARK_$2=false;
do {
final dc.dynamic o7310$9=bs$2;
late final dc.dynamic $if_$15;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$15=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$15=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
if((($if_$15!=false)&&($if_$15!=null))){
final dc.dynamic firstb$2=lcoc_core.first(bs$2, );
if((lcoc_core.$EQ_.$_invoke$2(firstb$2, (lcoc_core.symbol.$_invoke$2(null, "&", )), ))){
ret$6=pb$1(ret$6, lcoc_core.second(bs$2, ), gseq$2, );
bs$2=lcoc_core.nnext(bs$2, );
seen_rest$QMARK_$2=true;
continue;
}
if((lcoc_core.$EQ_.$_invoke$2(firstb$2, const lcoc_core.Keyword(null, "as", 55427094, ), ))){
return pb$1(ret$6, lcoc_core.second(bs$2, ), gvec$2, );
}
if(((seen_rest$QMARK_$2!=false)&&(seen_rest$QMARK_$2!=null))){
throw dc.Exception("Unsupported binding form, only :as can follow & parameter", );
}
late final dc.dynamic $if_$19;
if(((has_rest$2!=false)&&(has_rest$2!=null))){
final dc.dynamic o7310$10=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1(gseq$2, )), ));
late final dc.dynamic $if_$17;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$17=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
final dc.dynamic o7310$11=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(gseq$2, )), ));
late final dc.dynamic $if_$16;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$16=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$16=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
$if_$19=(lcoc_core.conj.$_invoke$5(ret$6, gfirst$2, $if_$17, gseq$2, $if_$16, ));
}else{
$if_$19=ret$6;
}
late final dc.dynamic $if_$18;
if(((has_rest$2!=false)&&(has_rest$2!=null))){
$if_$18=gfirst$2;
}else{
$if_$18=(lcoc_core.list.$_invoke$4((lcoc_core.symbol.$_invoke$2("cljd.core", "nth", )), gvec$2, n$2, null, ));
}
ret$6=pb$1($if_$19, firstb$2, $if_$18, );
n$2=(1+(n$2 as dc.num));
bs$2=lcoc_core.next(bs$2, );
continue;
}
return ret$6;
} while(true);
}
dc.dynamic pmap$2(dc.dynamic bvec$5, dc.dynamic b$5, dc.dynamic v$3, ){
late final dc.dynamic gmap$2;
if((lcoc_core.gensym is dc.Function)){
gmap$2=(lcoc_core.gensym as dc.Function)("map__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gmap$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("map__", ));
}else{
gmap$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "map__", ));
}
final dc.dynamic defaults$2=(const lcoc_core.Keyword(null, "or", 3079089802, ).$_invoke$1(b$5, ));
final dc.dynamic coll7355$7=bvec$5;
final dc.dynamic o7356$7=gmap$2;
late final dc.dynamic coll7355$8;
if((coll7355$7 is lcoc_core.ICollection$iface)){
coll7355$8=((coll7355$7 as lcoc_core.ICollection$iface).$_conj$1(o7356$7, ));
}else{
coll7355$8=((lcoc_core.ICollection.extensions((coll7355$7 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$7 as dc.dynamic), o7356$7, ));
}
final dc.dynamic o7356$8=v$3;
late final dc.dynamic coll7355$9;
if((coll7355$8 is lcoc_core.ICollection$iface)){
coll7355$9=((coll7355$8 as lcoc_core.ICollection$iface).$_conj$1((o7356$8 as dc.dynamic), ));
}else{
coll7355$9=((lcoc_core.ICollection.extensions(coll7355$8, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$8, (o7356$8 as dc.dynamic), ));
}
final dc.dynamic o7356$9=gmap$2;
late final dc.dynamic coll7355$10;
if((coll7355$9 is lcoc_core.ICollection$iface)){
coll7355$10=((coll7355$9 as lcoc_core.ICollection$iface).$_conj$1(o7356$9, ));
}else{
coll7355$10=((lcoc_core.ICollection.extensions(coll7355$9, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$9, o7356$9, ));
}
final dc.dynamic arg$7=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$12=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq?", )), )), (lcoc_core.list.$_invoke$1(gmap$2, )), ));
late final dc.dynamic $if_$20;
if((o7310$12 is lcoc_core.ISeqable$iface)){
$if_$20=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$20=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$20, ));
final dc.dynamic arg$6=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-map-lit", )), ));
final dc.dynamic o7310$13=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1(gmap$2, )), ));
late final dc.dynamic $if_$21;
if((o7310$13 is lcoc_core.ISeqable$iface)){
$if_$21=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$21=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$21, ));
final dc.dynamic o7310$14=(lcoc_core.concat.$_invoke$2(arg$6, $7, ));
late final dc.dynamic $if_$22;
if((o7310$14 is lcoc_core.ISeqable$iface)){
$if_$22=((o7310$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$22=((lcoc_core.ISeqable.extensions((o7310$14 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$14 as dc.dynamic), ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$22, ));
final dc.dynamic o7310$15=(lcoc_core.concat.$_invoke$4(arg$7, $9, $8, (lcoc_core.list.$_invoke$1(gmap$2, )), ));
late final dc.dynamic o7356$10;
if((o7310$15 is lcoc_core.ISeqable$iface)){
o7356$10=((o7310$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
o7356$10=((lcoc_core.ISeqable.extensions((o7310$15 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$15 as dc.dynamic), ));
}
late final dc.dynamic $if_$23;
if((coll7355$10 is lcoc_core.ICollection$iface)){
$if_$23=((coll7355$10 as lcoc_core.ICollection$iface).$_conj$1(o7356$10, ));
}else{
$if_$23=((lcoc_core.ICollection.extensions(coll7355$10, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$10, o7356$10, ));
}
dc.dynamic ret$8=(dc.dynamic ret$7, ){
final dc.dynamic test$2=(const lcoc_core.Keyword(null, "as", 55427094, ).$_invoke$1(b$5, ));
if(((test$2!=false)&&(test$2!=null))){
return (lcoc_core.conj.$_invoke$3(ret$7, (const lcoc_core.Keyword(null, "as", 55427094, ).$_invoke$1(b$5, )), gmap$2, ));
}
return ret$7;
}($if_$23, );
final dc.dynamic coll7370$4=lcoc_core.keys(b$5, );
dc.dynamic f7371$4(dc.dynamic transforms$3, dc.dynamic mk$2, ){
if(lcoc_core.keyword$QMARK_(mk$2, )){
final dc.dynamic x7301$4=mk$2;
late final dc.String? mkns$2;
if((x7301$4 is lcoc_core.INamed$iface)){
mkns$2=(((x7301$4 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
mkns$2=(((lcoc_core.INamed.extensions((x7301$4 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$4 as dc.dynamic), )) as dc.String?);
}
final dc.String mkn$2=lcoc_core.name(mk$2, );
if((lcoc_core.$EQ_.$_invoke$2(mkn$2, "keys", ))){
final dc.dynamic coll7440$5=transforms$3;
final dc.dynamic k7441$5=mk$2;
dc.dynamic v7442$5(dc.dynamic p1$8152_$SHARP_$2, ){
final dc.String? or$7228_$AUTO_$3=mkns$2;
late final dc.String? $if_$24;
if((or$7228_$AUTO_$3!=null)){
$if_$24=or$7228_$AUTO_$3;
}else{
final dc.dynamic x7301$5=p1$8152_$SHARP_$2;
if((x7301$5 is lcoc_core.INamed$iface)){
$if_$24=(((x7301$5 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
$if_$24=(((lcoc_core.INamed.extensions((x7301$5 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$5 as dc.dynamic), )) as dc.String?);
}
}
return (lcoc_core.keyword.$_invoke$2($if_$24, lcoc_core.name(p1$8152_$SHARP_$2, ), ));
}
if((coll7440$5 is lcoc_core.IAssociative$iface)){
return ((coll7440$5 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$5 as dc.dynamic), v7442$5, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$5 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$5 as dc.dynamic), (k7441$5 as dc.dynamic), v7442$5, ));
}
if((lcoc_core.$EQ_.$_invoke$2(mkn$2, "syms", ))){
final dc.dynamic coll7440$6=transforms$3;
final dc.dynamic k7441$6=mk$2;
dc.dynamic v7442$6(dc.dynamic p1$8153_$SHARP_$2, ){
final dc.dynamic arg$8=(lcoc_core.symbol.$_invoke$2(null, "quote", ));
final dc.String? or$7228_$AUTO_$4=mkns$2;
late final dc.String? $if_$25;
if((or$7228_$AUTO_$4!=null)){
$if_$25=or$7228_$AUTO_$4;
}else{
final dc.dynamic x7301$6=p1$8153_$SHARP_$2;
if((x7301$6 is lcoc_core.INamed$iface)){
$if_$25=(((x7301$6 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
$if_$25=(((lcoc_core.INamed.extensions((x7301$6 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$6 as dc.dynamic), )) as dc.String?);
}
}
final dc.dynamic $10=(lcoc_core.symbol.$_invoke$2($if_$25, lcoc_core.name(p1$8153_$SHARP_$2, ), ));
return (lcoc_core.list.$_invoke$2(arg$8, $10, ));
}
if((coll7440$6 is lcoc_core.IAssociative$iface)){
return ((coll7440$6 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$6 as dc.dynamic), v7442$6, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$6 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$6 as dc.dynamic), (k7441$6 as dc.dynamic), v7442$6, ));
}
if((lcoc_core.$EQ_.$_invoke$2(mkn$2, "strs", ))){
final dc.dynamic coll7440$7=transforms$3;
final dc.dynamic k7441$7=mk$2;
final lcoc_core.IFn$iface v7442$7=lcoc_core.str;
if((coll7440$7 is lcoc_core.IAssociative$iface)){
return ((coll7440$7 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$7 as dc.dynamic), v7442$7, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$7 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$7 as dc.dynamic), (k7441$7 as dc.dynamic), v7442$7, ));
}
return transforms$3;
}
return transforms$3;
}
final lcoc_core.PersistentHashMap start7372$4=lcoc_core.$_EMPTY_MAP;
late final dc.dynamic transforms$4;
if((coll7370$4 is lcoc_core.IReduce$iface)){
transforms$4=((coll7370$4 as lcoc_core.IReduce$iface).$_reduce$2(f7371$4, start7372$4, ));
}else{
transforms$4=((lcoc_core.IReduce.extensions((coll7370$4 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$4 as dc.dynamic), f7371$4, start7372$4, ));
}
final dc.dynamic coll7370$5=transforms$4;
dc.dynamic f7371$6(dc.dynamic bes$3, dc.dynamic entry$2, ){
final dc.dynamic f$3=lcoc_core.key(entry$2, );
late final dc.dynamic coll7370$6;
if((f$3 is dc.Function)){
coll7370$6=(f$3 as dc.Function)(bes$3, );
}else if((f$3 is lcoc_core.IFn$iface)){
coll7370$6=((f$3 as lcoc_core.IFn$iface).$_invoke$1(bes$3, ));
}else{
coll7370$6=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, bes$3, ));
}
dc.dynamic f7371$5(dc.dynamic p1$8154_$SHARP_$2, dc.dynamic p2$8155_$SHARP_$2, ){
final dc.dynamic coll7440$8=p1$8154_$SHARP_$2;
final dc.dynamic k7441$8=p2$8155_$SHARP_$2;
final dc.dynamic f$4=lcoc_core.val(entry$2, );
late final dc.dynamic v7442$8;
if((f$4 is dc.Function)){
v7442$8=(f$4 as dc.Function)(p2$8155_$SHARP_$2, );
}else if((f$4 is lcoc_core.IFn$iface)){
v7442$8=((f$4 as lcoc_core.IFn$iface).$_invoke$1(p2$8155_$SHARP_$2, ));
}else{
v7442$8=(lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, p2$8155_$SHARP_$2, ));
}
if((coll7440$8 is lcoc_core.IAssociative$iface)){
return ((coll7440$8 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$8 as dc.dynamic), v7442$8, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$8 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$8 as dc.dynamic), (k7441$8 as dc.dynamic), v7442$8, ));
}
final dc.dynamic start7372$5=(lcoc_core.dissoc.$_invoke$2(bes$3, lcoc_core.key(entry$2, ), ));
if((coll7370$6 is lcoc_core.IReduce$iface)){
return ((coll7370$6 as lcoc_core.IReduce$iface).$_reduce$2(f7371$5, (start7372$5 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions(coll7370$6, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7370$6, f7371$5, (start7372$5 as dc.dynamic), ));
}
final dc.dynamic start7372$6=(lcoc_core.dissoc.$_invoke$3(b$5, const lcoc_core.Keyword(null, "as", 55427094, ), const lcoc_core.Keyword(null, "or", 3079089802, ), ));
dc.dynamic bes$4;
if((coll7370$5 is lcoc_core.IReduce$iface)){
bes$4=((coll7370$5 as lcoc_core.IReduce$iface).$_reduce$2(f7371$6, (start7372$6 as dc.dynamic), ));
}else{
bes$4=((lcoc_core.IReduce.extensions(coll7370$5, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7370$5, f7371$6, (start7372$6 as dc.dynamic), ));
}
do {
final dc.dynamic o7310$16=bes$4;
late final dc.dynamic $if_$26;
if((o7310$16 is lcoc_core.ISeqable$iface)){
$if_$26=((o7310$16 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$26=((lcoc_core.ISeqable.extensions((o7310$16 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$16 as dc.dynamic), ));
}
if((($if_$26!=false)&&($if_$26!=null))){
final dc.dynamic bb$2=lcoc_core.key(lcoc_core.first(bes$4, ), );
final dc.dynamic bk$2=lcoc_core.val(lcoc_core.first(bes$4, ), );
late final dc.dynamic local$2;
if(lcoc_core.ident$QMARK_(bb$2, )){
final dc.dynamic arg$9=(lcoc_core.symbol.$_invoke$2(null, lcoc_core.name(bb$2, ), ));
final dc.dynamic o7524$2=bb$2;
late final dc.dynamic $if_$27;
if((o7524$2 is lcoc_core.IMeta$iface)){
$if_$27=((o7524$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$27=((lcoc_core.IMeta.extensions((o7524$2 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$2 as dc.dynamic), ));
}
local$2=lcoc_core.with_meta(arg$9, $if_$27, );
}else{
local$2=bb$2;
}
late final dc.dynamic bv$2;
if(lcoc_core.contains$QMARK_(defaults$2, local$2, )){
final dc.dynamic arg$10=(lcoc_core.symbol.$_invoke$2("cljd.core", "get", ));
late final dc.dynamic $if_$28;
if((defaults$2 is dc.Function)){
$if_$28=(defaults$2 as dc.Function)(local$2, );
}else if((defaults$2 is lcoc_core.IFn$iface)){
$if_$28=((defaults$2 as lcoc_core.IFn$iface).$_invoke$1(local$2, ));
}else{
$if_$28=(lcoc_core.IFn.extensions(defaults$2, ).$_invoke$1(defaults$2, local$2, ));
}
bv$2=(lcoc_core.list.$_invoke$4(arg$10, gmap$2, bk$2, $if_$28, ));
}else{
bv$2=(lcoc_core.list.$_invoke$3((lcoc_core.symbol.$_invoke$2("cljd.core", "get", )), gmap$2, bk$2, ));
}
if(lcoc_core.ident$QMARK_(bb$2, )){
ret$8=(lcoc_core.conj.$_invoke$3(ret$8, local$2, bv$2, ));
}else{
ret$8=pb$1(ret$8, bb$2, bv$2, );
}
bes$4=lcoc_core.next(bes$4, );
continue;
}
return ret$8;
} while(true);
}
if(lcoc_core.symbol$QMARK_(b$1, )){
final dc.dynamic coll7355$11=bvec$1;
final dc.dynamic o7356$11=b$1;
late final dc.dynamic coll7355$12;
if((coll7355$11 is lcoc_core.ICollection$iface)){
coll7355$12=((coll7355$11 as lcoc_core.ICollection$iface).$_conj$1((o7356$11 as dc.dynamic), ));
}else{
coll7355$12=((lcoc_core.ICollection.extensions((coll7355$11 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$11 as dc.dynamic), (o7356$11 as dc.dynamic), ));
}
final dc.dynamic o7356$12=v$1;
if((coll7355$12 is lcoc_core.ICollection$iface)){
return ((coll7355$12 as lcoc_core.ICollection$iface).$_conj$1((o7356$12 as dc.dynamic), ));
}
return ((lcoc_core.ICollection.extensions(coll7355$12, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$12, (o7356$12 as dc.dynamic), ));
}
if(lcoc_core.vector$QMARK_(b$1, )){
return pvec$2(bvec$1, b$1, v$1, );
}
if(lcoc_core.map$QMARK_(b$1, )){
return pmap$2(bvec$1, b$1, v$1, );
}
throw dc.Exception((lcoc_core.str.$_invoke$2("Unsupported binding form: ", b$1, )), );
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, ) pb$2=pb$1;
dc.dynamic process_entry$1(dc.dynamic bvec$6, dc.dynamic b$6, ){
return pb$2(bvec$6, lcoc_core.first(b$6, ), lcoc_core.second(b$6, ), );
}
if(lcoc_core.every$QMARK_(lcoc_core.symbol$QMARK_, (lcoc_core.map.$_invoke$2(lcoc_core.first, bents$1, )), )){
return bindings$1;
}
final dc.dynamic coll7370$7=bents$1;
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) f7371$7=process_entry$1;
final lcoc_core.PersistentVector start7372$7=lcoc_core.$_EMPTY_VECTOR;
if((coll7370$7 is lcoc_core.IReduce$iface)){
return ((coll7370$7 as lcoc_core.IReduce$iface).$_reduce$2(f7371$7, start7372$7, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$7 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$7 as dc.dynamic), f7371$7, start7372$7, ));
}

// END destructure

// BEGIN disj
lcoc_core.IFn$iface disj=lcoc_core.disj$ifn(null, );

// END disj

// BEGIN disj!
lcoc_core.IFn$iface disj$BANG_=lcoc_core.disj$BANG_$ifn(null, );

// END disj!

// BEGIN disj$BANG_$ifn
class disj$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const disj$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.disj$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $set_$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic $set_$1=$set_$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic tcoll7591$1=$set_$1;
final dc.dynamic v7592$1=key$1;
late final dc.dynamic ret$1;
if((tcoll7591$1 is lcoc_core.ITransientSet$iface)){
ret$1=((tcoll7591$1 as lcoc_core.ITransientSet$iface).$_disjoin$BANG_$1((v7592$1 as dc.dynamic), ));
}else{
ret$1=((lcoc_core.ITransientSet.extensions((tcoll7591$1 as dc.dynamic), ) as lcoc_core.ITransientSet$ext).$_disjoin$BANG_$1((tcoll7591$1 as dc.dynamic), (v7592$1 as dc.dynamic), ));
}
if(((ks$1 as dc.dynamic)!=null)){
$set_$1=ret$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic $set_$3, ){
return $set_$3;
}

dc.dynamic $_invoke$2(dc.dynamic $set_$4, dc.dynamic key$3, ){
final dc.dynamic tcoll7591$2=$set_$4;
final dc.dynamic v7592$2=key$3;
if((tcoll7591$2 is lcoc_core.ITransientSet$iface)){
return ((tcoll7591$2 as lcoc_core.ITransientSet$iface).$_disjoin$BANG_$1((v7592$2 as dc.dynamic), ));
}
return ((lcoc_core.ITransientSet.extensions((tcoll7591$2 as dc.dynamic), ) as lcoc_core.ITransientSet$ext).$_disjoin$BANG_$1((tcoll7591$2 as dc.dynamic), (v7592$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END disj$BANG_$ifn

// BEGIN disj$ifn
class disj$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const disj$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.disj$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $set_$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic $set_$1=$set_$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic coll7585$1=$set_$1;
final dc.dynamic v7586$1=key$1;
late final dc.dynamic ret$1;
if((coll7585$1 is lcoc_core.ISet$iface)){
ret$1=((coll7585$1 as lcoc_core.ISet$iface).$_disjoin$1((v7586$1 as dc.dynamic), ));
}else{
ret$1=((lcoc_core.ISet.extensions((coll7585$1 as dc.dynamic), ) as lcoc_core.ISet$ext).$_disjoin$1((coll7585$1 as dc.dynamic), (v7586$1 as dc.dynamic), ));
}
if(((ks$1 as dc.dynamic)!=null)){
$set_$1=ret$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic $set_$3, ){
return $set_$3;
}

dc.dynamic $_invoke$2(dc.dynamic $set_$4, dc.dynamic key$3, ){
final dc.dynamic coll7585$2=$set_$4;
final dc.dynamic v7586$2=key$3;
if((coll7585$2 is lcoc_core.ISet$iface)){
return ((coll7585$2 as lcoc_core.ISet$iface).$_disjoin$1((v7586$2 as dc.dynamic), ));
}
return ((lcoc_core.ISet.extensions((coll7585$2 as dc.dynamic), ) as lcoc_core.ISet$ext).$_disjoin$1((coll7585$2 as dc.dynamic), (v7586$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END disj$ifn

// BEGIN dissoc
lcoc_core.IFn$iface dissoc=lcoc_core.dissoc$ifn(null, );

// END dissoc

// BEGIN dissoc!
lcoc_core.IFn$iface dissoc$BANG_=lcoc_core.dissoc$BANG_$ifn(null, );

// END dissoc!

// BEGIN dissoc$BANG_$ifn
class dissoc$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uuY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const dissoc$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.dissoc$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic tcoll$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic tcoll$1=tcoll$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic tcoll7579$1=tcoll$1;
final dc.dynamic key7580$1=key$1;
late final dc.dynamic ntcoll$1;
if((tcoll7579$1 is lcoc_core.ITransientMap$iface)){
ntcoll$1=((tcoll7579$1 as lcoc_core.ITransientMap$iface).$_dissoc$BANG_$1((key7580$1 as dc.dynamic), ));
}else{
ntcoll$1=((lcoc_core.ITransientMap.extensions((tcoll7579$1 as dc.dynamic), ) as lcoc_core.ITransientMap$ext).$_dissoc$BANG_$1((tcoll7579$1 as dc.dynamic), (key7580$1 as dc.dynamic), ));
}
if(((ks$1!=false)&&(ks$1!=null))){
tcoll$1=ntcoll$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ntcoll$1;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic tcoll$3, dc.dynamic key$3, ){
final dc.dynamic tcoll7579$2=tcoll$3;
final dc.dynamic key7580$2=key$3;
if((tcoll7579$2 is lcoc_core.ITransientMap$iface)){
return ((tcoll7579$2 as lcoc_core.ITransientMap$iface).$_dissoc$BANG_$1((key7580$2 as dc.dynamic), ));
}
return ((lcoc_core.ITransientMap.extensions((tcoll7579$2 as dc.dynamic), ) as lcoc_core.ITransientMap$ext).$_dissoc$BANG_$1((tcoll7579$2 as dc.dynamic), (key7580$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dissoc$BANG_$ifn

// BEGIN dissoc$ifn
class dissoc$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const dissoc$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.dissoc$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic map$2, dc.dynamic key$2, dc.dynamic ks$2, ){
dc.dynamic map$1=map$2;
dc.dynamic key$1=key$2;
dc.dynamic ks$1=ks$2;
do {
final dc.dynamic coll7511$1=map$1;
final dc.dynamic k7512$1=key$1;
late final dc.dynamic temp$7205_$AUTO_$1;
if((coll7511$1 is lcoc_core.IMap$iface)){
temp$7205_$AUTO_$1=((coll7511$1 as lcoc_core.IMap$iface).$_dissoc$1((k7512$1 as dc.dynamic), ));
}else{
temp$7205_$AUTO_$1=((lcoc_core.IMap.extensions((coll7511$1 as dc.dynamic), ) as lcoc_core.IMap$ext).$_dissoc$1((coll7511$1 as dc.dynamic), (k7512$1 as dc.dynamic), ));
}
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.dynamic ret$1=temp$7205_$AUTO_$1;
if(((ks$1!=false)&&(ks$1!=null))){
map$1=ret$1;
key$1=lcoc_core.first(ks$1, );
ks$1=lcoc_core.next(ks$1, );
continue;
}
return ret$1;
} while(true);
}

dc.dynamic $_invoke$1(dc.dynamic map$3, ){
return map$3;
}

dc.dynamic $_invoke$2(dc.dynamic map$4, dc.dynamic key$3, ){
final dc.dynamic coll7511$2=map$4;
final dc.dynamic k7512$2=key$3;
if((coll7511$2 is lcoc_core.IMap$iface)){
return ((coll7511$2 as lcoc_core.IMap$iface).$_dissoc$1((k7512$2 as dc.dynamic), ));
}
return ((lcoc_core.IMap.extensions((coll7511$2 as dc.dynamic), ) as lcoc_core.IMap$ext).$_dissoc$1((coll7511$2 as dc.dynamic), (k7512$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dissoc$ifn

// BEGIN distinct
lcoc_core.IFn$iface distinct=lcoc_core.distinct$ifn(null, );

// END distinct

// BEGIN distinct$QMARK_$ifn
class distinct$QMARK_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const distinct$QMARK_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.distinct$QMARK_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
if((lcoc_core.not$EQ_.$_invoke$2(x$1, y$1, ))){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, x$1, ));
fl$1[1]=y$1;
final lcoc_core.PersistentHashSet s$1=lcoc_core.$set_(fl$1, );
final dc.dynamic G$8677_$1=more$1;
final dc.dynamic vec$8678_$1=G$8677_$1;
final dc.dynamic o7310$1=vec$8678_$1;
late final dc.dynamic seq$8679_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
seq$8679_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8679_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic first$8680_$1=lcoc_core.first(seq$8679_$1, );
final dc.dynamic seq$8679_$2=lcoc_core.next(seq$8679_$1, );
final dc.dynamic x$2=first$8680_$1;
final dc.dynamic etc$1=seq$8679_$2;
final dc.dynamic xs$1=vec$8678_$1;
dc.dynamic s$2=s$1;
dc.dynamic G$8677_$2=G$8677_$1;
do {
final dc.dynamic s$3=s$2;
final dc.dynamic vec$8681_$1=G$8677_$2;
final dc.dynamic o7310$2=vec$8681_$1;
late final dc.dynamic seq$8682_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
seq$8682_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8682_$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic first$8683_$1=lcoc_core.first(seq$8682_$1, );
final dc.dynamic seq$8682_$2=lcoc_core.next(seq$8682_$1, );
final dc.dynamic x$3=first$8683_$1;
final dc.dynamic etc$2=seq$8682_$2;
final dc.dynamic xs$2=vec$8681_$1;
if(((xs$2!=false)&&(xs$2!=null))){
if(lcoc_core.contains$QMARK_(s$3, x$3, )){
return false;
}
final dc.dynamic coll7355$1=s$3;
final dc.dynamic o7356$1=x$3;
if((coll7355$1 is lcoc_core.ICollection$iface)){
s$2=((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}else{
s$2=((lcoc_core.ICollection.extensions((coll7355$1 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$1 as dc.dynamic), (o7356$1 as dc.dynamic), ));
}
G$8677_$2=etc$2;
continue;
}
return true;
} while(true);
}else{
return false;
}
}

dc.dynamic $_invoke$1(dc.dynamic x$4, ){
return true;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$2, ){
if((lcoc_core.$EQ_.$_invoke$2(x$5, y$2, ))){
return false;
}
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END distinct$QMARK_$ifn

// BEGIN distinct$ifn
class distinct$ifn extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const distinct$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.distinct$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile seen$1=lcoc_core.volatile$BANG_(lcoc_core.$_EMPTY_SET, );
final dc.dynamic f$1=lcoc_core.Reify$46(null, rf$1, seen$1, );
return f$1;
};
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
lcoc_core.LazySeq step$1(dc.dynamic xs$1, dc.dynamic seen$2, ){
return lcoc_core.LazySeq(null, ((){
return (dc.dynamic p$8669_$2, dc.dynamic seen$5, ){
dc.dynamic p$8669_$1=p$8669_$2;
dc.dynamic seen$4=seen$5;
do {
final dc.dynamic vec$8670_$1=p$8669_$1;
final dc.dynamic f$3=(lcoc_core.nth.$_invoke$3(vec$8670_$1, 0, null, ));
final dc.dynamic xs$3=vec$8670_$1;
final dc.dynamic o7310$2=xs$3;
late final dc.dynamic temp$7215_$AUTO_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$2!=false)&&(temp$7215_$AUTO_$2!=null))){
final dc.dynamic s$2=temp$7215_$AUTO_$2;
if(lcoc_core.contains$QMARK_(seen$4, f$3, )){
p$8669_$1=lcoc_core.rest(s$2, );
continue;
}
final dc.dynamic arg$2=lcoc_core.rest(s$2, );
final dc.dynamic coll7355$3=seen$4;
final dc.dynamic o7356$3=f$3;
late final dc.dynamic $if_$2;
if((coll7355$3 is lcoc_core.ICollection$iface)){
$if_$2=((coll7355$3 as lcoc_core.ICollection$iface).$_conj$1((o7356$3 as dc.dynamic), ));
}else{
$if_$2=((lcoc_core.ICollection.extensions((coll7355$3 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$3 as dc.dynamic), (o7356$3 as dc.dynamic), ));
}
final lcoc_core.LazySeq $2=step$1(arg$2, $if_$2, );
return lcoc_core.cons(f$3, $2, );
}
return null;
} while(true);
}(xs$1, seen$2, );
} as dc.dynamic), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) step$2=step$1;
return step$2(coll$1, lcoc_core.$_EMPTY_SET, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END distinct$ifn

// BEGIN distinct?
lcoc_core.IFn$iface distinct$QMARK_=lcoc_core.distinct$QMARK_$ifn(null, );

// END distinct?

// BEGIN do-assoc
lcoc_core.VectorNode do_assoc(dc.dynamic level$1, dc.dynamic node$1, dc.dynamic n$1, dc.dynamic val$1, ){
final dc.List<dc.dynamic> cloned_node$1=(dc.List.from((node$1 as lcoc_core.VectorNode).arr, growable: false, ));
if((0==(level$1 as dc.int))){
final dc.dynamic v$7774_$AUTO_$1=val$1;
cloned_node$1[((n$1 as dc.int)&31)]=(v$7774_$AUTO_$1 as dc.dynamic);
return lcoc_core.VectorNode(null, cloned_node$1, );
}
final dc.int subidx$1=(((n$1 as dc.int)>>(31&(level$1 as dc.int)))&31);
final lcoc_core.VectorNode new_child$1=lcoc_core.do_assoc(((level$1 as dc.int)-5), ((node$1 as lcoc_core.VectorNode).arr[subidx$1]), (n$1 as dc.int), val$1, );
final lcoc_core.VectorNode v$7774_$AUTO_$2=new_child$1;
cloned_node$1[subidx$1]=v$7774_$AUTO_$2;
return lcoc_core.VectorNode(null, cloned_node$1, );
}

// END do-assoc

// BEGIN doall
lcoc_core.IFn$iface doall=lcoc_core.doall$ifn(null, );

// END doall

// BEGIN doall$ifn
class doall$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const doall$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.doall$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
lcoc_core.dorun.$_invoke$1(coll$1, );
return coll$1;
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic coll$2, ){
lcoc_core.dorun.$_invoke$2(n$1, coll$2, );
return coll$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END doall$ifn

// BEGIN dorun
lcoc_core.IFn$iface dorun=lcoc_core.dorun$ifn(null, );

// END dorun

// BEGIN dorun$ifn
class dorun$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const dorun$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.dorun$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic coll$2, ){
dc.dynamic coll$1=coll$2;
do {
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
coll$1=lcoc_core.next(s$1, );
continue;
}
return null;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic n$2, dc.dynamic coll$4, ){
dc.dynamic n$1=n$2;
dc.dynamic coll$3=coll$4;
do {
final dc.dynamic o7310$2=coll$3;
late final dc.dynamic and$7187_$AUTO_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
and$7187_$AUTO_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
and$7187_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=(0<(n$1 as dc.num));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
n$1=((n$1 as dc.num)-1);
coll$3=lcoc_core.next(coll$3, );
continue;
}
return null;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dorun$ifn

// BEGIN doseq
lcoc_core.IFn$iface doseq=lcoc_core.doseq$ifn(null, );

// END doseq

// BEGIN doseq$ifn
class doseq$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const doseq$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.doseq$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic seq_exprs$1, dc.dynamic body_expr$1, ){
late final dc.dynamic Function(dc.dynamic, ) emit$1;
emit$1=(dc.dynamic seq_exprs$2, ){
final dc.dynamic vec$8731_$1=seq_exprs$2;
final dc.dynamic o7310$19=vec$8731_$1;
late final dc.dynamic seq$8732_$1;
if((o7310$19 is lcoc_core.ISeqable$iface)){
seq$8732_$1=((o7310$19 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8732_$1=((lcoc_core.ISeqable.extensions((o7310$19 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$19 as dc.dynamic), ));
}
final dc.dynamic first$8733_$1=lcoc_core.first(seq$8732_$1, );
final dc.dynamic seq$8732_$2=lcoc_core.next(seq$8732_$1, );
final dc.dynamic binding$2=first$8733_$1;
final dc.dynamic first$8733_$2=lcoc_core.first(seq$8732_$2, );
final dc.dynamic seq$8732_$3=lcoc_core.next(seq$8732_$2, );
final dc.dynamic expr$4=first$8733_$2;
final dc.dynamic seq_exprs$5=seq$8732_$3;
final dc.dynamic arg$10=(lcoc_core.symbol.$_invoke$2(null, "acc__", ));
late final dc.dynamic acc$2;
if((lcoc_core.gensym is dc.Function)){
acc$2=(lcoc_core.gensym as dc.Function)(arg$10, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
acc$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(arg$10, ));
}else{
acc$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, arg$10, ));
}
dc.dynamic wrap$3(dc.dynamic mods$3, dc.dynamic body$5, ){
final dc.dynamic o7310$26=mods$3;
late final dc.dynamic temp$7200_$AUTO_$4;
if((o7310$26 is lcoc_core.ISeqable$iface)){
temp$7200_$AUTO_$4=((o7310$26 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7200_$AUTO_$4=((lcoc_core.ISeqable.extensions((o7310$26 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$26 as dc.dynamic), ));
}
if((null==temp$7200_$AUTO_$4)){
return body$5;
}
final dc.dynamic vec$8737_$1=temp$7200_$AUTO_$4;
final dc.dynamic o7310$27=vec$8737_$1;
late final dc.dynamic seq$8738_$1;
if((o7310$27 is lcoc_core.ISeqable$iface)){
seq$8738_$1=((o7310$27 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8738_$1=((lcoc_core.ISeqable.extensions(o7310$27, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$27, ));
}
final dc.dynamic first$8739_$1=lcoc_core.first(seq$8738_$1, );
final dc.dynamic seq$8738_$2=lcoc_core.next(seq$8738_$1, );
final dc.dynamic mod$4=first$8739_$1;
final dc.dynamic first$8739_$2=lcoc_core.first(seq$8738_$2, );
final dc.dynamic seq$8738_$3=lcoc_core.next(seq$8738_$2, );
final dc.dynamic expr$6=first$8739_$2;
final dc.dynamic more_mods$4=seq$8738_$3;
final dc.dynamic body$7=wrap$3(more_mods$4, body$5, );
final dc.dynamic o7533$4=mod$4;
late final dc.int hash$4;
if((o7533$4 is lcoc_core.IHash$iface)){
hash$4=(((o7533$4 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$4=(((lcoc_core.IHash.extensions((o7533$4 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$4 as dc.dynamic), )) as dc.int);
}
switch(hash$4){
case 928173128:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "let", 928173128, ), mod$4, ))){
final dc.dynamic o7310$28=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(expr$6, )), (lcoc_core.list.$_invoke$1(body$7, )), ));
if((o7310$28 is lcoc_core.ISeqable$iface)){
return ((o7310$28 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$28 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$28 as dc.dynamic), ));
}
continue _default;
case 938507857:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "while", 938507857, ), mod$4, ))){
final dc.dynamic arg$16=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$15=(lcoc_core.list.$_invoke$1(expr$6, ));
final dc.dynamic arg$14=(lcoc_core.list.$_invoke$1(body$7, ));
final dc.dynamic o7310$29=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduced", )), )), (lcoc_core.list.$_invoke$1(acc$2, )), ));
late final dc.dynamic $if_$7;
if((o7310$29 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$29 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions((o7310$29 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$29 as dc.dynamic), ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7310$30=(lcoc_core.concat.$_invoke$4(arg$16, arg$15, arg$14, $9, ));
if((o7310$30 is lcoc_core.ISeqable$iface)){
return ((o7310$30 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$30 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$30 as dc.dynamic), ));
}
continue _default;
case 2890158092:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "when", 2890158092, ), mod$4, ))){
final dc.dynamic o7310$31=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), )), (lcoc_core.list.$_invoke$1(expr$6, )), (lcoc_core.list.$_invoke$1(body$7, )), ));
if((o7310$31 is lcoc_core.ISeqable$iface)){
return ((o7310$31 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$31 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$31 as dc.dynamic), ));
}
continue _default;
_default: default:
throw (dc.ArgumentError.value((mod$4 as dc.dynamic), null, "No matching clause.", ));
}
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) wrap$4=wrap$3;
final dc.dynamic coll7390$2=(lcoc_core.take_while.$_invoke$2(lcoc_core.keyword$QMARK_, (lcoc_core.take_nth.$_invoke$2(2, seq_exprs$5, )), ));
late final dc.int cast$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
final dc.int nmods$2=(2*cast$2);
final dc.dynamic mods$4=(lcoc_core.take.$_invoke$2(nmods$2, seq_exprs$5, ));
final dc.dynamic o7310$32=(lcoc_core.drop.$_invoke$2(nmods$2, seq_exprs$5, ));
late final dc.dynamic seq_exprs$6;
if((o7310$32 is lcoc_core.ISeqable$iface)){
seq_exprs$6=((o7310$32 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq_exprs$6=((lcoc_core.ISeqable.extensions((o7310$32 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$32 as dc.dynamic), ));
}
final dc.dynamic arg$18=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "reduce", )), ));
final dc.dynamic arg$17=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7310$33=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(acc$2, )), (lcoc_core.list.$_invoke$1(binding$2, )), ));
late final dc.dynamic $if_$8;
if((o7310$33 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$33 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions((o7310$33 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$33 as dc.dynamic), ));
}
final dc.dynamic $10=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$8, ));
final dc.dynamic $13=(lcoc_core.list.$_invoke$1($10, ));
late final dc.dynamic $if_$9;
if(((seq_exprs$6!=false)&&(seq_exprs$6!=null))){
$if_$9=emit$1(seq_exprs$6, );
}else{
final dc.dynamic o7310$34=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body_expr$1, (lcoc_core.list.$_invoke$1(null, )), ));
if((o7310$34 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$34 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions((o7310$34 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$34 as dc.dynamic), ));
}
}
final dc.dynamic $11=wrap$4(mods$4, $if_$9, );
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($11, ));
final dc.dynamic o7310$35=(lcoc_core.concat.$_invoke$3(arg$17, $13, $12, ));
late final dc.dynamic $if_$10;
if((o7310$35 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$35 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions((o7310$35 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$35 as dc.dynamic), ));
}
final dc.dynamic $14=(lcoc_core.list.$_invoke$1($if_$10, ));
final dc.dynamic o7310$36=(lcoc_core.concat.$_invoke$4(arg$18, $14, (lcoc_core.list.$_invoke$1(null, )), (lcoc_core.list.$_invoke$1(expr$4, )), ));
late final dc.dynamic body$8;
if((o7310$36 is lcoc_core.ISeqable$iface)){
body$8=((o7310$36 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$8=((lcoc_core.ISeqable.extensions((o7310$36 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$36 as dc.dynamic), ));
}
return body$8;
};
final dc.dynamic G$8740_$1=seq_exprs$1;
late final dc.dynamic G$8740_$2;
if((null==(G$8740_$1 as dc.dynamic))){
G$8740_$2=null;
}else{
final dc.dynamic o7310$37=G$8740_$1;
if((o7310$37 is lcoc_core.ISeqable$iface)){
G$8740_$2=((o7310$37 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
G$8740_$2=((lcoc_core.ISeqable.extensions((o7310$37 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$37 as dc.dynamic), ));
}
}
if((null==G$8740_$2)){
return null;
}
return emit$1(G$8740_$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END doseq$ifn

// BEGIN dotimes
lcoc_core.IFn$iface dotimes=lcoc_core.dotimes$ifn(null, );

// END dotimes

// BEGIN dotimes$ifn
class dotimes$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const dotimes$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.dotimes$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic i$1=lcoc_core.first(bindings$1, );
final dc.dynamic n$1=lcoc_core.second(bindings$1, );
final dc.dynamic arg$5=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.symbol.$_invoke$2(null, "n__8560__auto__", ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$1, ));
final dc.dynamic $2=lcoc_core.with_meta(arg$1, $1, );
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2($3, (lcoc_core.list.$_invoke$1(n$1, )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $12=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.vary_meta.$_invoke$4(i$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "tag", 2780644040, ), (lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $10=(lcoc_core.list.$_invoke$1($5, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1(i$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "n__8560__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1(i$1, )), ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$2(arg$2, $6, ));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7310$7=(lcoc_core.concat.$_invoke$4(arg$3, $8, body$1, $7, ));
late final dc.dynamic $if_$7;
if((o7310$7 is lcoc_core.ISeqable$iface)){
$if_$7=((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$7=((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}
final dc.dynamic $9=(lcoc_core.list.$_invoke$1($if_$7, ));
final dc.dynamic o7310$8=(lcoc_core.concat.$_invoke$3(arg$4, $10, $9, ));
late final dc.dynamic $if_$8;
if((o7310$8 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$8 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions((o7310$8 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$8 as dc.dynamic), ));
}
final dc.dynamic $11=(lcoc_core.list.$_invoke$1($if_$8, ));
final dc.dynamic o7310$9=(lcoc_core.concat.$_invoke$3(arg$5, $12, $11, ));
if((o7310$9 is lcoc_core.ISeqable$iface)){
return ((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END dotimes$ifn

// BEGIN doto
lcoc_core.IFn$iface doto=lcoc_core.doto$ifn(null, );

// END doto

// BEGIN doto$ifn
class doto$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const doto$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.doto$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic forms$1, ){
late final dc.dynamic gx$1;
if((lcoc_core.gensym is dc.Function)){
gx$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gx$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
gx$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(gx$1, )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$4(arg$1, $2, (lcoc_core.map.$_invoke$2((dc.dynamic f$1, ){
late final dc.dynamic $if_$3;
if(((lcoc_core.ISeq.satisfies((f$1 as dc.dynamic), )) as dc.bool)){
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(lcoc_core.first(f$1, ), )), (lcoc_core.list.$_invoke$1(gx$1, )), lcoc_core.next(f$1, ), ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
}else{
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(f$1, )), (lcoc_core.list.$_invoke$1(gx$1, )), ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
}
final dc.dynamic o7524$1=f$1;
late final dc.dynamic $if_$2;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$2=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
return lcoc_core.with_meta($if_$3, $if_$2, );
}, forms$1, )), (lcoc_core.list.$_invoke$1(gx$1, )), ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END doto$ifn

// BEGIN double
dc.double double(dc.dynamic x$1, ){
return ((x$1 as dc.num).toDouble());
}

// END double

// BEGIN double-array
lcoc_core.IFn$iface double_array=lcoc_core.double_array$ifn(null, );

// END double-array

// BEGIN double?
dc.bool double$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.double);
}

// END double?

// BEGIN double_array$ifn
class double_array$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const double_array$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.double_array$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if(lcoc_core.int$QMARK_(size_or_seq$1, )){
return (dc.List<dc.double>.filled((size_or_seq$1 as dc.int), 0.0, ));
}
return (dc.List<dc.double>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies((init_val_or_seq$1 as dc.dynamic), )) as dc.bool)){
final dc.List<dc.double> a$7797_$AUTO_$1=(dc.List<dc.double>.filled((size$1 as dc.int), 0.0, ));
dc.dynamic i$7798_$AUTO_$1=0;
final dc.dynamic o7310$1=init_val_or_seq$1;
dc.dynamic s$7799_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$7799_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$7799_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
final dc.dynamic and$7187_$AUTO_$1=s$7799_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=((i$7798_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$7774_$AUTO_$1=lcoc_core.first(s$7799_$AUTO_$1, );
a$7797_$AUTO_$1[(i$7798_$AUTO_$1 as dc.int)]=(v$7774_$AUTO_$1 as dc.double);
i$7798_$AUTO_$1=(1+(i$7798_$AUTO_$1 as dc.num));
s$7799_$AUTO_$1=lcoc_core.next(s$7799_$AUTO_$1, );
continue;
}
return a$7797_$AUTO_$1;
} while(true);
}else{
return (dc.List<dc.double>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.double), ));
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END double_array$ifn

// BEGIN doubles
dc.List<dc.double> doubles(dc.dynamic xs$1, ){
return ((xs$1 as dc.List).cast<dc.double>());
}

// END doubles

// BEGIN drop
lcoc_core.IFn$iface drop=lcoc_core.drop$ifn(null, );

// END drop

// BEGIN drop$ifn
class drop$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const drop$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.drop$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile nv$1=lcoc_core.volatile$BANG_(n$1, );
final dc.dynamic f$1=lcoc_core.Reify$30(null, rf$1, nv$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$3, dc.dynamic coll$1, ){
dc.dynamic step$1(dc.dynamic n$5, dc.dynamic coll$3, ){
dc.dynamic n$4=n$5;
dc.dynamic coll$2=coll$3;
do {
final dc.dynamic o7310$1=coll$2;
late final dc.dynamic s$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.bool and$7187_$AUTO_$1=(0<(n$4 as dc.num));
late final dc.dynamic $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=s$1;
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
n$4=((n$4 as dc.num)-1);
coll$2=lcoc_core.rest(s$1, );
continue;
}
return s$1;
} while(true);
}
return lcoc_core.LazySeq(null, ((){
return step$1(n$3, coll$1, );
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END drop$ifn

// BEGIN drop-last
lcoc_core.IFn$iface drop_last=lcoc_core.drop_last$ifn(null, );

// END drop-last

// BEGIN drop-while
lcoc_core.IFn$iface drop_while=lcoc_core.drop_while$ifn(null, );

// END drop-while

// BEGIN drop_last$ifn
class drop_last$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const drop_last$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.drop_last$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.drop_last.$_invoke$2(1, coll$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic coll$2, ){
return (lcoc_core.map.$_invoke$3((dc.dynamic x$1, dc.dynamic $UNDERSCORE_$1, ){
return x$1;
}, coll$2, (lcoc_core.drop.$_invoke$2(n$1, coll$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END drop_last$ifn

// BEGIN drop_while$ifn
class drop_while$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const drop_while$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.drop_while$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile dv$1=lcoc_core.volatile$BANG_(true, );
final dc.dynamic f$1=lcoc_core.Reify$31(null, rf$1, dv$1, pred$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
dc.dynamic step$1(dc.dynamic pred$4, dc.dynamic coll$3, ){
dc.dynamic pred$3=pred$4;
dc.dynamic coll$2=coll$3;
do {
final dc.dynamic o7310$1=coll$2;
late final dc.dynamic s$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic and$7187_$AUTO_$2=s$1;
late final dc.dynamic $if_$2;
if(((and$7187_$AUTO_$2!=false)&&(and$7187_$AUTO_$2!=null))){
final dc.dynamic arg$1=lcoc_core.first(s$1, );
if((pred$3 is dc.Function)){
$if_$2=(pred$3 as dc.Function)(arg$1, );
}else if((pred$3 is lcoc_core.IFn$iface)){
$if_$2=((pred$3 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$3, ).$_invoke$1(pred$3, arg$1, ));
}
}else{
$if_$2=and$7187_$AUTO_$2;
}
if((($if_$2!=false)&&($if_$2!=null))){
coll$2=lcoc_core.rest(s$1, );
continue;
}
return s$1;
} while(true);
}
return lcoc_core.LazySeq(null, ((){
return step$1(pred$2, coll$1, );
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END drop_while$ifn

// BEGIN eduction
lcoc_core.IFn$iface eduction=lcoc_core.eduction$ifn(null, );

// END eduction

// BEGIN eduction$ifn
class eduction$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const eduction$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.eduction$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic xforms$1, ){
return lcoc_core.Eduction(((lcoc_core.apply.$_invoke$2(lcoc_core.comp, lcoc_core.butlast(xforms$1, ), )) as dc.dynamic), (lcoc_core.last(xforms$1, ) as dc.dynamic), -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END eduction$ifn

// BEGIN empty
dc.dynamic empty(dc.dynamic coll$1, ){
final dc.dynamic coll7646$1=coll$1;
if((coll7646$1 is lcoc_core.IEmptyableCollection$iface)){
return ((coll7646$1 as lcoc_core.IEmptyableCollection$iface).$_empty$0());
}
return ((lcoc_core.IEmptyableCollection.extensions((coll7646$1 as dc.dynamic), ) as lcoc_core.IEmptyableCollection$ext).$_empty$0((coll7646$1 as dc.dynamic), ));
}

// END empty

// BEGIN empty?
dc.bool empty$QMARK_(dc.dynamic coll$1, ){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return false;
}
return true;
}

// END empty?

// BEGIN ensure-hash
dc.dynamic ensure_hash(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic hash_key$1, dc.dynamic hash_expr$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8497__auto__", )), )), (lcoc_core.list.$_invoke$1(hash_key$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $8=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8497__auto__", )), )), (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8497__auto__", )), )), (lcoc_core.list.$_invoke$1(hash_expr$1, )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "set!", )), )), (lcoc_core.list.$_invoke$1(hash_key$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8497__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$4(arg$1, $4, $3, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8497__auto__", )), )), ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$4(arg$2, $6, $5, (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "h__8497__auto__", )), )), ));
late final dc.dynamic $if_$6;
if((o7310$6 is lcoc_core.ISeqable$iface)){
$if_$6=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$6=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7310$7=(lcoc_core.concat.$_invoke$3(arg$3, $8, $7, ));
if((o7310$7 is lcoc_core.ISeqable$iface)){
return ((o7310$7 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$7 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$7 as dc.dynamic), ));
}

// END ensure-hash

// BEGIN ensure-reduced
dc.dynamic ensure_reduced(dc.dynamic x$1, ){
if(lcoc_core.reduced$QMARK_(x$1, )){
return x$1;
}
return lcoc_core.reduced(x$1, );
}

// END ensure-reduced

// BEGIN ep1$18
class ep1$18 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final p$1;

const ep1$18(this.meta$2, this.p$1, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.ep1$18((m$2101_$AUTO_$2 as dc.dynamic), (p$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$2, ){
final dc.dynamic and$7187_$AUTO_$5=(this.$_invoke$3(x$5, y$4, z$3, ));
late final dc.dynamic $if_$2;
if(((and$7187_$AUTO_$5!=false)&&(and$7187_$AUTO_$5!=null))){
$if_$2=lcoc_core.every$QMARK_(p$1, args$2, );
}else{
$if_$2=and$7187_$AUTO_$5;
}
return lcoc_core.boolean($if_$2, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
late final dc.dynamic $if_$3;
if((p$1 is dc.Function)){
$if_$3=(p$1 as dc.Function)(x$6, );
}else if((p$1 is lcoc_core.IFn$iface)){
$if_$3=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$6, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$6, ));
}
return lcoc_core.boolean($if_$3, );
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
late final dc.dynamic and$7187_$AUTO_$6;
if((p$1 is dc.Function)){
and$7187_$AUTO_$6=(p$1 as dc.Function)(x$7, );
}else if((p$1 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$6=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$7, ));
}else{
and$7187_$AUTO_$6=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$7, ));
}
late final dc.dynamic $if_$4;
if(((and$7187_$AUTO_$6!=false)&&(and$7187_$AUTO_$6!=null))){
if((p$1 is dc.Function)){
$if_$4=(p$1 as dc.Function)(y$5, );
}else if((p$1 is lcoc_core.IFn$iface)){
$if_$4=((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$5, ));
}else{
$if_$4=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$5, ));
}
}else{
$if_$4=and$7187_$AUTO_$6;
}
return lcoc_core.boolean($if_$4, );
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
late final dc.dynamic and$7187_$AUTO_$7;
if((p$1 is dc.Function)){
and$7187_$AUTO_$7=(p$1 as dc.Function)(x$8, );
}else if((p$1 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$7=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$8, ));
}else{
and$7187_$AUTO_$7=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$8, ));
}
late final dc.dynamic $if_$5;
if(((and$7187_$AUTO_$7!=false)&&(and$7187_$AUTO_$7!=null))){
late final dc.dynamic and$7187_$AUTO_$8;
if((p$1 is dc.Function)){
and$7187_$AUTO_$8=(p$1 as dc.Function)(y$6, );
}else if((p$1 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$8=((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$6, ));
}else{
and$7187_$AUTO_$8=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$6, ));
}
if(((and$7187_$AUTO_$8!=false)&&(and$7187_$AUTO_$8!=null))){
if((p$1 is dc.Function)){
$if_$5=(p$1 as dc.Function)(z$4, );
}else if((p$1 is lcoc_core.IFn$iface)){
$if_$5=((p$1 as lcoc_core.IFn$iface).$_invoke$1(z$4, ));
}else{
$if_$5=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, z$4, ));
}
}else{
$if_$5=and$7187_$AUTO_$8;
}
}else{
$if_$5=and$7187_$AUTO_$7;
}
return lcoc_core.boolean($if_$5, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ep1$18

// BEGIN ep2$19
class ep2$19 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final p2$2;
final p1$2;

const ep2$19(this.meta$3, this.p2$2, this.p1$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$3, ){
return lcoc_core.ep2$19((m$2101_$AUTO_$3 as dc.dynamic), (p2$2 as dc.dynamic), (p1$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$3, ){
final dc.dynamic and$7187_$AUTO_$9=(this.$_invoke$3(x$9, y$7, z$5, ));
late final dc.dynamic $if_$6;
if(((and$7187_$AUTO_$9!=false)&&(and$7187_$AUTO_$9!=null))){
$if_$6=lcoc_core.every$QMARK_((dc.dynamic p1$8562_$SHARP_$1, ){
late final dc.dynamic and$7187_$AUTO_$10;
if((p1$2 is dc.Function)){
and$7187_$AUTO_$10=(p1$2 as dc.Function)(p1$8562_$SHARP_$1, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$10=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(p1$8562_$SHARP_$1, ));
}else{
and$7187_$AUTO_$10=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, p1$8562_$SHARP_$1, ));
}
if(((and$7187_$AUTO_$10!=false)&&(and$7187_$AUTO_$10!=null))){
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(p1$8562_$SHARP_$1, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(p1$8562_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, p1$8562_$SHARP_$1, ));
}
return and$7187_$AUTO_$10;
}, args$3, );
}else{
$if_$6=and$7187_$AUTO_$9;
}
return lcoc_core.boolean($if_$6, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
late final dc.dynamic and$7187_$AUTO_$11;
if((p1$2 is dc.Function)){
and$7187_$AUTO_$11=(p1$2 as dc.Function)(x$10, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$11=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
and$7187_$AUTO_$11=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$10, ));
}
late final dc.dynamic $if_$7;
if(((and$7187_$AUTO_$11!=false)&&(and$7187_$AUTO_$11!=null))){
if((p2$2 is dc.Function)){
$if_$7=(p2$2 as dc.Function)(x$10, );
}else if((p2$2 is lcoc_core.IFn$iface)){
$if_$7=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
$if_$7=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$10, ));
}
}else{
$if_$7=and$7187_$AUTO_$11;
}
return lcoc_core.boolean($if_$7, );
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
late final dc.dynamic and$7187_$AUTO_$12;
if((p1$2 is dc.Function)){
and$7187_$AUTO_$12=(p1$2 as dc.Function)(x$11, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$12=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
and$7187_$AUTO_$12=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$11, ));
}
late final dc.dynamic $if_$8;
if(((and$7187_$AUTO_$12!=false)&&(and$7187_$AUTO_$12!=null))){
late final dc.dynamic and$7187_$AUTO_$13;
if((p1$2 is dc.Function)){
and$7187_$AUTO_$13=(p1$2 as dc.Function)(y$8, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$13=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}else{
and$7187_$AUTO_$13=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$8, ));
}
if(((and$7187_$AUTO_$13!=false)&&(and$7187_$AUTO_$13!=null))){
late final dc.dynamic and$7187_$AUTO_$14;
if((p2$2 is dc.Function)){
and$7187_$AUTO_$14=(p2$2 as dc.Function)(x$11, );
}else if((p2$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$14=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
and$7187_$AUTO_$14=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$11, ));
}
if(((and$7187_$AUTO_$14!=false)&&(and$7187_$AUTO_$14!=null))){
if((p2$2 is dc.Function)){
$if_$8=(p2$2 as dc.Function)(y$8, );
}else if((p2$2 is lcoc_core.IFn$iface)){
$if_$8=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}else{
$if_$8=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$8, ));
}
}else{
$if_$8=and$7187_$AUTO_$14;
}
}else{
$if_$8=and$7187_$AUTO_$13;
}
}else{
$if_$8=and$7187_$AUTO_$12;
}
return lcoc_core.boolean($if_$8, );
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
late final dc.dynamic and$7187_$AUTO_$15;
if((p1$2 is dc.Function)){
and$7187_$AUTO_$15=(p1$2 as dc.Function)(x$12, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$15=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
and$7187_$AUTO_$15=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$12, ));
}
late final dc.dynamic $if_$9;
if(((and$7187_$AUTO_$15!=false)&&(and$7187_$AUTO_$15!=null))){
late final dc.dynamic and$7187_$AUTO_$16;
if((p1$2 is dc.Function)){
and$7187_$AUTO_$16=(p1$2 as dc.Function)(y$9, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$16=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
and$7187_$AUTO_$16=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$9, ));
}
if(((and$7187_$AUTO_$16!=false)&&(and$7187_$AUTO_$16!=null))){
late final dc.dynamic and$7187_$AUTO_$17;
if((p1$2 is dc.Function)){
and$7187_$AUTO_$17=(p1$2 as dc.Function)(z$6, );
}else if((p1$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$17=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}else{
and$7187_$AUTO_$17=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, z$6, ));
}
if(((and$7187_$AUTO_$17!=false)&&(and$7187_$AUTO_$17!=null))){
late final dc.dynamic and$7187_$AUTO_$18;
if((p2$2 is dc.Function)){
and$7187_$AUTO_$18=(p2$2 as dc.Function)(x$12, );
}else if((p2$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$18=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
and$7187_$AUTO_$18=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$12, ));
}
if(((and$7187_$AUTO_$18!=false)&&(and$7187_$AUTO_$18!=null))){
late final dc.dynamic and$7187_$AUTO_$19;
if((p2$2 is dc.Function)){
and$7187_$AUTO_$19=(p2$2 as dc.Function)(y$9, );
}else if((p2$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$19=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
and$7187_$AUTO_$19=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$9, ));
}
if(((and$7187_$AUTO_$19!=false)&&(and$7187_$AUTO_$19!=null))){
if((p2$2 is dc.Function)){
$if_$9=(p2$2 as dc.Function)(z$6, );
}else if((p2$2 is lcoc_core.IFn$iface)){
$if_$9=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}else{
$if_$9=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, z$6, ));
}
}else{
$if_$9=and$7187_$AUTO_$19;
}
}else{
$if_$9=and$7187_$AUTO_$18;
}
}else{
$if_$9=and$7187_$AUTO_$17;
}
}else{
$if_$9=and$7187_$AUTO_$16;
}
}else{
$if_$9=and$7187_$AUTO_$15;
}
return lcoc_core.boolean($if_$9, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ep2$19

// BEGIN ep3$20
class ep3$20 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final p3$2;
final p1$3;
final p2$3;

const ep3$20(this.meta$4, this.p3$2, this.p1$3, this.p2$3, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$4, ){
return lcoc_core.ep3$20((m$2101_$AUTO_$4 as dc.dynamic), (p3$2 as dc.dynamic), (p1$3 as dc.dynamic), (p2$3 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$13, dc.dynamic y$10, dc.dynamic z$7, dc.dynamic args$4, ){
final dc.dynamic and$7187_$AUTO_$20=(this.$_invoke$3(x$13, y$10, z$7, ));
late final dc.dynamic $if_$10;
if(((and$7187_$AUTO_$20!=false)&&(and$7187_$AUTO_$20!=null))){
$if_$10=lcoc_core.every$QMARK_((dc.dynamic p1$8563_$SHARP_$1, ){
late final dc.dynamic and$7187_$AUTO_$21;
if((p1$3 is dc.Function)){
and$7187_$AUTO_$21=(p1$3 as dc.Function)(p1$8563_$SHARP_$1, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$21=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(p1$8563_$SHARP_$1, ));
}else{
and$7187_$AUTO_$21=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, p1$8563_$SHARP_$1, ));
}
if(((and$7187_$AUTO_$21!=false)&&(and$7187_$AUTO_$21!=null))){
late final dc.dynamic and$7187_$AUTO_$22;
if((p2$3 is dc.Function)){
and$7187_$AUTO_$22=(p2$3 as dc.Function)(p1$8563_$SHARP_$1, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$22=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(p1$8563_$SHARP_$1, ));
}else{
and$7187_$AUTO_$22=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, p1$8563_$SHARP_$1, ));
}
if(((and$7187_$AUTO_$22!=false)&&(and$7187_$AUTO_$22!=null))){
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(p1$8563_$SHARP_$1, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(p1$8563_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, p1$8563_$SHARP_$1, ));
}
return and$7187_$AUTO_$22;
}
return and$7187_$AUTO_$21;
}, args$4, );
}else{
$if_$10=and$7187_$AUTO_$20;
}
return lcoc_core.boolean($if_$10, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$14, ){
late final dc.dynamic and$7187_$AUTO_$23;
if((p1$3 is dc.Function)){
and$7187_$AUTO_$23=(p1$3 as dc.Function)(x$14, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$23=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
and$7187_$AUTO_$23=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$14, ));
}
late final dc.dynamic $if_$11;
if(((and$7187_$AUTO_$23!=false)&&(and$7187_$AUTO_$23!=null))){
late final dc.dynamic and$7187_$AUTO_$24;
if((p2$3 is dc.Function)){
and$7187_$AUTO_$24=(p2$3 as dc.Function)(x$14, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$24=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
and$7187_$AUTO_$24=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$14, ));
}
if(((and$7187_$AUTO_$24!=false)&&(and$7187_$AUTO_$24!=null))){
if((p3$2 is dc.Function)){
$if_$11=(p3$2 as dc.Function)(x$14, );
}else if((p3$2 is lcoc_core.IFn$iface)){
$if_$11=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
$if_$11=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$14, ));
}
}else{
$if_$11=and$7187_$AUTO_$24;
}
}else{
$if_$11=and$7187_$AUTO_$23;
}
return lcoc_core.boolean($if_$11, );
}

dc.dynamic $_invoke$2(dc.dynamic x$15, dc.dynamic y$11, ){
late final dc.dynamic and$7187_$AUTO_$25;
if((p1$3 is dc.Function)){
and$7187_$AUTO_$25=(p1$3 as dc.Function)(x$15, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$25=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
and$7187_$AUTO_$25=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$15, ));
}
late final dc.dynamic $if_$12;
if(((and$7187_$AUTO_$25!=false)&&(and$7187_$AUTO_$25!=null))){
late final dc.dynamic and$7187_$AUTO_$26;
if((p2$3 is dc.Function)){
and$7187_$AUTO_$26=(p2$3 as dc.Function)(x$15, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$26=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
and$7187_$AUTO_$26=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$15, ));
}
if(((and$7187_$AUTO_$26!=false)&&(and$7187_$AUTO_$26!=null))){
late final dc.dynamic and$7187_$AUTO_$27;
if((p3$2 is dc.Function)){
and$7187_$AUTO_$27=(p3$2 as dc.Function)(x$15, );
}else if((p3$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$27=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
and$7187_$AUTO_$27=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$15, ));
}
if(((and$7187_$AUTO_$27!=false)&&(and$7187_$AUTO_$27!=null))){
late final dc.dynamic and$7187_$AUTO_$28;
if((p1$3 is dc.Function)){
and$7187_$AUTO_$28=(p1$3 as dc.Function)(y$11, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$28=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
and$7187_$AUTO_$28=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$11, ));
}
if(((and$7187_$AUTO_$28!=false)&&(and$7187_$AUTO_$28!=null))){
late final dc.dynamic and$7187_$AUTO_$29;
if((p2$3 is dc.Function)){
and$7187_$AUTO_$29=(p2$3 as dc.Function)(y$11, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$29=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
and$7187_$AUTO_$29=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$11, ));
}
if(((and$7187_$AUTO_$29!=false)&&(and$7187_$AUTO_$29!=null))){
if((p3$2 is dc.Function)){
$if_$12=(p3$2 as dc.Function)(y$11, );
}else if((p3$2 is lcoc_core.IFn$iface)){
$if_$12=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
$if_$12=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$11, ));
}
}else{
$if_$12=and$7187_$AUTO_$29;
}
}else{
$if_$12=and$7187_$AUTO_$28;
}
}else{
$if_$12=and$7187_$AUTO_$27;
}
}else{
$if_$12=and$7187_$AUTO_$26;
}
}else{
$if_$12=and$7187_$AUTO_$25;
}
return lcoc_core.boolean($if_$12, );
}

dc.dynamic $_invoke$3(dc.dynamic x$16, dc.dynamic y$12, dc.dynamic z$8, ){
late final dc.dynamic and$7187_$AUTO_$30;
if((p1$3 is dc.Function)){
and$7187_$AUTO_$30=(p1$3 as dc.Function)(x$16, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$30=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
and$7187_$AUTO_$30=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$16, ));
}
late final dc.dynamic $if_$13;
if(((and$7187_$AUTO_$30!=false)&&(and$7187_$AUTO_$30!=null))){
late final dc.dynamic and$7187_$AUTO_$31;
if((p2$3 is dc.Function)){
and$7187_$AUTO_$31=(p2$3 as dc.Function)(x$16, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$31=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
and$7187_$AUTO_$31=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$16, ));
}
if(((and$7187_$AUTO_$31!=false)&&(and$7187_$AUTO_$31!=null))){
late final dc.dynamic and$7187_$AUTO_$32;
if((p3$2 is dc.Function)){
and$7187_$AUTO_$32=(p3$2 as dc.Function)(x$16, );
}else if((p3$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$32=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
and$7187_$AUTO_$32=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$16, ));
}
if(((and$7187_$AUTO_$32!=false)&&(and$7187_$AUTO_$32!=null))){
late final dc.dynamic and$7187_$AUTO_$33;
if((p1$3 is dc.Function)){
and$7187_$AUTO_$33=(p1$3 as dc.Function)(y$12, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$33=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
and$7187_$AUTO_$33=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$12, ));
}
if(((and$7187_$AUTO_$33!=false)&&(and$7187_$AUTO_$33!=null))){
late final dc.dynamic and$7187_$AUTO_$34;
if((p2$3 is dc.Function)){
and$7187_$AUTO_$34=(p2$3 as dc.Function)(y$12, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$34=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
and$7187_$AUTO_$34=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$12, ));
}
if(((and$7187_$AUTO_$34!=false)&&(and$7187_$AUTO_$34!=null))){
late final dc.dynamic and$7187_$AUTO_$35;
if((p3$2 is dc.Function)){
and$7187_$AUTO_$35=(p3$2 as dc.Function)(y$12, );
}else if((p3$2 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$35=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
and$7187_$AUTO_$35=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$12, ));
}
if(((and$7187_$AUTO_$35!=false)&&(and$7187_$AUTO_$35!=null))){
late final dc.dynamic and$7187_$AUTO_$36;
if((p1$3 is dc.Function)){
and$7187_$AUTO_$36=(p1$3 as dc.Function)(z$8, );
}else if((p1$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$36=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
and$7187_$AUTO_$36=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, z$8, ));
}
if(((and$7187_$AUTO_$36!=false)&&(and$7187_$AUTO_$36!=null))){
late final dc.dynamic and$7187_$AUTO_$37;
if((p2$3 is dc.Function)){
and$7187_$AUTO_$37=(p2$3 as dc.Function)(z$8, );
}else if((p2$3 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$37=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
and$7187_$AUTO_$37=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, z$8, ));
}
if(((and$7187_$AUTO_$37!=false)&&(and$7187_$AUTO_$37!=null))){
if((p3$2 is dc.Function)){
$if_$13=(p3$2 as dc.Function)(z$8, );
}else if((p3$2 is lcoc_core.IFn$iface)){
$if_$13=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
$if_$13=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, z$8, ));
}
}else{
$if_$13=and$7187_$AUTO_$37;
}
}else{
$if_$13=and$7187_$AUTO_$36;
}
}else{
$if_$13=and$7187_$AUTO_$35;
}
}else{
$if_$13=and$7187_$AUTO_$34;
}
}else{
$if_$13=and$7187_$AUTO_$33;
}
}else{
$if_$13=and$7187_$AUTO_$32;
}
}else{
$if_$13=and$7187_$AUTO_$31;
}
}else{
$if_$13=and$7187_$AUTO_$30;
}
return lcoc_core.boolean($if_$13, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ep3$20

// BEGIN epn$17
class epn$17 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final ps$2;

const epn$17(this.meta$1, this.ps$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.epn$17((m$2101_$AUTO_$1 as dc.dynamic), (ps$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic and$7187_$AUTO_$1=(this.$_invoke$3(x$1, y$1, z$1, ));
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=lcoc_core.every$QMARK_((dc.dynamic p1$8567_$SHARP_$1, ){
return lcoc_core.every$QMARK_(p1$8567_$SHARP_$1, args$1, );
}, ps$2, );
}else{
$if_$1=and$7187_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

dc.dynamic $_invoke$0(){
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.every$QMARK_((dc.dynamic p1$8564_$SHARP_$1, ){
if((p1$8564_$SHARP_$1 is dc.Function)){
return (p1$8564_$SHARP_$1 as dc.Function)(x$2, );
}
if((p1$8564_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$8564_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}
return (lcoc_core.IFn.extensions(p1$8564_$SHARP_$1, ).$_invoke$1(p1$8564_$SHARP_$1, x$2, ));
}, ps$2, );
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
return lcoc_core.every$QMARK_((dc.dynamic p1$8565_$SHARP_$1, ){
late final dc.dynamic and$7187_$AUTO_$2;
if((p1$8565_$SHARP_$1 is dc.Function)){
and$7187_$AUTO_$2=(p1$8565_$SHARP_$1 as dc.Function)(x$3, );
}else if((p1$8565_$SHARP_$1 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$2=((p1$8565_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$3, ));
}else{
and$7187_$AUTO_$2=(lcoc_core.IFn.extensions(p1$8565_$SHARP_$1, ).$_invoke$1(p1$8565_$SHARP_$1, x$3, ));
}
if(((and$7187_$AUTO_$2!=false)&&(and$7187_$AUTO_$2!=null))){
if((p1$8565_$SHARP_$1 is dc.Function)){
return (p1$8565_$SHARP_$1 as dc.Function)(y$2, );
}
if((p1$8565_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$8565_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$2, ));
}
return (lcoc_core.IFn.extensions(p1$8565_$SHARP_$1, ).$_invoke$1(p1$8565_$SHARP_$1, y$2, ));
}
return and$7187_$AUTO_$2;
}, ps$2, );
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
return lcoc_core.every$QMARK_((dc.dynamic p1$8566_$SHARP_$1, ){
late final dc.dynamic and$7187_$AUTO_$3;
if((p1$8566_$SHARP_$1 is dc.Function)){
and$7187_$AUTO_$3=(p1$8566_$SHARP_$1 as dc.Function)(x$4, );
}else if((p1$8566_$SHARP_$1 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$3=((p1$8566_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$4, ));
}else{
and$7187_$AUTO_$3=(lcoc_core.IFn.extensions(p1$8566_$SHARP_$1, ).$_invoke$1(p1$8566_$SHARP_$1, x$4, ));
}
if(((and$7187_$AUTO_$3!=false)&&(and$7187_$AUTO_$3!=null))){
late final dc.dynamic and$7187_$AUTO_$4;
if((p1$8566_$SHARP_$1 is dc.Function)){
and$7187_$AUTO_$4=(p1$8566_$SHARP_$1 as dc.Function)(y$3, );
}else if((p1$8566_$SHARP_$1 is lcoc_core.IFn$iface)){
and$7187_$AUTO_$4=((p1$8566_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$3, ));
}else{
and$7187_$AUTO_$4=(lcoc_core.IFn.extensions(p1$8566_$SHARP_$1, ).$_invoke$1(p1$8566_$SHARP_$1, y$3, ));
}
if(((and$7187_$AUTO_$4!=false)&&(and$7187_$AUTO_$4!=null))){
if((p1$8566_$SHARP_$1 is dc.Function)){
return (p1$8566_$SHARP_$1 as dc.Function)(z$2, );
}
if((p1$8566_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$8566_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(z$2, ));
}
return (lcoc_core.IFn.extensions(p1$8566_$SHARP_$1, ).$_invoke$1(p1$8566_$SHARP_$1, z$2, ));
}
return and$7187_$AUTO_$4;
}
return and$7187_$AUTO_$3;
}, ps$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END epn$17

// BEGIN even?
dc.bool even$QMARK_(dc.dynamic num$1, ){
return (num$1 as dc.int).isEven;
}

// END even?

// BEGIN every-pred
lcoc_core.IFn$iface every_pred=lcoc_core.every_pred$ifn(null, );

// END every-pred

// BEGIN every?
dc.bool every$QMARK_(dc.dynamic pred$2, dc.dynamic coll$2, ){
dc.dynamic pred$1=pred$2;
dc.dynamic coll$1=coll$2;
do {
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.bool $1=(null==$if_$1);
if($1){
return true;
}
final dc.dynamic arg$1=lcoc_core.first(coll$1, );
late final dc.dynamic $if_$2;
if((pred$1 is dc.Function)){
$if_$2=(pred$1 as dc.Function)(arg$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$2=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, arg$1, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
coll$1=lcoc_core.next(coll$1, );
continue;
}
return false;
} while(true);
}

// END every?

// BEGIN every_pred$ifn
class every_pred$ifn extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

const every_pred$ifn(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$5, ){
return lcoc_core.every_pred$ifn((m$2101_$AUTO_$5 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic p1$1, dc.dynamic p2$1, dc.dynamic p3$1, dc.dynamic ps$1, ){
final dc.dynamic ps$2=(lcoc_core.list$STAR_.$_invoke$4(p1$1, p2$1, p3$1, ps$1, ));
final dc.dynamic epn$1=lcoc_core.epn$17(null, ps$2, );
return epn$1;
}

dc.dynamic $_invoke$1(dc.dynamic p$1, ){
final dc.dynamic ep1$1=lcoc_core.ep1$18(null, p$1, );
return ep1$1;
}

dc.dynamic $_invoke$2(dc.dynamic p1$2, dc.dynamic p2$2, ){
final dc.dynamic ep2$1=lcoc_core.ep2$19(null, p2$2, p1$2, );
return ep2$1;
}

dc.dynamic $_invoke$3(dc.dynamic p1$3, dc.dynamic p2$3, dc.dynamic p3$2, ){
final dc.dynamic ep3$1=lcoc_core.ep3$20(null, p3$2, p1$3, p2$3, );
return ep3$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END every_pred$ifn

// BEGIN ex-data
dc.dynamic ex_data(dc.dynamic ex$1, ){
final dc.dynamic e7661$1=ex$1;
if((e7661$1 is lcoc_core.IExceptionInfo$iface)){
return ((e7661$1 as lcoc_core.IExceptionInfo$iface).$_ex_data$0());
}
return ((lcoc_core.IExceptionInfo.extensions((e7661$1 as dc.dynamic), ) as lcoc_core.IExceptionInfo$ext).$_ex_data$0((e7661$1 as dc.dynamic), ));
}

// END ex-data

// BEGIN ex-info
lcoc_core.IFn$iface ex_info=lcoc_core.ex_info$ifn(null, );

// END ex-info

// BEGIN ex_info$ifn
class ex_info$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const ex_info$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.ex_info$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic msg$1, dc.dynamic map$1, ){
return lcoc_core.ExceptionInfo((msg$1 as dc.dynamic), (map$1 as dc.dynamic), null, );
}

dc.dynamic $_invoke$3(dc.dynamic msg$2, dc.dynamic map$2, dc.dynamic cause$1, ){
return lcoc_core.ExceptionInfo((msg$2 as dc.dynamic), (map$2 as dc.dynamic), (cause$1 as dc.dynamic), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END ex_info$ifn

// BEGIN extend-protocol
lcoc_core.IFn$iface extend_protocol=lcoc_core.extend_protocol$ifn(null, );

// END extend-protocol

// BEGIN extend_protocol$ifn
class extend_protocol$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const extend_protocol$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.extend_protocol$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic protocol$1, dc.dynamic types$PLUS_impls$1, ){
final dc.dynamic o7310$1=types$PLUS_impls$1;
late final dc.dynamic temp$7205_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7205_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7205_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.dynamic vec$8835_$1=temp$7205_$AUTO_$1;
final dc.dynamic o7310$2=vec$8835_$1;
late final dc.dynamic seq$8836_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
seq$8836_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8836_$1=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
final dc.dynamic first$8837_$1=lcoc_core.first(seq$8836_$1, );
final dc.dynamic seq$8836_$2=lcoc_core.next(seq$8836_$1, );
final dc.dynamic type$1=first$8837_$1;
final dc.dynamic more$1=seq$8836_$2;
final dc.dynamic vec$8838_$1=lcoc_core.split_with(lcoc_core.seq$QMARK_, more$1, );
final dc.dynamic impls$1=(lcoc_core.nth.$_invoke$3(vec$8838_$1, 0, null, ));
final dc.dynamic types$PLUS_impls$2=(lcoc_core.nth.$_invoke$3(vec$8838_$1, 1, null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "extend-type", )), )), (lcoc_core.list.$_invoke$1(type$1, )), (lcoc_core.list.$_invoke$1(protocol$1, )), impls$1, ));
late final dc.dynamic $if_$1;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "extend-protocol", )), )), (lcoc_core.list.$_invoke$1(protocol$1, )), types$PLUS_impls$2, ));
late final dc.dynamic $if_$2;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$1, $2, $1, ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END extend_protocol$ifn

// BEGIN false?
dc.bool false$QMARK_(dc.dynamic x$1, ){
return dc.identical((x$1 as dc.Object?), false, );
}

// END false?

// BEGIN ffirst
dc.dynamic ffirst(dc.dynamic coll$1, ){
return lcoc_core.first(lcoc_core.first(coll$1, ), );
}

// END ffirst

// BEGIN filter
lcoc_core.IFn$iface filter=lcoc_core.filter$ifn(null, );

// END filter

// BEGIN filter$ifn
class filter$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const filter$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.filter$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (dc.dynamic rf$1, ){
final dc.dynamic f$1=lcoc_core.Reify$42(null, rf$1, pred$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7390$1=c$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final lcoc_core.ChunkBuffer $1=lcoc_core.chunk_buffer(cast$1, );
final dc.dynamic $2=lcoc_core.chunk_reduce((dc.dynamic p1$8642_$SHARP_$1, dc.dynamic p2$8641_$SHARP_$1, ){
late final dc.dynamic temp$7210_$AUTO_$1;
if((pred$2 is dc.Function)){
temp$7210_$AUTO_$1=(pred$2 as dc.Function)(p2$8641_$SHARP_$1, );
}else if((pred$2 is lcoc_core.IFn$iface)){
temp$7210_$AUTO_$1=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(p2$8641_$SHARP_$1, ));
}else{
temp$7210_$AUTO_$1=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, p2$8641_$SHARP_$1, ));
}
if(((temp$7210_$AUTO_$1!=false)&&(temp$7210_$AUTO_$1!=null))){
final dc.dynamic x$1=temp$7210_$AUTO_$1;
final dc.dynamic G$8645_$1=p1$8642_$SHARP_$1;
lcoc_core.chunk_append(G$8645_$1, p2$8641_$SHARP_$1, );
return G$8645_$1;
}
return p1$8642_$SHARP_$1;
}, $1, c$1, );
final dc.dynamic $3=lcoc_core.chunk($2, );
return lcoc_core.chunk_cons($3, (lcoc_core.filter.$_invoke$2(pred$2, lcoc_core.chunk_rest(s$1, ), )), );
}
final dc.dynamic f$2=lcoc_core.first(s$1, );
final dc.dynamic r$1=lcoc_core.rest(s$1, );
late final dc.dynamic $if_$2;
if((pred$2 is dc.Function)){
$if_$2=(pred$2 as dc.Function)(f$2, );
}else if((pred$2 is lcoc_core.IFn$iface)){
$if_$2=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(f$2, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, f$2, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
return lcoc_core.cons(f$2, (lcoc_core.filter.$_invoke$2(pred$2, r$1, )), );
}
return (lcoc_core.filter.$_invoke$2(pred$2, r$1, ));
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END filter$ifn

// BEGIN filterv
dc.dynamic filterv(dc.dynamic pred$1, dc.dynamic coll$1, ){
final dc.dynamic coll7370$1=coll$1;
dc.dynamic f7371$1(dc.dynamic v$1, dc.dynamic o$1, ){
late final dc.dynamic $if_$1;
if((pred$1 is dc.Function)){
$if_$1=(pred$1 as dc.Function)(o$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
$if_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(o$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, o$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return (lcoc_core.conj$BANG_.$_invoke$2(v$1, o$1, ));
}
return v$1;
}
final dc.dynamic start7372$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
late final dc.dynamic $if_$2;
if((coll7370$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}else{
$if_$2=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
return lcoc_core.persistent$BANG_($if_$2, );
}

// END filterv

// BEGIN find
dc.dynamic find(dc.dynamic map$1, dc.dynamic key$1, ){
final dc.dynamic coll7547$1=map$1;
final dc.dynamic k7548$1=key$1;
if((coll7547$1 is lcoc_core.IFind$iface)){
return ((coll7547$1 as lcoc_core.IFind$iface).$_find$1((k7548$1 as dc.dynamic), ));
}
return ((lcoc_core.IFind.extensions((coll7547$1 as dc.dynamic), ) as lcoc_core.IFind$ext).$_find$1((coll7547$1 as dc.dynamic), (k7548$1 as dc.dynamic), ));
}

// END find

// BEGIN first
dc.dynamic first(dc.dynamic coll$1, ){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic coll7319$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
coll7319$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7319$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((coll7319$1 is lcoc_core.ISeq$iface)){
return ((coll7319$1 as lcoc_core.ISeq$iface).$_first$0());
}
return ((lcoc_core.ISeq.extensions(coll7319$1, ) as lcoc_core.ISeq$ext).$_first$0(coll7319$1, ));
}

// END first

// BEGIN flatten
dc.dynamic flatten(dc.dynamic x$1, ){
return (lcoc_core.filter.$_invoke$2(lcoc_core.complement(lcoc_core.sequential$QMARK_, ), lcoc_core.rest(lcoc_core.tree_seq(lcoc_core.sequential$QMARK_, lcoc_core.seq, x$1, ), ), ));
}

// END flatten

// BEGIN fn
lcoc_core.IFn$iface fn=lcoc_core.fn$ifn(null, );

// END fn

// BEGIN fn$ifn
class fn$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const fn$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.fn$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic sigs$1, ){
late final dc.dynamic name$1;
if(lcoc_core.symbol$QMARK_(lcoc_core.first(sigs$1, ), )){
name$1=lcoc_core.first(sigs$1, );
}else{
name$1=null;
}
late final dc.dynamic sigs$2;
if(((name$1!=false)&&(name$1!=null))){
sigs$2=lcoc_core.next(sigs$1, );
}else{
sigs$2=sigs$1;
}
late final dc.dynamic sigs$3;
if(lcoc_core.vector$QMARK_(lcoc_core.first(sigs$2, ), )){
sigs$3=(lcoc_core.list.$_invoke$1(sigs$2, ));
}else if(((lcoc_core.ISeq.satisfies((lcoc_core.first(sigs$2, ) as dc.dynamic), )) as dc.bool)){
sigs$3=sigs$2;
}else{
final dc.dynamic o7310$12=sigs$2;
late final dc.dynamic $if_$11;
if((o7310$12 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions(o7310$12, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$12, ));
}
late final dc.String $if_$12;
if((($if_$11!=false)&&($if_$11!=null))){
$if_$12=(lcoc_core.str.$_invoke$3("Parameter declaration ", lcoc_core.first(sigs$2, ), " should be a vector", ));
}else{
$if_$12=(lcoc_core.str.$_invoke$1("Parameter declaration missing", ));
}
throw lcoc_core.argument_error($if_$12, );
}
dc.dynamic psig$1(dc.dynamic sig$1, ){
late final dc.bool $if_$13;
if(((lcoc_core.ISeq.satisfies((sig$1 as dc.dynamic), )) as dc.bool)){
$if_$13=false;
}else{
$if_$13=true;
}
if($if_$13){
throw lcoc_core.argument_error((lcoc_core.str.$_invoke$3("Invalid signature ", sig$1, " should be a list", )), );
}
final dc.dynamic vec$8146_$1=sig$1;
final dc.dynamic o7310$13=vec$8146_$1;
late final dc.dynamic seq$8147_$1;
if((o7310$13 is lcoc_core.ISeqable$iface)){
seq$8147_$1=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8147_$1=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
final dc.dynamic first$8148_$1=lcoc_core.first(seq$8147_$1, );
final dc.dynamic seq$8147_$2=lcoc_core.next(seq$8147_$1, );
final dc.dynamic params$1=first$8148_$1;
final dc.dynamic body$1=seq$8147_$2;
late final dc.bool $if_$14;
if(lcoc_core.vector$QMARK_(params$1, )){
$if_$14=false;
}else{
$if_$14=true;
}
late final dc.Null $UNDERSCORE_$1;
if($if_$14){
late final dc.String $if_$15;
if(((lcoc_core.ISeq.satisfies((lcoc_core.first(sigs$3, ) as dc.dynamic), )) as dc.bool)){
$if_$15=(lcoc_core.str.$_invoke$3("Parameter declaration ", params$1, " should be a vector", ));
}else{
$if_$15=(lcoc_core.str.$_invoke$3("Invalid signature ", sig$1, " should be a list", ));
}
throw lcoc_core.argument_error($if_$15, );
}
$UNDERSCORE_$1=null;
final dc.dynamic and$7187_$AUTO_$1=lcoc_core.next(body$1, );
late final dc.dynamic $if_$16;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$16=lcoc_core.map$QMARK_(lcoc_core.first(body$1, ), );
}else{
$if_$16=and$7187_$AUTO_$1;
}
late final dc.dynamic conds$1;
if((($if_$16!=false)&&($if_$16!=null))){
conds$1=lcoc_core.first(body$1, );
}else{
conds$1=null;
}
late final dc.dynamic body$2;
if(((conds$1!=false)&&(conds$1!=null))){
body$2=lcoc_core.next(body$1, );
}else{
body$2=body$1;
}
final dc.dynamic or$7228_$AUTO_$1=conds$1;
late final dc.dynamic conds$2;
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
conds$2=or$7228_$AUTO_$1;
}else{
final dc.dynamic o7524$1=params$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
conds$2=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
conds$2=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
}
final dc.dynamic pre$1=(const lcoc_core.Keyword(null, "pre", 1019549967, ).$_invoke$1(conds$2, ));
final dc.dynamic post$1=(const lcoc_core.Keyword(null, "post", 2768950116, ).$_invoke$1(conds$2, ));
late final dc.dynamic body$3;
if(((post$1!=false)&&(post$1!=null))){
final dc.dynamic arg$22=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$21=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "%", )), ));
final dc.dynamic coll7390$1=body$2;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions(coll7390$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7390$1, )) as dc.int);
}
final dc.bool $1=(1<cast$1);
late final dc.dynamic $if_$17;
if($1){
final dc.dynamic o7310$14=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body$2, ));
if((o7310$14 is lcoc_core.ISeqable$iface)){
$if_$17=((o7310$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$17=((lcoc_core.ISeqable.extensions((o7310$14 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$14 as dc.dynamic), ));
}
}else{
$if_$17=lcoc_core.first(body$2, );
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$17, ));
final dc.dynamic o7310$15=(lcoc_core.concat.$_invoke$2(arg$21, $2, ));
late final dc.dynamic $if_$18;
if((o7310$15 is lcoc_core.ISeqable$iface)){
$if_$18=((o7310$15 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$18=((lcoc_core.ISeqable.extensions((o7310$15 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$15 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$18, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7310$17=(lcoc_core.concat.$_invoke$4(arg$22, $4, (lcoc_core.map.$_invoke$2((dc.dynamic c$1, ){
final dc.dynamic o7310$16=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), )), (lcoc_core.list.$_invoke$1(c$1, )), ));
if((o7310$16 is lcoc_core.ISeqable$iface)){
return ((o7310$16 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$16 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$16 as dc.dynamic), ));
}, post$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "%", )), )), ));
late final dc.dynamic $if_$19;
if((o7310$17 is lcoc_core.ISeqable$iface)){
$if_$19=((o7310$17 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$19=((lcoc_core.ISeqable.extensions((o7310$17 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$17 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$19, ));
final dc.dynamic o7310$18=(lcoc_core.concat.$_invoke$1($5, ));
if((o7310$18 is lcoc_core.ISeqable$iface)){
body$3=((o7310$18 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$3=((lcoc_core.ISeqable.extensions((o7310$18 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$18 as dc.dynamic), ));
}
}else{
body$3=body$2;
}
late final dc.dynamic body$4;
if(((pre$1!=false)&&(pre$1!=null))){
body$4=(lcoc_core.concat.$_invoke$2((lcoc_core.map.$_invoke$2((dc.dynamic c$2, ){
final dc.dynamic o7310$19=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "assert", )), )), (lcoc_core.list.$_invoke$1(c$2, )), ));
if((o7310$19 is lcoc_core.ISeqable$iface)){
return ((o7310$19 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$19 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$19 as dc.dynamic), ));
}, pre$1, )), body$3, ));
}else{
body$4=body$3;
}
return lcoc_core.maybe_destructured(params$1, body$4, );
}
final dc.dynamic new_sigs$1=(lcoc_core.map.$_invoke$2(psig$1, sigs$3, ));
late final dc.dynamic $if_$21;
if(((name$1!=false)&&(name$1!=null))){
$if_$21=(lcoc_core.list$STAR_.$_invoke$3((lcoc_core.symbol.$_invoke$2(null, "fn*", )), name$1, new_sigs$1, ));
}else{
$if_$21=lcoc_core.cons((lcoc_core.symbol.$_invoke$2(null, "fn*", )), new_sigs$1, );
}
final dc.dynamic o7524$2=$AMPERSAND_form$1;
late final dc.dynamic $if_$20;
if((o7524$2 is lcoc_core.IMeta$iface)){
$if_$20=((o7524$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$20=((lcoc_core.IMeta.extensions((o7524$2 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$2 as dc.dynamic), ));
}
return lcoc_core.with_meta($if_$21, $if_$20, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END fn$ifn

// BEGIN fn?
dc.bool fn$QMARK_(dc.dynamic f$1, ){
final dc.bool or$7228_$AUTO_$1=(f$1 is dc.Function);
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return ((lcoc_core.Fn.satisfies((f$1 as dc.dynamic), )) as dc.bool);
}

// END fn?

// BEGIN fnext
dc.dynamic fnext(dc.dynamic coll$1, ){
return lcoc_core.first(lcoc_core.next(coll$1, ), );
}

// END fnext

// BEGIN fnil
lcoc_core.IFn$iface fnil=lcoc_core.fnil$ifn(null, );

// END fnil

// BEGIN fnil$ifn
class fnil$ifn extends dc.Object with lcoc_core.IFnMixin_uuXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;

const fnil$ifn(this.meta$4, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$4, ){
return lcoc_core.fnil$ifn((m$2101_$AUTO_$4 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic f$1, dc.dynamic x$1, ){
final dc.dynamic f$2=lcoc_core.Reify$27(null, x$1, f$1, );
return f$2;
}

dc.dynamic $_invoke$3(dc.dynamic f$3, dc.dynamic x$2, dc.dynamic y$1, ){
final dc.dynamic f$4=lcoc_core.Reify$28(null, y$1, f$3, x$2, );
return f$4;
}

dc.dynamic $_invoke$4(dc.dynamic f$5, dc.dynamic x$3, dc.dynamic y$2, dc.dynamic z$1, ){
final dc.dynamic f$6=lcoc_core.Reify$29(null, y$2, z$1, f$5, x$3, );
return f$6;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END fnil$ifn

// BEGIN for
dc.dynamic $for_(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic seq_exprs$1, dc.dynamic body_expr$1, ){
late final dc.dynamic Function(dc.dynamic, dc.dynamic, ) emit$1;
late final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, ) emit_innermost_chunked$1;
late final dc.dynamic Function(dc.dynamic, dc.dynamic, ) chunked_wrap$1;
emit$1=(dc.dynamic seq_exprs$2, dc.dynamic ors$1, ){
final dc.dynamic vec$8706_$1=seq_exprs$2;
final dc.dynamic o7310$37=vec$8706_$1;
late final dc.dynamic seq$8707_$1;
if((o7310$37 is lcoc_core.ISeqable$iface)){
seq$8707_$1=((o7310$37 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8707_$1=((lcoc_core.ISeqable.extensions((o7310$37 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$37 as dc.dynamic), ));
}
final dc.dynamic first$8708_$1=lcoc_core.first(seq$8707_$1, );
final dc.dynamic seq$8707_$2=lcoc_core.next(seq$8707_$1, );
final dc.dynamic binding$2=first$8708_$1;
final dc.dynamic first$8708_$2=lcoc_core.first(seq$8707_$2, );
final dc.dynamic seq$8707_$3=lcoc_core.next(seq$8707_$2, );
final dc.dynamic expr$4=first$8708_$2;
final dc.dynamic seq_exprs$5=seq$8707_$3;
final dc.dynamic arg$30=(lcoc_core.symbol.$_invoke$2(null, "iter__", ));
late final dc.dynamic iter$2;
if((lcoc_core.gensym is dc.Function)){
iter$2=(lcoc_core.gensym as dc.Function)(arg$30, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
iter$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(arg$30, ));
}else{
iter$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, arg$30, ));
}
final dc.dynamic arg$31=(lcoc_core.symbol.$_invoke$2(null, "coll__", ));
late final dc.dynamic arg$32;
if((lcoc_core.gensym is dc.Function)){
arg$32=(lcoc_core.gensym as dc.Function)(arg$31, );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
arg$32=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1(arg$31, ));
}else{
arg$32=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, arg$31, ));
}
dc.dynamic wrap$3(dc.dynamic mods$3, dc.dynamic body$6, ){
final dc.dynamic o7310$46=mods$3;
late final dc.dynamic temp$7200_$AUTO_$4;
if((o7310$46 is lcoc_core.ISeqable$iface)){
temp$7200_$AUTO_$4=((o7310$46 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7200_$AUTO_$4=((lcoc_core.ISeqable.extensions((o7310$46 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$46 as dc.dynamic), ));
}
if((null==temp$7200_$AUTO_$4)){
return body$6;
}
final dc.dynamic vec$8712_$1=temp$7200_$AUTO_$4;
final dc.dynamic o7310$47=vec$8712_$1;
late final dc.dynamic seq$8713_$1;
if((o7310$47 is lcoc_core.ISeqable$iface)){
seq$8713_$1=((o7310$47 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8713_$1=((lcoc_core.ISeqable.extensions(o7310$47, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$47, ));
}
final dc.dynamic first$8714_$1=lcoc_core.first(seq$8713_$1, );
final dc.dynamic seq$8713_$2=lcoc_core.next(seq$8713_$1, );
final dc.dynamic mod$4=first$8714_$1;
final dc.dynamic first$8714_$2=lcoc_core.first(seq$8713_$2, );
final dc.dynamic seq$8713_$3=lcoc_core.next(seq$8713_$2, );
final dc.dynamic expr$6=first$8714_$2;
final dc.dynamic more_mods$4=seq$8713_$3;
final dc.dynamic body$8=wrap$3(more_mods$4, body$6, );
final dc.dynamic o7533$4=mod$4;
late final dc.int hash$4;
if((o7533$4 is lcoc_core.IHash$iface)){
hash$4=(((o7533$4 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$4=(((lcoc_core.IHash.extensions((o7533$4 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$4 as dc.dynamic), )) as dc.int);
}
switch(hash$4){
case 928173128:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "let", 928173128, ), mod$4, ))){
final dc.dynamic o7310$48=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(expr$6, )), (lcoc_core.list.$_invoke$1(body$8, )), ));
if((o7310$48 is lcoc_core.ISeqable$iface)){
return ((o7310$48 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$48 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$48 as dc.dynamic), ));
}
continue _default;
case 938507857:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "while", 938507857, ), mod$4, ))){
final dc.dynamic arg$42=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$41=(lcoc_core.list.$_invoke$1(expr$6, ));
final dc.dynamic arg$40=(lcoc_core.list.$_invoke$1(body$8, ));
final dc.dynamic o7310$49=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), ors$1, ));
late final dc.dynamic $if_$24;
if((o7310$49 is lcoc_core.ISeqable$iface)){
$if_$24=((o7310$49 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$24=((lcoc_core.ISeqable.extensions((o7310$49 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$49 as dc.dynamic), ));
}
final dc.dynamic $26=(lcoc_core.list.$_invoke$1($if_$24, ));
final dc.dynamic o7310$50=(lcoc_core.concat.$_invoke$4(arg$42, arg$41, arg$40, $26, ));
if((o7310$50 is lcoc_core.ISeqable$iface)){
return ((o7310$50 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$50 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$50 as dc.dynamic), ));
}
continue _default;
case 2890158092:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "when", 2890158092, ), mod$4, ))){
final dc.dynamic arg$46=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$45=(lcoc_core.list.$_invoke$1(expr$6, ));
final dc.dynamic arg$44=(lcoc_core.list.$_invoke$1(body$8, ));
final dc.dynamic arg$43=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$51=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(arg$32, )), ));
late final dc.dynamic $if_$25;
if((o7310$51 is lcoc_core.ISeqable$iface)){
$if_$25=((o7310$51 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$25=((lcoc_core.ISeqable.extensions((o7310$51 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$51 as dc.dynamic), ));
}
final dc.dynamic $27=(lcoc_core.list.$_invoke$1($if_$25, ));
final dc.dynamic o7310$52=(lcoc_core.concat.$_invoke$2(arg$43, $27, ));
late final dc.dynamic $if_$26;
if((o7310$52 is lcoc_core.ISeqable$iface)){
$if_$26=((o7310$52 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$26=((lcoc_core.ISeqable.extensions((o7310$52 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$52 as dc.dynamic), ));
}
final dc.dynamic $28=(lcoc_core.list.$_invoke$1($if_$26, ));
final dc.dynamic o7310$53=(lcoc_core.concat.$_invoke$4(arg$46, arg$45, arg$44, $28, ));
if((o7310$53 is lcoc_core.ISeqable$iface)){
return ((o7310$53 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$53 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$53 as dc.dynamic), ));
}
continue _default;
_default: default:
throw (dc.ArgumentError.value((mod$4 as dc.dynamic), null, "No matching clause.", ));
}
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) wrap$4=wrap$3;
final dc.dynamic arg$47=(lcoc_core.list.$_invoke$1(iter$2, ));
final dc.dynamic o7310$54=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(arg$32, )), ));
late final dc.dynamic $if_$27;
if((o7310$54 is lcoc_core.ISeqable$iface)){
$if_$27=((o7310$54 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$27=((lcoc_core.ISeqable.extensions((o7310$54 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$54 as dc.dynamic), ));
}
final dc.dynamic $29=(lcoc_core.list.$_invoke$1($if_$27, ));
final dc.dynamic o7310$55=(lcoc_core.concat.$_invoke$2(arg$47, $29, ));
late final dc.dynamic $if_$28;
if((o7310$55 is lcoc_core.ISeqable$iface)){
$if_$28=((o7310$55 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$28=((lcoc_core.ISeqable.extensions((o7310$55 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$55 as dc.dynamic), ));
}
final dc.dynamic ors$3=lcoc_core.cons($if_$28, ors$1, );
final dc.dynamic coll7390$2=(lcoc_core.take_while.$_invoke$2(lcoc_core.keyword$QMARK_, (lcoc_core.take_nth.$_invoke$2(2, seq_exprs$5, )), ));
late final dc.int cast$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
final dc.int nmods$2=(2*cast$2);
final dc.dynamic mods$4=(lcoc_core.take.$_invoke$2(nmods$2, seq_exprs$5, ));
final dc.dynamic o7310$56=(lcoc_core.drop.$_invoke$2(nmods$2, seq_exprs$5, ));
late final dc.dynamic seq_exprs$6;
if((o7310$56 is lcoc_core.ISeqable$iface)){
seq_exprs$6=((o7310$56 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq_exprs$6=((lcoc_core.ISeqable.extensions((o7310$56 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$56 as dc.dynamic), ));
}
final dc.dynamic arg$55=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$48=(lcoc_core.list.$_invoke$1(binding$2, ));
final dc.dynamic o7310$57=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1(arg$32, )), ));
late final dc.dynamic $if_$29;
if((o7310$57 is lcoc_core.ISeqable$iface)){
$if_$29=((o7310$57 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$29=((lcoc_core.ISeqable.extensions((o7310$57 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$57 as dc.dynamic), ));
}
final dc.dynamic $30=(lcoc_core.list.$_invoke$1($if_$29, ));
final dc.dynamic o7310$58=(lcoc_core.concat.$_invoke$2(arg$48, $30, ));
late final dc.dynamic $if_$30;
if((o7310$58 is lcoc_core.ISeqable$iface)){
$if_$30=((o7310$58 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$30=((lcoc_core.ISeqable.extensions((o7310$58 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$58 as dc.dynamic), ));
}
final dc.dynamic $31=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$30, ));
final dc.dynamic $38=(lcoc_core.list.$_invoke$1($31, ));
late final dc.dynamic $if_$35;
if(((seq_exprs$6!=false)&&(seq_exprs$6!=null))){
final dc.dynamic arg$51=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic arg$50=(lcoc_core.list.$_invoke$1(emit$1(seq_exprs$6, ors$3, ), ));
final dc.dynamic arg$49=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$59=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "next", )), )), (lcoc_core.list.$_invoke$1(arg$32, )), ));
late final dc.dynamic $if_$31;
if((o7310$59 is lcoc_core.ISeqable$iface)){
$if_$31=((o7310$59 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$31=((lcoc_core.ISeqable.extensions((o7310$59 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$59 as dc.dynamic), ));
}
final dc.dynamic $32=(lcoc_core.list.$_invoke$1($if_$31, ));
final dc.dynamic o7310$60=(lcoc_core.concat.$_invoke$2(arg$49, $32, ));
late final dc.dynamic $if_$32;
if((o7310$60 is lcoc_core.ISeqable$iface)){
$if_$32=((o7310$60 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$32=((lcoc_core.ISeqable.extensions((o7310$60 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$60 as dc.dynamic), ));
}
final dc.dynamic $33=(lcoc_core.list.$_invoke$1($if_$32, ));
final dc.dynamic o7310$61=(lcoc_core.concat.$_invoke$3(arg$51, arg$50, $33, ));
if((o7310$61 is lcoc_core.ISeqable$iface)){
$if_$35=((o7310$61 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$35=((lcoc_core.ISeqable.extensions((o7310$61 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$61 as dc.dynamic), ));
}
}else{
final dc.dynamic arg$54=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "cons", )), ));
final dc.dynamic arg$53=(lcoc_core.list.$_invoke$1(body_expr$1, ));
final dc.dynamic arg$52=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), ));
final dc.dynamic o7310$62=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), ors$3, ));
late final dc.dynamic $if_$33;
if((o7310$62 is lcoc_core.ISeqable$iface)){
$if_$33=((o7310$62 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$33=((lcoc_core.ISeqable.extensions((o7310$62 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$62 as dc.dynamic), ));
}
final dc.dynamic $34=(lcoc_core.list.$_invoke$1($if_$33, ));
final dc.dynamic o7310$63=(lcoc_core.concat.$_invoke$2(arg$52, $34, ));
late final dc.dynamic $if_$34;
if((o7310$63 is lcoc_core.ISeqable$iface)){
$if_$34=((o7310$63 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$34=((lcoc_core.ISeqable.extensions((o7310$63 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$63 as dc.dynamic), ));
}
final dc.dynamic $35=(lcoc_core.list.$_invoke$1($if_$34, ));
final dc.dynamic o7310$64=(lcoc_core.concat.$_invoke$3(arg$54, arg$53, $35, ));
if((o7310$64 is lcoc_core.ISeqable$iface)){
$if_$35=((o7310$64 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$35=((lcoc_core.ISeqable.extensions((o7310$64 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$64 as dc.dynamic), ));
}
}
final dc.dynamic $36=wrap$4(mods$4, $if_$35, );
final dc.dynamic $37=(lcoc_core.list.$_invoke$1($36, ));
final dc.dynamic o7310$65=(lcoc_core.concat.$_invoke$3(arg$55, $38, $37, ));
late final dc.dynamic body$9;
if((o7310$65 is lcoc_core.ISeqable$iface)){
body$9=((o7310$65 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$9=((lcoc_core.ISeqable.extensions((o7310$65 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$65 as dc.dynamic), ));
}
late final dc.dynamic body$10;
if(((seq_exprs$6!=false)&&(seq_exprs$6!=null))){
body$10=body$9;
}else{
final dc.dynamic arg$56=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$66=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunked-seq?", )), )), (lcoc_core.list.$_invoke$1(arg$32, )), ));
late final dc.dynamic $if_$36;
if((o7310$66 is lcoc_core.ISeqable$iface)){
$if_$36=((o7310$66 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$36=((lcoc_core.ISeqable.extensions((o7310$66 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$66 as dc.dynamic), ));
}
final dc.dynamic $39=(lcoc_core.list.$_invoke$1($if_$36, ));
final dc.dynamic o7310$67=(lcoc_core.concat.$_invoke$4(arg$56, $39, (lcoc_core.list.$_invoke$1(emit_innermost_chunked$1(arg$32, ors$3, binding$2, mods$4, body_expr$1, ), )), (lcoc_core.list.$_invoke$1(body$9, )), ));
if((o7310$67 is lcoc_core.ISeqable$iface)){
body$10=((o7310$67 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
body$10=((lcoc_core.ISeqable.extensions((o7310$67 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$67 as dc.dynamic), ));
}
}
final dc.dynamic arg$58=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic arg$57=(lcoc_core.list.$_invoke$1(iter$2, ));
final dc.dynamic o7310$68=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1(arg$32, )), ));
late final dc.dynamic $if_$37;
if((o7310$68 is lcoc_core.ISeqable$iface)){
$if_$37=((o7310$68 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$37=((lcoc_core.ISeqable.extensions((o7310$68 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$68 as dc.dynamic), ));
}
final dc.dynamic $40=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$37, ));
final dc.dynamic $42=(lcoc_core.list.$_invoke$1($40, ));
final dc.dynamic o7310$69=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), )), (lcoc_core.list.$_invoke$1(arg$32, )), (lcoc_core.list.$_invoke$1(body$10, )), ));
late final dc.dynamic $if_$38;
if((o7310$69 is lcoc_core.ISeqable$iface)){
$if_$38=((o7310$69 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$38=((lcoc_core.ISeqable.extensions((o7310$69 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$69 as dc.dynamic), ));
}
final dc.dynamic $41=(lcoc_core.list.$_invoke$1($if_$38, ));
final dc.dynamic o7310$70=(lcoc_core.concat.$_invoke$4(arg$58, arg$57, $42, $41, ));
late final dc.dynamic $if_$39;
if((o7310$70 is lcoc_core.ISeqable$iface)){
$if_$39=((o7310$70 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$39=((lcoc_core.ISeqable.extensions((o7310$70 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$70 as dc.dynamic), ));
}
final dc.dynamic $44=(lcoc_core.list.$_invoke$1($if_$39, ));
final dc.dynamic o7310$71=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1(expr$4, )), ));
late final dc.dynamic $if_$40;
if((o7310$71 is lcoc_core.ISeqable$iface)){
$if_$40=((o7310$71 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$40=((lcoc_core.ISeqable.extensions((o7310$71 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$71 as dc.dynamic), ));
}
final dc.dynamic $43=(lcoc_core.list.$_invoke$1($if_$40, ));
final dc.dynamic o7310$72=(lcoc_core.concat.$_invoke$2($44, $43, ));
if((o7310$72 is lcoc_core.ISeqable$iface)){
return ((o7310$72 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$72 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$72 as dc.dynamic), ));
};
emit_innermost_chunked$1=(dc.dynamic arg$59, dc.dynamic ors$4, dc.dynamic binding$3, dc.dynamic mods$5, dc.dynamic body_expr$2, ){
final dc.dynamic buf$2=(lcoc_core.symbol.$_invoke$2(null, "buf__8692__auto__", ));
final dc.dynamic arg$105=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$93=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "c__8693__auto__", )), ));
final dc.dynamic o7310$103=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-first", )), )), (lcoc_core.list.$_invoke$1(arg$59, )), ));
late final dc.dynamic $if_$70;
if((o7310$103 is lcoc_core.ISeqable$iface)){
$if_$70=((o7310$103 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$70=((lcoc_core.ISeqable.extensions((o7310$103 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$103 as dc.dynamic), ));
}
final dc.dynamic $99=(lcoc_core.list.$_invoke$1($if_$70, ));
final dc.dynamic arg$92=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__8694__auto__", )), ));
final dc.dynamic o7310$104=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "count", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "c__8693__auto__", )), )), ));
late final dc.dynamic $if_$71;
if((o7310$104 is lcoc_core.ISeqable$iface)){
$if_$71=((o7310$104 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$71=((lcoc_core.ISeqable.extensions((o7310$104 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$104 as dc.dynamic), ));
}
final dc.dynamic $98=(lcoc_core.list.$_invoke$1($if_$71, ));
final dc.dynamic arg$91=(lcoc_core.list.$_invoke$1(buf$2, ));
final dc.dynamic o7310$105=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-buffer", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__8694__auto__", )), )), ));
late final dc.dynamic $if_$72;
if((o7310$105 is lcoc_core.ISeqable$iface)){
$if_$72=((o7310$105 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$72=((lcoc_core.ISeqable.extensions((o7310$105 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$105 as dc.dynamic), ));
}
final dc.dynamic $97=(lcoc_core.list.$_invoke$1($if_$72, ));
final dc.dynamic arg$90=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "exit__8695__auto__", )), ));
final dc.dynamic arg$89=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "loop", )), ));
final dc.dynamic arg$83=(lcoc_core.symbol.$_invoke$2(null, "i__8696__auto__", ));
final dc.dynamic o7310$106=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "tag", 2780644040, ), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("dart:core", "int", )), )), ));
late final dc.dynamic $if_$73;
if((o7310$106 is lcoc_core.ISeqable$iface)){
$if_$73=((o7310$106 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$73=((lcoc_core.ISeqable.extensions((o7310$106 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$106 as dc.dynamic), ));
}
final dc.dynamic $80=(lcoc_core.apply.$_invoke$2(lcoc_core.hash_map, $if_$73, ));
final dc.dynamic $81=lcoc_core.with_meta(arg$83, $80, );
final dc.dynamic $82=(lcoc_core.list.$_invoke$1($81, ));
final dc.dynamic o7310$107=(lcoc_core.concat.$_invoke$2($82, (lcoc_core.list.$_invoke$1(0, )), ));
late final dc.dynamic $if_$74;
if((o7310$107 is lcoc_core.ISeqable$iface)){
$if_$74=((o7310$107 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$74=((lcoc_core.ISeqable.extensions((o7310$107 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$107 as dc.dynamic), ));
}
final dc.dynamic $83=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$74, ));
final dc.dynamic $95=(lcoc_core.list.$_invoke$1($83, ));
final dc.dynamic arg$88=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic o7310$108=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "<", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8696__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "size__8694__auto__", )), )), ));
late final dc.dynamic $if_$75;
if((o7310$108 is lcoc_core.ISeqable$iface)){
$if_$75=((o7310$108 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$75=((lcoc_core.ISeqable.extensions((o7310$108 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$108 as dc.dynamic), ));
}
final dc.dynamic $93=(lcoc_core.list.$_invoke$1($if_$75, ));
final dc.dynamic arg$87=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic arg$85=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$84=(lcoc_core.list.$_invoke$1(binding$3, ));
final dc.dynamic o7310$109=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-nth", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "c__8693__auto__", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8696__auto__", )), )), ));
late final dc.dynamic $if_$76;
if((o7310$109 is lcoc_core.ISeqable$iface)){
$if_$76=((o7310$109 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$76=((lcoc_core.ISeqable.extensions((o7310$109 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$109 as dc.dynamic), ));
}
final dc.dynamic $84=(lcoc_core.list.$_invoke$1($if_$76, ));
final dc.dynamic o7310$110=(lcoc_core.concat.$_invoke$2(arg$84, $84, ));
late final dc.dynamic $if_$77;
if((o7310$110 is lcoc_core.ISeqable$iface)){
$if_$77=((o7310$110 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$77=((lcoc_core.ISeqable.extensions((o7310$110 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$110 as dc.dynamic), ));
}
final dc.dynamic $85=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$77, ));
final dc.dynamic $88=(lcoc_core.list.$_invoke$1($85, ));
final dc.dynamic o7310$111=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-append", )), )), (lcoc_core.list.$_invoke$1(buf$2, )), (lcoc_core.list.$_invoke$1(body_expr$2, )), ));
late final dc.dynamic $if_$78;
if((o7310$111 is lcoc_core.ISeqable$iface)){
$if_$78=((o7310$111 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$78=((lcoc_core.ISeqable.extensions((o7310$111 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$111 as dc.dynamic), ));
}
final dc.dynamic $86=chunked_wrap$1(mods$5, $if_$78, );
final dc.dynamic $87=(lcoc_core.list.$_invoke$1($86, ));
final dc.dynamic o7310$112=(lcoc_core.concat.$_invoke$3(arg$85, $88, $87, ));
late final dc.dynamic $if_$79;
if((o7310$112 is lcoc_core.ISeqable$iface)){
$if_$79=((o7310$112 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$79=((lcoc_core.ISeqable.extensions((o7310$112 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$112 as dc.dynamic), ));
}
final dc.dynamic $91=(lcoc_core.list.$_invoke$1($if_$79, ));
final dc.dynamic arg$86=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$113=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "inc", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "i__8696__auto__", )), )), ));
late final dc.dynamic $if_$80;
if((o7310$113 is lcoc_core.ISeqable$iface)){
$if_$80=((o7310$113 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$80=((lcoc_core.ISeqable.extensions((o7310$113 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$113 as dc.dynamic), ));
}
final dc.dynamic $89=(lcoc_core.list.$_invoke$1($if_$80, ));
final dc.dynamic o7310$114=(lcoc_core.concat.$_invoke$2(arg$86, $89, ));
late final dc.dynamic $if_$81;
if((o7310$114 is lcoc_core.ISeqable$iface)){
$if_$81=((o7310$114 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$81=((lcoc_core.ISeqable.extensions((o7310$114 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$114 as dc.dynamic), ));
}
final dc.dynamic $90=(lcoc_core.list.$_invoke$1($if_$81, ));
final dc.dynamic o7310$115=(lcoc_core.concat.$_invoke$3(arg$87, $91, $90, ));
late final dc.dynamic $if_$82;
if((o7310$115 is lcoc_core.ISeqable$iface)){
$if_$82=((o7310$115 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$82=((lcoc_core.ISeqable.extensions((o7310$115 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$115 as dc.dynamic), ));
}
final dc.dynamic $92=(lcoc_core.list.$_invoke$1($if_$82, ));
final dc.dynamic o7310$116=(lcoc_core.concat.$_invoke$3(arg$88, $93, $92, ));
late final dc.dynamic $if_$83;
if((o7310$116 is lcoc_core.ISeqable$iface)){
$if_$83=((o7310$116 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$83=((lcoc_core.ISeqable.extensions((o7310$116 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$116 as dc.dynamic), ));
}
final dc.dynamic $94=(lcoc_core.list.$_invoke$1($if_$83, ));
final dc.dynamic o7310$117=(lcoc_core.concat.$_invoke$3(arg$89, $95, $94, ));
late final dc.dynamic $if_$84;
if((o7310$117 is lcoc_core.ISeqable$iface)){
$if_$84=((o7310$117 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$84=((lcoc_core.ISeqable.extensions((o7310$117 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$117 as dc.dynamic), ));
}
final dc.dynamic $96=(lcoc_core.list.$_invoke$1($if_$84, ));
final dc.dynamic o7310$118=(lcoc_core.concat.$_invoke$8(arg$93, $99, arg$92, $98, arg$91, $97, arg$90, $96, ));
late final dc.dynamic $if_$85;
if((o7310$118 is lcoc_core.ISeqable$iface)){
$if_$85=((o7310$118 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$85=((lcoc_core.ISeqable.extensions((o7310$118 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$118 as dc.dynamic), ));
}
final dc.dynamic $100=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$85, ));
final dc.dynamic $114=(lcoc_core.list.$_invoke$1($100, ));
final dc.dynamic arg$104=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "cond", )), ));
final dc.dynamic arg$94=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "pos?", )), ));
final dc.dynamic o7310$119=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "count", )), )), (lcoc_core.list.$_invoke$1(buf$2, )), ));
late final dc.dynamic $if_$86;
if((o7310$119 is lcoc_core.ISeqable$iface)){
$if_$86=((o7310$119 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$86=((lcoc_core.ISeqable.extensions((o7310$119 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$119 as dc.dynamic), ));
}
final dc.dynamic $101=(lcoc_core.list.$_invoke$1($if_$86, ));
final dc.dynamic o7310$120=(lcoc_core.concat.$_invoke$2(arg$94, $101, ));
late final dc.dynamic $if_$87;
if((o7310$120 is lcoc_core.ISeqable$iface)){
$if_$87=((o7310$120 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$87=((lcoc_core.ISeqable.extensions((o7310$120 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$120 as dc.dynamic), ));
}
final dc.dynamic $112=(lcoc_core.list.$_invoke$1($if_$87, ));
final dc.dynamic arg$100=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-cons", )), ));
final dc.dynamic o7310$121=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk", )), )), (lcoc_core.list.$_invoke$1(buf$2, )), ));
late final dc.dynamic $if_$88;
if((o7310$121 is lcoc_core.ISeqable$iface)){
$if_$88=((o7310$121 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$88=((lcoc_core.ISeqable.extensions((o7310$121 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$121 as dc.dynamic), ));
}
final dc.dynamic $107=(lcoc_core.list.$_invoke$1($if_$88, ));
final dc.dynamic arg$99=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), ));
final dc.dynamic arg$98=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), ));
final dc.dynamic arg$97=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when-not", )), ));
final dc.dynamic arg$96=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "exit__8695__auto__", )), ));
final dc.dynamic arg$95=(lcoc_core.list.$_invoke$1(lcoc_core.ffirst(ors$4, ), ));
final dc.dynamic o7310$122=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-next", )), )), (lcoc_core.list.$_invoke$1(arg$59, )), ));
late final dc.dynamic $if_$89;
if((o7310$122 is lcoc_core.ISeqable$iface)){
$if_$89=((o7310$122 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$89=((lcoc_core.ISeqable.extensions((o7310$122 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$122 as dc.dynamic), ));
}
final dc.dynamic $102=(lcoc_core.list.$_invoke$1($if_$89, ));
final dc.dynamic o7310$123=(lcoc_core.concat.$_invoke$2(arg$95, $102, ));
late final dc.dynamic $if_$90;
if((o7310$123 is lcoc_core.ISeqable$iface)){
$if_$90=((o7310$123 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$90=((lcoc_core.ISeqable.extensions((o7310$123 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$123 as dc.dynamic), ));
}
final dc.dynamic $103=(lcoc_core.list.$_invoke$1($if_$90, ));
final dc.dynamic o7310$124=(lcoc_core.concat.$_invoke$3(arg$97, arg$96, $103, ));
late final dc.dynamic $if_$91;
if((o7310$124 is lcoc_core.ISeqable$iface)){
$if_$91=((o7310$124 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$91=((lcoc_core.ISeqable.extensions((o7310$124 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$124 as dc.dynamic), ));
}
final dc.dynamic $104=(lcoc_core.list.$_invoke$1($if_$91, ));
final dc.dynamic o7310$125=(lcoc_core.concat.$_invoke$3(arg$98, $104, lcoc_core.next(ors$4, ), ));
late final dc.dynamic $if_$92;
if((o7310$125 is lcoc_core.ISeqable$iface)){
$if_$92=((o7310$125 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$92=((lcoc_core.ISeqable.extensions((o7310$125 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$125 as dc.dynamic), ));
}
final dc.dynamic $105=(lcoc_core.list.$_invoke$1($if_$92, ));
final dc.dynamic o7310$126=(lcoc_core.concat.$_invoke$2(arg$99, $105, ));
late final dc.dynamic $if_$93;
if((o7310$126 is lcoc_core.ISeqable$iface)){
$if_$93=((o7310$126 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$93=((lcoc_core.ISeqable.extensions((o7310$126 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$126 as dc.dynamic), ));
}
final dc.dynamic $106=(lcoc_core.list.$_invoke$1($if_$93, ));
final dc.dynamic o7310$127=(lcoc_core.concat.$_invoke$3(arg$100, $107, $106, ));
late final dc.dynamic $if_$94;
if((o7310$127 is lcoc_core.ISeqable$iface)){
$if_$94=((o7310$127 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$94=((lcoc_core.ISeqable.extensions((o7310$127 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$127 as dc.dynamic), ));
}
final dc.dynamic $111=(lcoc_core.list.$_invoke$1($if_$94, ));
final dc.dynamic arg$103=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "exit__8695__auto__", )), ));
final dc.dynamic o7310$128=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), lcoc_core.next(ors$4, ), ));
late final dc.dynamic $if_$95;
if((o7310$128 is lcoc_core.ISeqable$iface)){
$if_$95=((o7310$128 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$95=((lcoc_core.ISeqable.extensions((o7310$128 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$128 as dc.dynamic), ));
}
final dc.dynamic $110=(lcoc_core.list.$_invoke$1($if_$95, ));
final dc.dynamic arg$102=(lcoc_core.list.$_invoke$1(const lcoc_core.Keyword(null, "else", 3088930457, ), ));
final dc.dynamic arg$101=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "recur", )), ));
final dc.dynamic o7310$129=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "chunk-next", )), )), (lcoc_core.list.$_invoke$1(arg$59, )), ));
late final dc.dynamic $if_$96;
if((o7310$129 is lcoc_core.ISeqable$iface)){
$if_$96=((o7310$129 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$96=((lcoc_core.ISeqable.extensions((o7310$129 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$129 as dc.dynamic), ));
}
final dc.dynamic $108=(lcoc_core.list.$_invoke$1($if_$96, ));
final dc.dynamic o7310$130=(lcoc_core.concat.$_invoke$2(arg$101, $108, ));
late final dc.dynamic $if_$97;
if((o7310$130 is lcoc_core.ISeqable$iface)){
$if_$97=((o7310$130 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$97=((lcoc_core.ISeqable.extensions((o7310$130 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$130 as dc.dynamic), ));
}
final dc.dynamic $109=(lcoc_core.list.$_invoke$1($if_$97, ));
final dc.dynamic o7310$131=(lcoc_core.concat.$_invoke$7(arg$104, $112, $111, arg$103, $110, arg$102, $109, ));
late final dc.dynamic $if_$98;
if((o7310$131 is lcoc_core.ISeqable$iface)){
$if_$98=((o7310$131 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$98=((lcoc_core.ISeqable.extensions((o7310$131 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$131 as dc.dynamic), ));
}
final dc.dynamic $113=(lcoc_core.list.$_invoke$1($if_$98, ));
final dc.dynamic o7310$132=(lcoc_core.concat.$_invoke$3(arg$105, $114, $113, ));
if((o7310$132 is lcoc_core.ISeqable$iface)){
return ((o7310$132 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$132 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$132 as dc.dynamic), ));
};
chunked_wrap$1=(dc.dynamic mods$6, dc.dynamic body$11, ){
final dc.dynamic o7310$138=mods$6;
late final dc.dynamic temp$7200_$AUTO_$6;
if((o7310$138 is lcoc_core.ISeqable$iface)){
temp$7200_$AUTO_$6=((o7310$138 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7200_$AUTO_$6=((lcoc_core.ISeqable.extensions((o7310$138 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$138 as dc.dynamic), ));
}
if((null==temp$7200_$AUTO_$6)){
return body$11;
}
final dc.dynamic vec$8718_$1=temp$7200_$AUTO_$6;
final dc.dynamic o7310$139=vec$8718_$1;
late final dc.dynamic seq$8719_$1;
if((o7310$139 is lcoc_core.ISeqable$iface)){
seq$8719_$1=((o7310$139 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8719_$1=((lcoc_core.ISeqable.extensions(o7310$139, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$139, ));
}
final dc.dynamic first$8720_$1=lcoc_core.first(seq$8719_$1, );
final dc.dynamic seq$8719_$2=lcoc_core.next(seq$8719_$1, );
final dc.dynamic mod$6=first$8720_$1;
final dc.dynamic first$8720_$2=lcoc_core.first(seq$8719_$2, );
final dc.dynamic seq$8719_$3=lcoc_core.next(seq$8719_$2, );
final dc.dynamic expr$8=first$8720_$2;
final dc.dynamic more_mods$6=seq$8719_$3;
final dc.dynamic body$13=chunked_wrap$1(more_mods$6, body$11, );
final dc.dynamic o7533$6=mod$6;
late final dc.int hash$6;
if((o7533$6 is lcoc_core.IHash$iface)){
hash$6=(((o7533$6 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
hash$6=(((lcoc_core.IHash.extensions((o7533$6 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$6 as dc.dynamic), )) as dc.int);
}
switch(hash$6){
case 928173128:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "let", 928173128, ), mod$6, ))){
final dc.dynamic o7310$140=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(expr$8, )), (lcoc_core.list.$_invoke$1(body$13, )), ));
if((o7310$140 is lcoc_core.ISeqable$iface)){
return ((o7310$140 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$140 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$140 as dc.dynamic), ));
}
continue _default;
case 938507857:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "while", 938507857, ), mod$6, ))){
final dc.dynamic o7310$141=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), )), (lcoc_core.list.$_invoke$1(expr$8, )), (lcoc_core.list.$_invoke$1(body$13, )), (lcoc_core.list.$_invoke$1(true, )), ));
if((o7310$141 is lcoc_core.ISeqable$iface)){
return ((o7310$141 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$141 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$141 as dc.dynamic), ));
}
continue _default;
case 2890158092:
if((lcoc_core.$EQ_.$_invoke$2(const lcoc_core.Keyword(null, "when", 2890158092, ), mod$6, ))){
final dc.dynamic o7310$142=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), )), (lcoc_core.list.$_invoke$1(expr$8, )), (lcoc_core.list.$_invoke$1(body$13, )), ));
if((o7310$142 is lcoc_core.ISeqable$iface)){
return ((o7310$142 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$142 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$142 as dc.dynamic), ));
}
continue _default;
_default: default:
throw (dc.ArgumentError.value((mod$6 as dc.dynamic), null, "No matching clause.", ));
}
};
final dc.dynamic o7310$143=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), )), (lcoc_core.list.$_invoke$1(emit$1(seq_exprs$1, null, ), )), ));
if((o7310$143 is lcoc_core.ISeqable$iface)){
return ((o7310$143 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$143 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$143 as dc.dynamic), ));
}

// END for

// BEGIN force
dc.dynamic force(dc.dynamic x$1, ){
final dc.dynamic test$1=lcoc_core.delay$QMARK_(x$1, );
if(((test$1!=false)&&(test$1!=null))){
return lcoc_core.deref(x$1, );
}
return x$1;
}

// END force

// BEGIN frequencies
dc.dynamic frequencies(dc.dynamic coll$1, ){
final dc.dynamic coll7370$1=coll$1;
dc.dynamic f7371$1(dc.dynamic counts$1, dc.dynamic x$1, ){
return (lcoc_core.assoc$BANG_.$_invoke$3(counts$1, x$1, (1+((lcoc_core.$get_.$_invoke$3(counts$1, x$1, 0, )) as dc.num)), ));
}
final dc.dynamic start7372$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
late final dc.dynamic $if_$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
$if_$1=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}else{
$if_$1=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
return lcoc_core.persistent$BANG_($if_$1, );
}

// END frequencies

// BEGIN gensym
var gensym=(){
final lcoc_core.Atom id$1=(lcoc_core.atom.$_invoke$1(0, ));
final dc.dynamic f$1=lcoc_core.Reify$50(null, id$1, );
return f$1;
}();

// END gensym

// BEGIN get
lcoc_core.IFn$iface $get_=lcoc_core.$get_$ifn(null, );

// END get

// BEGIN get-dynamic-binding
dc.dynamic get_dynamic_binding(dc.dynamic k$1, dc.dynamic $else_$1, ){
final dc.dynamic temp$7200_$AUTO_$1=(lcoc_core.$get_.$_invoke$2(lcoc_core.$_DYNAMIC_BINDINGS, k$1, ));
if((null==(temp$7200_$AUTO_$1 as dc.dynamic))){
return $else_$1;
}
final dc.dynamic binding$1=temp$7200_$AUTO_$1;
return lcoc_core.deref(binding$1, );
}

// END get-dynamic-binding

// BEGIN get-in
lcoc_core.IFn$iface get_in=lcoc_core.get_in$ifn(null, );

// END get-in

// BEGIN get-validator
dc.dynamic get_validator(dc.dynamic atom$1, ){
return (atom$1 as lcoc_core.Atom).validator;
}

// END get-validator

// BEGIN get_in$ifn
class get_in$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const get_in$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.get_in$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic m$1, dc.dynamic ks$1, ){
final dc.dynamic coll7370$1=ks$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.$get_;
final dc.dynamic start7372$1=m$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic m$2, dc.dynamic ks$2, dc.dynamic not_found$1, ){
dc.dynamic sentinel$1=lcoc_core.sentinel;
dc.dynamic m$3=m$2;
final dc.dynamic o7310$1=ks$2;
dc.dynamic ks$3;
if((o7310$1 is lcoc_core.ISeqable$iface)){
ks$3=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
ks$3=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
if(((ks$3!=false)&&(ks$3!=null))){
final dc.dynamic m$4=(lcoc_core.$get_.$_invoke$3(m$3, lcoc_core.first(ks$3, ), sentinel$1, ));
if(dc.identical((sentinel$1 as dc.Object?), (m$4 as dc.Object?), )){
return not_found$1;
}
m$3=m$4;
ks$3=lcoc_core.next(ks$3, );
continue;
}
return m$3;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END get_in$ifn

// BEGIN group-by
dc.dynamic group_by(dc.dynamic f$1, dc.dynamic coll$1, ){
final dc.dynamic coll7370$1=coll$1;
dc.dynamic f7371$1(dc.dynamic ret$1, dc.dynamic x$1, ){
late final dc.dynamic k$1;
if((f$1 is dc.Function)){
k$1=(f$1 as dc.Function)(x$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
k$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
k$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, x$1, ));
}
final dc.dynamic coll7355$1=(lcoc_core.$get_.$_invoke$3(ret$1, k$1, lcoc_core.$_EMPTY_VECTOR, ));
final dc.dynamic o7356$1=x$1;
late final dc.dynamic $if_$1;
if((coll7355$1 is lcoc_core.ICollection$iface)){
$if_$1=((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}else{
$if_$1=((lcoc_core.ICollection.extensions((coll7355$1 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$1 as dc.dynamic), (o7356$1 as dc.dynamic), ));
}
return (lcoc_core.assoc$BANG_.$_invoke$3(ret$1, k$1, $if_$1, ));
}
final dc.dynamic start7372$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
late final dc.dynamic $if_$2;
if((coll7370$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}else{
$if_$2=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
return lcoc_core.persistent$BANG_($if_$2, );
}

// END group-by

// BEGIN halt-when
lcoc_core.IFn$iface halt_when=lcoc_core.halt_when$ifn(null, );

// END halt-when

// BEGIN halt_when$ifn
class halt_when$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const halt_when$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.halt_when$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (lcoc_core.halt_when.$_invoke$2(pred$1, null, ));
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic retf$1, ){
return (dc.dynamic rf$1, ){
final dc.dynamic f$1=lcoc_core.Reify$47(null, rf$1, pred$2, retf$1, );
return f$1;
};
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END halt_when$ifn

// BEGIN hash
dc.int hash(dc.dynamic o$1, ){
final dc.dynamic o7533$1=o$1;
if((o7533$1 is lcoc_core.IHash$iface)){
return ((o7533$1 as lcoc_core.IHash$iface).$_hash$0());
}
return ((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), ));
}

// END hash

// BEGIN hash-combine
dc.int hash_combine(dc.dynamic seed$1, dc.dynamic hash$1, ){
return (4294967295&((seed$1 as dc.int)^((((hash$1 as dc.int)+2654435769)+(4294967295&((seed$1 as dc.int)<<(31&6))))+((seed$1 as dc.int)>>(31&2)))));
}

// END hash-combine

// BEGIN hash-map
lcoc_core.IFn$iface hash_map=lcoc_core.hash_map$ifn(null, );

// END hash-map

// BEGIN hash-ordered-coll
dc.int hash_ordered_coll(dc.dynamic coll$1, ){
dc.int n$1=0;
dc.int hash_code$1=1;
final dc.dynamic o7310$1=coll$1;
dc.dynamic coll$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
coll$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
if((null==(coll$2 as dc.dynamic))){
return lcoc_core.mix_collection_hash(hash_code$1, n$1, );
}
n$1=(1+n$1);
final dc.dynamic o7533$1=lcoc_core.first(coll$2, );
late final dc.int cast$1;
if((o7533$1 is lcoc_core.IHash$iface)){
cast$1=(((o7533$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), )) as dc.int);
}
final dc.int $1=((4294967295&(31*hash_code$1))+cast$1);
hash_code$1=(4294967295&$1);
coll$2=lcoc_core.next(coll$2, );
continue;
} while(true);
}

// END hash-ordered-coll

// BEGIN hash-set
lcoc_core.IFn$iface hash_set=lcoc_core.hash_set$ifn(null, );

// END hash-set

// BEGIN hash-string
dc.dynamic hash_string(dc.dynamic s$1, ){
final dc.dynamic or$7228_$AUTO_$1=((lcoc_core.$_hash_string_cache.lookup((s$1 as dc.dynamic), )) as dc.dynamic);
if((or$7228_$AUTO_$1!=null)){
return or$7228_$AUTO_$1;
}
final dc.int h$1=lcoc_core.hash_string$STAR_(s$1, );
lcoc_core.$_hash_string_cache.insert((s$1 as dc.dynamic), h$1, );
return h$1;
}

// END hash-string

// BEGIN hash-string*
dc.int hash_string$STAR_(dc.dynamic s$1, ){
final dc.int len$1=(s$1 as dc.String).length;
if((0<len$1)){
dc.int i$1=0;
dc.int hash$1=0;
do {
if((i$1<len$1)){
final dc.int i$1tmp=(1+i$1);
hash$1=((4294967295&(31*hash$1))+((s$1 as dc.String).codeUnitAt(i$1, )));
i$1=i$1tmp;
continue;
}
return lcoc_core.m3_hash_u32(hash$1, );
} while(true);
}else{
return 0;
}
}

// END hash-string*

// BEGIN hash-symbol
dc.int hash_symbol(dc.dynamic sym$1, ){
final dc.int arg$1=lcoc_core.m3_hash_unencoded_chars((sym$1 as lcoc_core.Symbol).name, );
final dc.String? or$7228_$AUTO_$1=(sym$1 as lcoc_core.Symbol).ns;
late final dc.String? $if_$1;
if((or$7228_$AUTO_$1!=null)){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1="";
}
final dc.int $1=lcoc_core.hash_string$STAR_($if_$1, );
return lcoc_core.hash_combine(arg$1, $1, );
}

// END hash-symbol

// BEGIN hash-unordered-coll
dc.int hash_unordered_coll(dc.dynamic coll$1, ){
dc.int n$1=0;
dc.int hash_code$1=0;
final dc.dynamic o7310$1=coll$1;
dc.dynamic coll$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
coll$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
if((null==(coll$2 as dc.dynamic))){
return lcoc_core.mix_collection_hash(hash_code$1, n$1, );
}
n$1=(1+n$1);
final dc.dynamic o7533$1=lcoc_core.first(coll$2, );
late final dc.int cast$1;
if((o7533$1 is lcoc_core.IHash$iface)){
cast$1=(((o7533$1 as lcoc_core.IHash$iface).$_hash$0()) as dc.int);
}else{
cast$1=(((lcoc_core.IHash.extensions((o7533$1 as dc.dynamic), ) as lcoc_core.IHash$ext).$_hash$0((o7533$1 as dc.dynamic), )) as dc.int);
}
final dc.int $1=(hash_code$1+cast$1);
hash_code$1=(4294967295&$1);
coll$2=lcoc_core.next(coll$2, );
continue;
} while(true);
}

// END hash-unordered-coll

// BEGIN hash_map$ifn
class hash_map$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const hash_map$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.hash_map$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic keyvals$1, ){
final dc.dynamic coll7390$1=keyvals$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.bool $1=cast$1.isOdd;
if($1){
throw dc.ArgumentError((lcoc_core.str.$_invoke$2("No value supplied for key: ", lcoc_core.last(keyvals$1, ), )), );
}
final dc.dynamic o7310$1=keyvals$1;
dc.dynamic $in_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$in_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$in_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
dc.dynamic out$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
do {
if((($in_$1!=false)&&($in_$1!=null))){
final dc.dynamic $in_$1tmp=lcoc_core.nnext($in_$1, );
out$1=(lcoc_core.assoc$BANG_.$_invoke$3(out$1, lcoc_core.first($in_$1, ), lcoc_core.second($in_$1, ), ));
$in_$1=$in_$1tmp;
continue;
}
return lcoc_core.persistent$BANG_(out$1, );
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END hash_map$ifn

// BEGIN hash_set$ifn
class hash_set$ifn extends dc.Object with lcoc_core.IFnMixin_Y implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const hash_set$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.hash_set$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic keys$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_SET, keys$1, ));
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_SET;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END hash_set$ifn

// BEGIN hint-as
dc.dynamic hint_as(dc.dynamic expr$1, dc.dynamic tag$1, ){
final dc.dynamic G$8455_$1=expr$1;
final dc.bool or$7228_$AUTO_$1=((lcoc_core.ISeq.satisfies((expr$1 as dc.dynamic), )) as dc.bool);
late final dc.bool $if_$1;
if(or$7228_$AUTO_$1){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=lcoc_core.symbol$QMARK_(expr$1, );
}
if($if_$1){
return (lcoc_core.vary_meta.$_invoke$4(G$8455_$1, lcoc_core.assoc, const lcoc_core.Keyword(null, "tag", 2780644040, ), tag$1, ));
}
return G$8455_$1;
}

// END hint-as

// BEGIN ident?
dc.bool ident$QMARK_(dc.dynamic x$1, ){
final dc.bool or$7228_$AUTO_$1=lcoc_core.keyword$QMARK_(x$1, );
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return lcoc_core.symbol$QMARK_(x$1, );
}

// END ident?

// BEGIN identical?
dc.bool identical$QMARK_(dc.dynamic x$1, dc.dynamic y$1, ){
return dc.identical((x$1 as dc.Object?), (y$1 as dc.Object?), );
}

// END identical?

// BEGIN identity
dc.dynamic identity(dc.dynamic x$1, ){
return x$1;
}

// END identity

// BEGIN if-let
lcoc_core.IFn$iface if_let=lcoc_core.if_let$ifn(null, );

// END if-let

// BEGIN if-not
lcoc_core.IFn$iface if_not=lcoc_core.if_not$ifn(null, );

// END if-not

// BEGIN if-some
lcoc_core.IFn$iface if_some=lcoc_core.if_some$ifn(null, );

// END if-some

// BEGIN if_let$ifn
class if_let$ifn extends dc.Object with lcoc_core.IFnMixin_uuuuXZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const if_let$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.if_let$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic then$1, dc.dynamic $else_$1, dc.dynamic oldform$1, ){
late final dc.dynamic form$1;
if((bindings$1 is dc.Function)){
form$1=(bindings$1 as dc.Function)(0, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
form$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(0, ));
}else{
form$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 0, ));
}
late final dc.dynamic tst$1;
if((bindings$1 is dc.Function)){
tst$1=(bindings$1 as dc.Function)(1, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
tst$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(1, ));
}else{
tst$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 1, ));
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8239__auto__", )), )), (lcoc_core.list.$_invoke$1(tst$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8239__auto__", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(form$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8239__auto__", )), )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, (lcoc_core.list.$_invoke$1(then$1, )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, $4, (lcoc_core.list.$_invoke$1($else_$1, )), ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$4, $6, $5, ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic bindings$2, dc.dynamic then$2, ){
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-let", )), )), (lcoc_core.list.$_invoke$1(bindings$2, )), (lcoc_core.list.$_invoke$1(then$2, )), (lcoc_core.list.$_invoke$1(null, )), ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END if_let$ifn

// BEGIN if_not$ifn
class if_not$ifn extends dc.Object with lcoc_core.IFnMixin_uuuuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const if_not$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.if_not$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic then$1, ){
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-not", )), )), (lcoc_core.list.$_invoke$1(test$1, )), (lcoc_core.list.$_invoke$1(then$1, )), (lcoc_core.list.$_invoke$1(null, )), ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}

dc.dynamic $_invoke$5(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic test$2, dc.dynamic then$2, dc.dynamic $else_$1, ){
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), )), (lcoc_core.list.$_invoke$1(test$2, )), (lcoc_core.list.$_invoke$1($else_$1, )), (lcoc_core.list.$_invoke$1(then$2, )), ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END if_not$ifn

// BEGIN if_some$ifn
class if_some$ifn extends dc.Object with lcoc_core.IFnMixin_uuuuXZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const if_some$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.if_some$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic then$1, dc.dynamic $else_$1, dc.dynamic oldform$1, ){
late final dc.dynamic form$1;
if((bindings$1 is dc.Function)){
form$1=(bindings$1 as dc.Function)(0, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
form$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(0, ));
}else{
form$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 0, ));
}
late final dc.dynamic tst$1;
if((bindings$1 is dc.Function)){
tst$1=(bindings$1 as dc.Function)(1, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
tst$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(1, ));
}else{
tst$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 1, ));
}
final dc.dynamic arg$39=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$9=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8234__auto__", )), )), (lcoc_core.list.$_invoke$1(tst$1, )), ));
late final dc.dynamic $if_$8;
if((o7310$9 is lcoc_core.ISeqable$iface)){
$if_$8=((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$8=((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$8, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$38=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$10=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8234__auto__", )), )), ));
late final dc.dynamic $if_$9;
if((o7310$10 is lcoc_core.ISeqable$iface)){
$if_$9=((o7310$10 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$9=((lcoc_core.ISeqable.extensions((o7310$10 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$10 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$9, ));
final dc.dynamic arg$37=(lcoc_core.list.$_invoke$1($else_$1, ));
final dc.dynamic arg$36=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$11=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(form$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8234__auto__", )), )), ));
late final dc.dynamic $if_$10;
if((o7310$11 is lcoc_core.ISeqable$iface)){
$if_$10=((o7310$11 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$10=((lcoc_core.ISeqable.extensions((o7310$11 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$11 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$10, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$12=(lcoc_core.concat.$_invoke$3(arg$36, $3, (lcoc_core.list.$_invoke$1(then$1, )), ));
late final dc.dynamic $if_$11;
if((o7310$12 is lcoc_core.ISeqable$iface)){
$if_$11=((o7310$12 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$11=((lcoc_core.ISeqable.extensions((o7310$12 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$12 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$11, ));
final dc.dynamic o7310$13=(lcoc_core.concat.$_invoke$4(arg$38, $5, arg$37, $4, ));
late final dc.dynamic $if_$12;
if((o7310$13 is lcoc_core.ISeqable$iface)){
$if_$12=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$12=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$12, ));
final dc.dynamic o7310$14=(lcoc_core.concat.$_invoke$3(arg$39, $7, $6, ));
if((o7310$14 is lcoc_core.ISeqable$iface)){
return ((o7310$14 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$14 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$14 as dc.dynamic), ));
}

dc.dynamic $_invoke$4(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, dc.dynamic bindings$2, dc.dynamic then$2, ){
final dc.dynamic o7310$15=(lcoc_core.concat.$_invoke$4((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "if-some", )), )), (lcoc_core.list.$_invoke$1(bindings$2, )), (lcoc_core.list.$_invoke$1(then$2, )), (lcoc_core.list.$_invoke$1(null, )), ));
if((o7310$15 is lcoc_core.ISeqable$iface)){
return ((o7310$15 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$15 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$15 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END if_some$ifn

// BEGIN ifn?
dc.bool ifn$QMARK_(dc.dynamic f$1, ){
final dc.bool or$7228_$AUTO_$1=lcoc_core.fn$QMARK_(f$1, );
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
return ((lcoc_core.IFn.satisfies((f$1 as dc.dynamic), )) as dc.bool);
}

// END ifn?

// BEGIN inc
dc.num inc(dc.dynamic x$1, ){
return (1+(x$1 as dc.num));
}

// END inc

// BEGIN indexed?
dc.bool indexed$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IIndexed.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END indexed?

// BEGIN int-array
lcoc_core.IFn$iface int_array=lcoc_core.int_array$ifn(null, );

// END int-array

// BEGIN int?
dc.bool int$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.int);
}

// END int?

// BEGIN int_array$ifn
class int_array$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const int_array$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.int_array$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if(lcoc_core.int$QMARK_(size_or_seq$1, )){
return (dc.List<dc.int>.filled((size_or_seq$1 as dc.int), 0, ));
}
return (dc.List<dc.int>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies((init_val_or_seq$1 as dc.dynamic), )) as dc.bool)){
final dc.List<dc.int> a$7797_$AUTO_$1=(dc.List<dc.int>.filled((size$1 as dc.int), 0, ));
dc.dynamic i$7798_$AUTO_$1=0;
final dc.dynamic o7310$1=init_val_or_seq$1;
dc.dynamic s$7799_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$7799_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$7799_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
final dc.dynamic and$7187_$AUTO_$1=s$7799_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=((i$7798_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$7774_$AUTO_$1=lcoc_core.first(s$7799_$AUTO_$1, );
a$7797_$AUTO_$1[(i$7798_$AUTO_$1 as dc.int)]=(v$7774_$AUTO_$1 as dc.int);
i$7798_$AUTO_$1=(1+(i$7798_$AUTO_$1 as dc.num));
s$7799_$AUTO_$1=lcoc_core.next(s$7799_$AUTO_$1, );
continue;
}
return a$7797_$AUTO_$1;
} while(true);
}else{
return (dc.List<dc.int>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.int), ));
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END int_array$ifn

// BEGIN interleave
lcoc_core.IFn$iface interleave=lcoc_core.interleave$ifn(null, );

// END interleave

// BEGIN interleave$ifn
class interleave$ifn extends dc.Object with lcoc_core.IFnMixin_XXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const interleave$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.interleave$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic c1$1, dc.dynamic c2$1, dc.dynamic colls$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic ss$1=(lcoc_core.map.$_invoke$2(lcoc_core.seq, (lcoc_core.list$STAR_.$_invoke$3(c1$1, c2$1, colls$1, )), ));
if(lcoc_core.every$QMARK_(lcoc_core.identity, ss$1, )){
return (lcoc_core.concat.$_invoke$2((lcoc_core.map.$_invoke$2(lcoc_core.first, ss$1, )), (lcoc_core.apply.$_invoke$2(lcoc_core.interleave, (lcoc_core.map.$_invoke$2(lcoc_core.rest, ss$1, )), )), ));
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_invoke$1(dc.dynamic c1$2, ){
return lcoc_core.LazySeq(null, ((){
return c1$2;
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic c1$3, dc.dynamic c2$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=c1$3;
late final dc.dynamic s1$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s1$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s1$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic o7310$2=c2$2;
late final dc.dynamic s2$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
s2$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s2$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic and$7187_$AUTO_$1=s1$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=s2$1;
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
return lcoc_core.cons(lcoc_core.first(s1$1, ), lcoc_core.cons(lcoc_core.first(s2$1, ), (lcoc_core.interleave.$_invoke$2(lcoc_core.rest(s1$1, ), lcoc_core.rest(s2$1, ), )), ), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END interleave$ifn

// BEGIN interpose
lcoc_core.IFn$iface interpose=lcoc_core.interpose$ifn(null, );

// END interpose

// BEGIN interpose$ifn
class interpose$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const interpose$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.interpose$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic sep$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile started$1=lcoc_core.volatile$BANG_(false, );
final dc.dynamic f$1=lcoc_core.Reify$41(null, rf$1, started$1, sep$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic sep$2, dc.dynamic coll$1, ){
return (lcoc_core.drop.$_invoke$2(1, (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(sep$2, )), coll$1, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END interpose$ifn

// BEGIN into
lcoc_core.IFn$iface into=lcoc_core.into$ifn(null, );

// END into

// BEGIN into$ifn
class into$ifn extends dc.Object with lcoc_core.IFnMixin_XXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const into$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.into$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic $_invoke$1(dc.dynamic to$1, ){
return to$1;
}

dc.dynamic $_invoke$2(dc.dynamic to$2, dc.dynamic from$1, ){
if(((lcoc_core.IEditableCollection.satisfies((to$2 as dc.dynamic), )) as dc.bool)){
final dc.dynamic coll7370$1=from$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.conj$BANG_;
final dc.dynamic start7372$1=lcoc_core.transient(to$2, );
late final dc.dynamic $if_$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
$if_$1=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}else{
$if_$1=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
final dc.dynamic $1=lcoc_core.persistent$BANG_($if_$1, );
final dc.dynamic o7524$1=to$2;
late final dc.dynamic $if_$2;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$2=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
return lcoc_core.with_meta($1, $if_$2, );
}
final dc.dynamic coll7370$2=from$1;
final lcoc_core.IFn$iface f7371$2=lcoc_core.conj;
final dc.dynamic start7372$2=to$2;
if((coll7370$2 is lcoc_core.IReduce$iface)){
return ((coll7370$2 as lcoc_core.IReduce$iface).$_reduce$2(f7371$2, (start7372$2 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7370$2 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$2 as dc.dynamic), f7371$2, (start7372$2 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic to$3, dc.dynamic xform$1, dc.dynamic from$2, ){
if(((lcoc_core.IEditableCollection.satisfies((to$3 as dc.dynamic), )) as dc.bool)){
final dc.dynamic arg$1=lcoc_core.persistent$BANG_((lcoc_core.transduce.$_invoke$4(xform$1, lcoc_core.conj$BANG_, lcoc_core.transient(to$3, ), from$2, )), );
final dc.dynamic o7524$2=to$3;
late final dc.dynamic $if_$3;
if((o7524$2 is lcoc_core.IMeta$iface)){
$if_$3=((o7524$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$3=((lcoc_core.IMeta.extensions((o7524$2 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$2 as dc.dynamic), ));
}
return lcoc_core.with_meta(arg$1, $if_$3, );
}
return (lcoc_core.transduce.$_invoke$4(xform$1, lcoc_core.conj, to$3, from$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END into$ifn

// BEGIN ints
dc.List<dc.int> ints(dc.dynamic xs$1, ){
return ((xs$1 as dc.List).cast<dc.int>());
}

// END ints

// BEGIN iterate
dc.dynamic iterate(dc.dynamic f$1, dc.dynamic x$1, ){
return lcoc_core.cons(x$1, lcoc_core.LazySeq(null, ((){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)(x$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$1(f$1, x$1, ));
}
return lcoc_core.iterate(f$1, $if_$1, );
} as dc.dynamic), null, -1, ), );
}

// END iterate

// BEGIN iterator
lcoc_core.IFn$iface iterator=lcoc_core.iterator$ifn(null, );

// END iterator

// BEGIN iterator$ifn
class iterator$ifn extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const iterator$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.iterator$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic xform$1, dc.dynamic it1$1, dc.dynamic it2$1, dc.dynamic it3$1, dc.dynamic its$1, ){
final dc.dynamic its$2=(lcoc_core.map.$_invoke$2(lcoc_core.iterator, (lcoc_core.list$STAR_.$_invoke$4(it1$1, it2$1, it3$1, its$1, )), ));
return lcoc_core.xform_iterator(xform$1, (dc.dynamic rf$1, ){
return (){
if(lcoc_core.every$QMARK_((dc.dynamic p1$8789_$SHARP_$1, ){
return ((p1$8789_$SHARP_$1 as dc.Iterator).moveNext());
}, its$2, )){
final dc.dynamic acc$1=(lcoc_core.apply.$_invoke$3(rf$1, true, (lcoc_core.map.$_invoke$2((dc.dynamic p1$8790_$SHARP_$1, ){
return (p1$8790_$SHARP_$1 as dc.Iterator).current;
}, its$2, )), ));
late final dc.bool or$7228_$AUTO_$1;
if(lcoc_core.reduced$QMARK_(acc$1, )){
or$7228_$AUTO_$1=false;
}else{
or$7228_$AUTO_$1=true;
}
if(or$7228_$AUTO_$1){
return or$7228_$AUTO_$1;
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(true, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, true, ));
}
if((rf$1 is dc.Function)){
return (rf$1 as dc.Function)(true, );
}
if((rf$1 is lcoc_core.IFn$iface)){
return ((rf$1 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$1, ).$_invoke$1(rf$1, true, ));
};
}, );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
if((coll$1 is dc.Iterable)){
return (coll$1 as dc.Iterable).iterator;
}
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic or$7228_$AUTO_$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
or$7228_$AUTO_$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
or$7228_$AUTO_$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
late final dc.Iterable cast$1;
if(((or$7228_$AUTO_$2!=false)&&(or$7228_$AUTO_$2!=null))){
cast$1=(or$7228_$AUTO_$2 as dc.Iterable);
}else{
cast$1=(lcoc_core.$_EMPTY_LIST as dc.Iterable);
}
return cast$1.iterator;
}

dc.dynamic $_invoke$2(dc.dynamic xform$2, dc.dynamic coll$2, ){
final dc.Iterator it$1=(lcoc_core.iterator.$_invoke$1(coll$2, ));
return lcoc_core.xform_iterator(xform$2, (dc.dynamic rf$2, ){
return (){
if((it$1.moveNext())){
final dc.dynamic arg$1=it$1.current;
late final dc.dynamic acc$2;
if((rf$2 is dc.Function)){
acc$2=(rf$2 as dc.Function)(true, arg$1, );
}else if((rf$2 is lcoc_core.IFn$iface)){
acc$2=((rf$2 as lcoc_core.IFn$iface).$_invoke$2(true, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(rf$2, ).$_invoke$2(rf$2, true, arg$1, ));
}
late final dc.bool or$7228_$AUTO_$3;
if(lcoc_core.reduced$QMARK_(acc$2, )){
or$7228_$AUTO_$3=false;
}else{
or$7228_$AUTO_$3=true;
}
if(or$7228_$AUTO_$3){
return or$7228_$AUTO_$3;
}
if((rf$2 is dc.Function)){
return (rf$2 as dc.Function)(true, );
}
if((rf$2 is lcoc_core.IFn$iface)){
return ((rf$2 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$2, ).$_invoke$1(rf$2, true, ));
}
if((rf$2 is dc.Function)){
return (rf$2 as dc.Function)(true, );
}
if((rf$2 is lcoc_core.IFn$iface)){
return ((rf$2 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$2, ).$_invoke$1(rf$2, true, ));
};
}, );
}

dc.dynamic $_invoke$3(dc.dynamic xform$3, dc.dynamic c1$1, dc.dynamic c2$1, ){
final dc.Iterator it1$2=(lcoc_core.iterator.$_invoke$1(c1$1, ));
final dc.Iterator it2$2=(lcoc_core.iterator.$_invoke$1(c2$1, ));
return lcoc_core.xform_iterator(xform$3, (dc.dynamic rf$3, ){
return (){
final dc.bool and$7187_$AUTO_$1=(it1$2.moveNext());
late final dc.bool $if_$1;
if(and$7187_$AUTO_$1){
$if_$1=(it2$2.moveNext());
}else{
$if_$1=and$7187_$AUTO_$1;
}
if($if_$1){
final dc.dynamic arg$3=it1$2.current;
final dc.dynamic arg$2=it2$2.current;
late final dc.dynamic acc$3;
if((rf$3 is dc.Function)){
acc$3=(rf$3 as dc.Function)(true, arg$3, arg$2, );
}else if((rf$3 is lcoc_core.IFn$iface)){
acc$3=((rf$3 as lcoc_core.IFn$iface).$_invoke$3(true, arg$3, arg$2, ));
}else{
acc$3=(lcoc_core.IFn.extensions(rf$3, ).$_invoke$3(rf$3, true, arg$3, arg$2, ));
}
late final dc.bool or$7228_$AUTO_$4;
if(lcoc_core.reduced$QMARK_(acc$3, )){
or$7228_$AUTO_$4=false;
}else{
or$7228_$AUTO_$4=true;
}
if(or$7228_$AUTO_$4){
return or$7228_$AUTO_$4;
}
if((rf$3 is dc.Function)){
return (rf$3 as dc.Function)(true, );
}
if((rf$3 is lcoc_core.IFn$iface)){
return ((rf$3 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$3, ).$_invoke$1(rf$3, true, ));
}
if((rf$3 is dc.Function)){
return (rf$3 as dc.Function)(true, );
}
if((rf$3 is lcoc_core.IFn$iface)){
return ((rf$3 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$3, ).$_invoke$1(rf$3, true, ));
};
}, );
}

dc.dynamic $_invoke$4(dc.dynamic xform$4, dc.dynamic c1$2, dc.dynamic c2$2, dc.dynamic c3$1, ){
final dc.Iterator it1$3=(lcoc_core.iterator.$_invoke$1(c1$2, ));
final dc.Iterator it2$3=(lcoc_core.iterator.$_invoke$1(c2$2, ));
final dc.Iterator it3$2=(lcoc_core.iterator.$_invoke$1(c3$1, ));
return lcoc_core.xform_iterator(xform$4, (dc.dynamic rf$4, ){
return (){
final dc.bool and$7187_$AUTO_$2=(it1$3.moveNext());
late final dc.bool $if_$2;
if(and$7187_$AUTO_$2){
final dc.bool and$7187_$AUTO_$3=(it2$3.moveNext());
if(and$7187_$AUTO_$3){
$if_$2=(it3$2.moveNext());
}else{
$if_$2=and$7187_$AUTO_$3;
}
}else{
$if_$2=and$7187_$AUTO_$2;
}
if($if_$2){
final dc.dynamic arg$6=it1$3.current;
final dc.dynamic arg$5=it2$3.current;
final dc.dynamic arg$4=it3$2.current;
late final dc.dynamic acc$4;
if((rf$4 is dc.Function)){
acc$4=(rf$4 as dc.Function)(true, arg$6, arg$5, arg$4, );
}else if((rf$4 is lcoc_core.IFn$iface)){
acc$4=((rf$4 as lcoc_core.IFn$iface).$_invoke$4(true, arg$6, arg$5, arg$4, ));
}else{
acc$4=(lcoc_core.IFn.extensions(rf$4, ).$_invoke$4(rf$4, true, arg$6, arg$5, arg$4, ));
}
late final dc.bool or$7228_$AUTO_$5;
if(lcoc_core.reduced$QMARK_(acc$4, )){
or$7228_$AUTO_$5=false;
}else{
or$7228_$AUTO_$5=true;
}
if(or$7228_$AUTO_$5){
return or$7228_$AUTO_$5;
}
if((rf$4 is dc.Function)){
return (rf$4 as dc.Function)(true, );
}
if((rf$4 is lcoc_core.IFn$iface)){
return ((rf$4 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$4, ).$_invoke$1(rf$4, true, ));
}
if((rf$4 is dc.Function)){
return (rf$4 as dc.Function)(true, );
}
if((rf$4 is lcoc_core.IFn$iface)){
return ((rf$4 as lcoc_core.IFn$iface).$_invoke$1(true, ));
}
return (lcoc_core.IFn.extensions(rf$4, ).$_invoke$1(rf$4, true, ));
};
}, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END iterator$ifn

// BEGIN iterator-seq
dc.dynamic iterator_seq(dc.dynamic iter$1, ){
if(((iter$1 as dc.Iterator).moveNext())){
return lcoc_core.IteratorSeq(null, (iter$1 as dc.Iterator).current, (iter$1 as dc.Iterator), (null as dc.dynamic), -1, );
}
return null;
}

// END iterator-seq

// BEGIN juxt
lcoc_core.IFn$iface juxt=lcoc_core.juxt$ifn(null, );

// END juxt

// BEGIN juxt$ifn
class juxt$ifn extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

const juxt$ifn(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$5, ){
return lcoc_core.juxt$ifn((m$2101_$AUTO_$5 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic g$1, dc.dynamic h$1, dc.dynamic fs$1, ){
final dc.dynamic fs$2=(lcoc_core.list$STAR_.$_invoke$4(f$1, g$1, h$1, fs$1, ));
final dc.dynamic f$2=lcoc_core.Reify$13(null, fs$2, );
return f$2;
}

dc.dynamic $_invoke$1(dc.dynamic f$3, ){
final dc.dynamic f$4=lcoc_core.Reify$14(null, f$3, );
return f$4;
}

dc.dynamic $_invoke$2(dc.dynamic f$5, dc.dynamic g$2, ){
final dc.dynamic f$6=lcoc_core.Reify$15(null, f$5, g$2, );
return f$6;
}

dc.dynamic $_invoke$3(dc.dynamic f$7, dc.dynamic g$3, dc.dynamic h$2, ){
final dc.dynamic f$8=lcoc_core.Reify$16(null, h$2, g$3, f$7, );
return f$8;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END juxt$ifn

// BEGIN keep
lcoc_core.IFn$iface keep=lcoc_core.keep$ifn(null, );

// END keep

// BEGIN keep$ifn
class keep$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const keep$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.keep$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final dc.dynamic f$2=lcoc_core.Reify$38(null, rf$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7390$1=c$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final lcoc_core.ChunkBuffer $1=lcoc_core.chunk_buffer(cast$1, );
final dc.dynamic $2=lcoc_core.chunk_reduce((dc.dynamic p1$8626_$SHARP_$1, dc.dynamic p2$8625_$SHARP_$1, ){
late final dc.dynamic temp$7200_$AUTO_$1;
if((f$3 is dc.Function)){
temp$7200_$AUTO_$1=(f$3 as dc.Function)(p2$8625_$SHARP_$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
temp$7200_$AUTO_$1=((f$3 as lcoc_core.IFn$iface).$_invoke$1(p2$8625_$SHARP_$1, ));
}else{
temp$7200_$AUTO_$1=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, p2$8625_$SHARP_$1, ));
}
if((null==temp$7200_$AUTO_$1)){
return p1$8626_$SHARP_$1;
}
final dc.dynamic x$1=temp$7200_$AUTO_$1;
final dc.dynamic G$8629_$1=p1$8626_$SHARP_$1;
lcoc_core.chunk_append(G$8629_$1, x$1, );
return G$8629_$1;
}, $1, c$1, );
final dc.dynamic $3=lcoc_core.chunk($2, );
return lcoc_core.chunk_cons($3, (lcoc_core.keep.$_invoke$2(f$3, lcoc_core.chunk_rest(s$1, ), )), );
}
final dc.dynamic arg$1=lcoc_core.first(s$1, );
late final dc.dynamic x$2;
if((f$3 is dc.Function)){
x$2=(f$3 as dc.Function)(arg$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
x$2=((f$3 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
x$2=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, arg$1, ));
}
if((null==x$2)){
return (lcoc_core.keep.$_invoke$2(f$3, lcoc_core.rest(s$1, ), ));
}
return lcoc_core.cons(x$2, (lcoc_core.keep.$_invoke$2(f$3, lcoc_core.rest(s$1, ), )), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keep$ifn

// BEGIN keep-indexed
lcoc_core.IFn$iface keep_indexed=lcoc_core.keep_indexed$ifn(null, );

// END keep-indexed

// BEGIN keep_indexed$ifn
class keep_indexed$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const keep_indexed$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.keep_indexed$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile iv$1=lcoc_core.volatile$BANG_(-1, );
final dc.dynamic f$2=lcoc_core.Reify$39(null, iv$1, rf$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
late final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) keepi$1;
keepi$1=(dc.dynamic idx$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$2=coll$2;
late final dc.dynamic temp$7215_$AUTO_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$2!=false)&&(temp$7215_$AUTO_$2!=null))){
final dc.dynamic s$2=temp$7215_$AUTO_$2;
if(lcoc_core.chunked_seq$QMARK_(s$2, )){
final dc.dynamic c$2=lcoc_core.chunk_first(s$2, );
final dc.dynamic coll7390$2=c$2;
late final dc.int cast$3;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$3=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$3=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
final lcoc_core.ChunkBuffer b$2=lcoc_core.chunk_buffer(cast$3, );
final dc.dynamic idx$3=lcoc_core.chunk_reduce((dc.dynamic i$3, dc.dynamic x$3, ){
late final dc.dynamic temp$7205_$AUTO_$2;
if((f$3 is dc.Function)){
temp$7205_$AUTO_$2=(f$3 as dc.Function)(i$3, x$3, );
}else if((f$3 is lcoc_core.IFn$iface)){
temp$7205_$AUTO_$2=((f$3 as lcoc_core.IFn$iface).$_invoke$2(i$3, x$3, ));
}else{
temp$7205_$AUTO_$2=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, i$3, x$3, ));
}
if((null==temp$7205_$AUTO_$2)){
}else{
final dc.dynamic r$2=temp$7205_$AUTO_$2;
lcoc_core.chunk_append(b$2, r$2, );
}
return (1+(i$3 as dc.num));
}, idx$1, c$2, );
return lcoc_core.chunk_cons(lcoc_core.chunk(b$2, ), keepi$1(idx$3, lcoc_core.chunk_rest(s$2, ), ), );
}
final dc.dynamic arg$2=lcoc_core.first(s$2, );
late final dc.dynamic x$4;
if((f$3 is dc.Function)){
x$4=(f$3 as dc.Function)(idx$1, arg$2, );
}else if((f$3 is lcoc_core.IFn$iface)){
x$4=((f$3 as lcoc_core.IFn$iface).$_invoke$2(idx$1, arg$2, ));
}else{
x$4=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, idx$1, arg$2, ));
}
if((null==x$4)){
return keepi$1((1+(idx$1 as dc.num)), lcoc_core.rest(s$2, ), );
}
return lcoc_core.cons(x$4, keepi$1((1+(idx$1 as dc.num)), lcoc_core.rest(s$2, ), ), );
}
return null;
} as dc.dynamic), null, -1, );
};
return keepi$1(0, coll$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keep_indexed$ifn

// BEGIN key
dc.dynamic key(dc.dynamic e$1, ){
return (e$1 as dc.MapEntry).key;
}

// END key

// BEGIN keys
dc.dynamic keys(dc.dynamic coll$1, ){
if((coll$1 is dc.Map)){
return (lcoc_core.chunked_iterator_seq.$_invoke$1((coll$1 as dc.Map).keys.iterator, ));
}
final dc.dynamic o7310$1=(lcoc_core.map.$_invoke$2(lcoc_core.key, coll$1, ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

// END keys

// BEGIN keyword
lcoc_core.IFn$iface keyword=lcoc_core.keyword$ifn(null, );

// END keyword

// BEGIN keyword$ifn
class keyword$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const keyword$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.keyword$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic s$1, ){
if(lcoc_core.keyword$QMARK_(s$1, )){
return s$1;
}
if(lcoc_core.symbol$QMARK_(s$1, )){
final dc.dynamic x7301$1=s$1;
late final dc.String? cast$1;
if((x7301$1 is lcoc_core.INamed$iface)){
cast$1=(((x7301$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), )) as dc.String?);
}
return (lcoc_core.keyword.$_invoke$2(cast$1, lcoc_core.name(s$1, ), ));
}
if((lcoc_core.$EQ_.$_invoke$2("/", s$1, ))){
return (lcoc_core.keyword.$_invoke$2(null, s$1, ));
}
if(lcoc_core.string$QMARK_(s$1, )){
final dc.String s$2=(s$1 as dc.String);
final dc.int idx$1=(s$2.indexOf("/", ));
if((idx$1<0)){
return (lcoc_core.keyword.$_invoke$2(null, s$2, ));
}
if((0==idx$1)){
return (lcoc_core.keyword.$_invoke$2("", (s$2.substring(1, )), ));
}
return (lcoc_core.keyword.$_invoke$2((s$2.substring(0, idx$1, )), (s$2.substring((1+idx$1), )), ));
}
return null;
}

dc.dynamic $_invoke$2(dc.dynamic ns$1, dc.dynamic name$1, ){
final dc.String? arg$2=(ns$1 as dc.String?);
final dc.String arg$1=(name$1 as dc.String);
late final dc.int $if_$1;
if(((ns$1!=false)&&(ns$1!=null))){
$if_$1=lcoc_core.hash_string$STAR_(ns$1, );
}else{
$if_$1=0;
}
final dc.int $1=lcoc_core.hash_combine($if_$1, lcoc_core.hash_string$STAR_(name$1, ), );
return lcoc_core.Keyword(arg$2, arg$1, $1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END keyword$ifn

// BEGIN keyword?
dc.bool keyword$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.Keyword);
}

// END keyword?

// BEGIN last
dc.dynamic last(dc.dynamic s$2, ){
dc.dynamic s$1=s$2;
do {
final dc.dynamic sn$1=lcoc_core.next(s$1, );
if((null==(sn$1 as dc.dynamic))){
return lcoc_core.first(s$1, );
}
s$1=sn$1;
continue;
} while(true);
}

// END last

// BEGIN lazy-cat
lcoc_core.IFn$iface lazy_cat=lcoc_core.lazy_cat$ifn(null, );

// END lazy-cat

// BEGIN lazy-seq
lcoc_core.IFn$iface lazy_seq=lcoc_core.lazy_seq$ifn(null, );

// END lazy-seq

// BEGIN lazy_cat$ifn
class lazy_cat$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const lazy_cat$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.lazy_cat$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic colls$1, ){
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "concat", )), )), (lcoc_core.map.$_invoke$2((dc.dynamic p1$8636_$SHARP_$1, ){
return (lcoc_core.list.$_invoke$2((lcoc_core.symbol.$_invoke$2("cljd.core", "lazy-seq", )), p1$8636_$SHARP_$1, ));
}, colls$1, )), ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END lazy_cat$ifn

// BEGIN lazy_seq$ifn
class lazy_seq$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const lazy_seq$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.lazy_seq$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "new", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "LazySeq", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$0());
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3(arg$1, $2, body$1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$6(arg$4, arg$3, arg$2, $3, (lcoc_core.list.$_invoke$1(null, )), (lcoc_core.list.$_invoke$1(-1, )), ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END lazy_seq$ifn

// BEGIN let
lcoc_core.IFn$iface let=lcoc_core.let$ifn(null, );

// END let

// BEGIN let$ifn
class let$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const let$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.let$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "let*", )), )), (lcoc_core.list.$_invoke$1(lcoc_core.destructure(bindings$1, ), )), body$1, ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END let$ifn

// BEGIN list
lcoc_core.IFn$iface list=lcoc_core.list$ifn(null, );

// END list

// BEGIN list$STAR_$ifn
class list$STAR_$ifn extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const list$STAR_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.list$STAR_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic more$1, ){
return lcoc_core.cons(a$1, lcoc_core.cons(b$1, lcoc_core.cons(c$1, lcoc_core.cons(d$1, lcoc_core.spread(more$1, ), ), ), ), );
}

dc.dynamic $_invoke$1(dc.dynamic args$1, ){
final dc.dynamic o7310$9=args$1;
if((o7310$9 is lcoc_core.ISeqable$iface)){
return ((o7310$9 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$9 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$9 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic a$2, dc.dynamic args$2, ){
return lcoc_core.cons(a$2, args$2, );
}

dc.dynamic $_invoke$3(dc.dynamic a$3, dc.dynamic b$2, dc.dynamic args$3, ){
return lcoc_core.cons(a$3, lcoc_core.cons(b$2, args$3, ), );
}

dc.dynamic $_invoke$4(dc.dynamic a$4, dc.dynamic b$3, dc.dynamic c$2, dc.dynamic args$4, ){
return lcoc_core.cons(a$4, lcoc_core.cons(b$3, lcoc_core.cons(c$2, args$4, ), ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END list$STAR_$ifn

// BEGIN list$ifn
class list$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const list$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.list$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic xs$1, ){
final dc.dynamic coll7370$1=xs$1;
dc.List f7371$1(dc.dynamic acc$1, dc.dynamic item$1, ){
(acc$1 as dc.List).add((item$1 as dc.dynamic), );
return (acc$1 as dc.List);
}
final dc.List<dc.dynamic> start7372$1=[];
late final dc.List arr$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
arr$1=(((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, )) as dc.List);
}else{
arr$1=(((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, )) as dc.List);
}
dc.int i$1=arr$1.length;
dc.dynamic r$1=lcoc_core.$_EMPTY_LIST;
do {
if((0<i$1)){
final dc.int i$1tmp=(i$1-1);
final lcoc_core.PersistentList coll7355$1=(r$1 as lcoc_core.PersistentList);
final dc.dynamic o7356$1=(arr$1[(i$1-1)]);
r$1=(coll7355$1.$_conj$1(o7356$1, ));
i$1=i$1tmp;
continue;
}
return r$1;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END list$ifn

// BEGIN list*
lcoc_core.IFn$iface list$STAR_=lcoc_core.list$STAR_$ifn(null, );

// END list*

// BEGIN list?
dc.bool list$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.PersistentList);
}

// END list?

// BEGIN loop
lcoc_core.IFn$iface loop=lcoc_core.loop$ifn(null, );

// END loop

// BEGIN loop$ifn
class loop$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const loop$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.loop$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic db$1=lcoc_core.destructure(bindings$1, );
if((lcoc_core.$EQ_.$_invoke$2(db$1, bindings$1, ))){
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "loop*", )), )), (lcoc_core.list.$_invoke$1(bindings$1, )), body$1, ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic vs$1=(lcoc_core.take_nth.$_invoke$2(2, (lcoc_core.drop.$_invoke$2(1, bindings$1, )), ));
final dc.dynamic bs$1=(lcoc_core.take_nth.$_invoke$2(2, bindings$1, ));
final dc.dynamic gs$1=(lcoc_core.map.$_invoke$2((dc.dynamic b$1, ){
if(lcoc_core.symbol$QMARK_(b$1, )){
return b$1;
}
if((lcoc_core.gensym is dc.Function)){
return (lcoc_core.gensym as dc.Function)();
}
if((lcoc_core.gensym is lcoc_core.IFn$iface)){
return ((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}, bs$1, ));
final dc.dynamic coll7370$1=(lcoc_core.map.$_invoke$4(lcoc_core.vector, bs$1, vs$1, gs$1, ));
dc.dynamic f7371$1(dc.dynamic ret$1, dc.dynamic p$8277_$1, ){
final dc.dynamic vec$8278_$1=p$8277_$1;
final dc.dynamic b$2=(lcoc_core.nth.$_invoke$3(vec$8278_$1, 0, null, ));
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$8278_$1, 1, null, ));
final dc.dynamic g$1=(lcoc_core.nth.$_invoke$3(vec$8278_$1, 2, null, ));
if(lcoc_core.symbol$QMARK_(b$2, )){
return (lcoc_core.conj.$_invoke$3(ret$1, g$1, v$1, ));
}
return (lcoc_core.conj.$_invoke$5(ret$1, g$1, v$1, b$2, g$1, ));
}
final lcoc_core.PersistentVector start7372$1=lcoc_core.$_EMPTY_VECTOR;
late final dc.dynamic bfs$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
bfs$1=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}else{
bfs$1=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1(bfs$1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "loop*", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(lcoc_core.vec((lcoc_core.interleave.$_invoke$2(gs$1, gs$1, )), ), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(lcoc_core.vec((lcoc_core.interleave.$_invoke$2(bs$1, gs$1, )), ), )), body$1, ));
late final dc.dynamic $if_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$2, arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$4, arg$3, $2, ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END loop$ifn

// BEGIN m3-fmix
dc.int m3_fmix(dc.dynamic h1$1, dc.dynamic len$1, ){
final dc.int hash$1=((h1$1 as dc.int)^(len$1 as dc.int));
final dc.int hash$2=(hash$1^(hash$1>>(31&16)));
final dc.int hash$3=(4294967295&(hash$2*2246822507));
final dc.int hash$4=(hash$3^(hash$3>>(31&13)));
final dc.int hash$5=(4294967295&(hash$4*3266489909));
return (hash$5^(hash$5>>(31&16)));
}

// END m3-fmix

// BEGIN m3-hash-int
dc.int m3_hash_int(dc.dynamic $in_$1, ){
if((0==($in_$1 as dc.dynamic))){
return $in_$1;
}
final dc.int upper$1=(4294967295&(($in_$1 as dc.int)>>(32&63)));
final dc.int lower$1=(4294967295&($in_$1 as dc.int));
final dc.int k$1=lcoc_core.m3_mix_k1(lower$1, );
final dc.int h$1=lcoc_core.m3_mix_h1(0, k$1, );
final dc.int k$2=lcoc_core.m3_mix_k1(upper$1, );
final dc.int h$2=lcoc_core.m3_mix_h1(h$1, k$2, );
return lcoc_core.m3_fmix(h$2, 8, );
}

// END m3-hash-int

// BEGIN m3-hash-u32
dc.int m3_hash_u32(dc.dynamic $in_$1, ){
if((0==($in_$1 as dc.dynamic))){
return 0;
}
final dc.int k1$1=lcoc_core.m3_mix_k1($in_$1, );
final dc.int h1$1=lcoc_core.m3_mix_h1(0, k1$1, );
return lcoc_core.m3_fmix(h1$1, 4, );
}

// END m3-hash-u32

// BEGIN m3-hash-unencoded-chars
dc.int m3_hash_unencoded_chars(dc.dynamic $in_$1, ){
late final dc.int h1$2;
dc.int i$1=1;
dc.int h1$1=0;
do {
if((i$1<($in_$1 as dc.String).length)){
final dc.int i$1tmp=(i$1+2);
h1$1=lcoc_core.m3_mix_h1(h1$1, lcoc_core.m3_mix_k1(((($in_$1 as dc.String).codeUnitAt((i$1-1), ))|(4294967295&((($in_$1 as dc.String).codeUnitAt(i$1, ))<<(31&16)))), ), );
i$1=i$1tmp;
continue;
}
h1$2=h1$1;
break;
} while(true);
late final dc.int h1$3;
if(((($in_$1 as dc.String).length&1)==1)){
h1$3=(h1$2^lcoc_core.m3_mix_k1((($in_$1 as dc.String).codeUnitAt((($in_$1 as dc.String).length-1), )), ));
}else{
h1$3=h1$2;
}
return lcoc_core.m3_fmix(h1$3, (4294967295&(2*($in_$1 as dc.String).length)), );
}

// END m3-hash-unencoded-chars

// BEGIN m3-mix-h1
dc.int m3_mix_h1(dc.dynamic h1$1, dc.dynamic k1$1, ){
final dc.int x$7882_$AUTO_$1=((h1$1 as dc.int)^(k1$1 as dc.int));
final dc.int n$7883_$AUTO_$1=13;
final dc.int $1=((4294967295&(x$7882_$AUTO_$1<<(31&n$7883_$AUTO_$1)))|(x$7882_$AUTO_$1>>(31&(-n$7883_$AUTO_$1))));
final dc.int $2=($1*5);
final dc.int $3=(4294967295&$2);
final dc.int $4=($3+3864292196);
return (4294967295&$4);
}

// END m3-mix-h1

// BEGIN m3-mix-k1
dc.int m3_mix_k1(dc.dynamic k1$1, ){
final dc.int x$7882_$AUTO_$1=(4294967295&((k1$1 as dc.int)*3432918353));
final dc.int n$7883_$AUTO_$1=15;
final dc.int $1=((4294967295&(x$7882_$AUTO_$1<<(31&n$7883_$AUTO_$1)))|(x$7882_$AUTO_$1>>(31&(-n$7883_$AUTO_$1))));
final dc.int $2=($1*461845907);
return (4294967295&$2);
}

// END m3-mix-k1

// BEGIN map
lcoc_core.IFn$iface map=lcoc_core.map$ifn(null, );

// END map

// BEGIN map$ifn
class map$ifn extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const map$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.map$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic c1$1, dc.dynamic c2$1, dc.dynamic c3$1, dc.dynamic colls$1, ){
lcoc_core.LazySeq step$1(dc.dynamic cs$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic ss$2=(lcoc_core.map.$_invoke$2(lcoc_core.seq, cs$1, ));
if(lcoc_core.every$QMARK_(lcoc_core.identity, ss$2, )){
return lcoc_core.cons((lcoc_core.map.$_invoke$2(lcoc_core.first, ss$2, )), step$1((lcoc_core.map.$_invoke$2(lcoc_core.rest, ss$2, )), ), );
}
return null;
} as dc.dynamic), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, ) step$2=step$1;
return (lcoc_core.map.$_invoke$2((dc.dynamic p1$8611_$SHARP_$1, ){
return (lcoc_core.apply.$_invoke$2(f$1, p1$8611_$SHARP_$1, ));
}, step$2((lcoc_core.list$STAR_.$_invoke$4(c1$1, c2$1, c3$1, colls$1, )), ), ));
}

dc.dynamic $_invoke$1(dc.dynamic f$2, ){
return (dc.dynamic rf$1, ){
final dc.dynamic f$3=lcoc_core.Reify$35(null, rf$1, f$2, );
return f$3;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$4, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
if(lcoc_core.chunked_seq$QMARK_(s$1, )){
final dc.dynamic c$1=lcoc_core.chunk_first(s$1, );
final dc.dynamic coll7390$1=c$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final lcoc_core.ChunkBuffer $1=lcoc_core.chunk_buffer(cast$1, );
final dc.dynamic $2=lcoc_core.chunk_reduce((dc.dynamic p1$8609_$SHARP_$1, dc.dynamic p2$8610_$SHARP_$1, ){
final dc.dynamic G$8614_$1=p1$8609_$SHARP_$1;
late final dc.dynamic $if_$2;
if((f$4 is dc.Function)){
$if_$2=(f$4 as dc.Function)(p2$8610_$SHARP_$1, );
}else if((f$4 is lcoc_core.IFn$iface)){
$if_$2=((f$4 as lcoc_core.IFn$iface).$_invoke$1(p2$8610_$SHARP_$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, p2$8610_$SHARP_$1, ));
}
lcoc_core.chunk_append(G$8614_$1, $if_$2, );
return G$8614_$1;
}, $1, c$1, );
final dc.dynamic $3=lcoc_core.chunk($2, );
return lcoc_core.chunk_cons($3, (lcoc_core.map.$_invoke$2(f$4, lcoc_core.chunk_rest(s$1, ), )), );
}
final dc.dynamic arg$2=lcoc_core.first(s$1, );
late final dc.dynamic $if_$3;
if((f$4 is dc.Function)){
$if_$3=(f$4 as dc.Function)(arg$2, );
}else if((f$4 is lcoc_core.IFn$iface)){
$if_$3=((f$4 as lcoc_core.IFn$iface).$_invoke$1(arg$2, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$4, ).$_invoke$1(f$4, arg$2, ));
}
return lcoc_core.cons($if_$3, (lcoc_core.map.$_invoke$2(f$4, lcoc_core.rest(s$1, ), )), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$3(dc.dynamic f$5, dc.dynamic c1$2, dc.dynamic c2$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$2=c1$2;
late final dc.dynamic s1$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
s1$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s1$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic o7310$3=c2$2;
late final dc.dynamic s2$1;
if((o7310$3 is lcoc_core.ISeqable$iface)){
s2$1=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s2$1=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic and$7187_$AUTO_$1=s1$1;
late final dc.dynamic $if_$4;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$4=s2$1;
}else{
$if_$4=and$7187_$AUTO_$1;
}
if((($if_$4!=false)&&($if_$4!=null))){
final dc.dynamic arg$4=lcoc_core.first(s1$1, );
final dc.dynamic arg$3=lcoc_core.first(s2$1, );
late final dc.dynamic $if_$5;
if((f$5 is dc.Function)){
$if_$5=(f$5 as dc.Function)(arg$4, arg$3, );
}else if((f$5 is lcoc_core.IFn$iface)){
$if_$5=((f$5 as lcoc_core.IFn$iface).$_invoke$2(arg$4, arg$3, ));
}else{
$if_$5=(lcoc_core.IFn.extensions(f$5, ).$_invoke$2(f$5, arg$4, arg$3, ));
}
return lcoc_core.cons($if_$5, (lcoc_core.map.$_invoke$3(f$5, lcoc_core.rest(s1$1, ), lcoc_core.rest(s2$1, ), )), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$4(dc.dynamic f$6, dc.dynamic c1$3, dc.dynamic c2$3, dc.dynamic c3$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$4=c1$3;
late final dc.dynamic s1$2;
if((o7310$4 is lcoc_core.ISeqable$iface)){
s1$2=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s1$2=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic o7310$5=c2$3;
late final dc.dynamic s2$2;
if((o7310$5 is lcoc_core.ISeqable$iface)){
s2$2=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s2$2=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic o7310$6=c3$2;
late final dc.dynamic s3$1;
if((o7310$6 is lcoc_core.ISeqable$iface)){
s3$1=((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s3$1=((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}
final dc.dynamic and$7187_$AUTO_$2=s1$2;
late final dc.dynamic $if_$6;
if(((and$7187_$AUTO_$2!=false)&&(and$7187_$AUTO_$2!=null))){
final dc.dynamic and$7187_$AUTO_$3=s2$2;
if(((and$7187_$AUTO_$3!=false)&&(and$7187_$AUTO_$3!=null))){
$if_$6=s3$1;
}else{
$if_$6=and$7187_$AUTO_$3;
}
}else{
$if_$6=and$7187_$AUTO_$2;
}
if((($if_$6!=false)&&($if_$6!=null))){
final dc.dynamic arg$7=lcoc_core.first(s1$2, );
final dc.dynamic arg$6=lcoc_core.first(s2$2, );
final dc.dynamic arg$5=lcoc_core.first(s3$1, );
late final dc.dynamic $if_$7;
if((f$6 is dc.Function)){
$if_$7=(f$6 as dc.Function)(arg$7, arg$6, arg$5, );
}else if((f$6 is lcoc_core.IFn$iface)){
$if_$7=((f$6 as lcoc_core.IFn$iface).$_invoke$3(arg$7, arg$6, arg$5, ));
}else{
$if_$7=(lcoc_core.IFn.extensions(f$6, ).$_invoke$3(f$6, arg$7, arg$6, arg$5, ));
}
return lcoc_core.cons($if_$7, (lcoc_core.map.$_invoke$4(f$6, lcoc_core.rest(s1$2, ), lcoc_core.rest(s2$2, ), lcoc_core.rest(s3$1, ), )), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END map$ifn

// BEGIN map-entry?
dc.bool map_entry$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IMapEntry.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END map-entry?

// BEGIN map-indexed
lcoc_core.IFn$iface map_indexed=lcoc_core.map_indexed$ifn(null, );

// END map-indexed

// BEGIN map?
dc.bool map$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IMap.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END map?

// BEGIN map_indexed$ifn
class map_indexed$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const map_indexed$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.map_indexed$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile i$1=lcoc_core.volatile$BANG_(-1, );
final dc.dynamic f$2=lcoc_core.Reify$36(null, rf$1, i$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
late final lcoc_core.LazySeq Function(dc.dynamic, dc.dynamic, ) mapi$1;
mapi$1=(dc.dynamic idx$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$2=coll$2;
late final dc.dynamic temp$7215_$AUTO_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$2!=false)&&(temp$7215_$AUTO_$2!=null))){
final dc.dynamic s$2=temp$7215_$AUTO_$2;
if(lcoc_core.chunked_seq$QMARK_(s$2, )){
final dc.dynamic c$2=lcoc_core.chunk_first(s$2, );
final dc.dynamic coll7390$2=c$2;
late final dc.int cast$3;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$3=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$3=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
final lcoc_core.ChunkBuffer b$2=lcoc_core.chunk_buffer(cast$3, );
final dc.dynamic idx$3=lcoc_core.chunk_reduce((dc.dynamic i$3, dc.dynamic x$2, ){
late final dc.dynamic $if_$4;
if((f$3 is dc.Function)){
$if_$4=(f$3 as dc.Function)(i$3, x$2, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$4=((f$3 as lcoc_core.IFn$iface).$_invoke$2(i$3, x$2, ));
}else{
$if_$4=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, i$3, x$2, ));
}
lcoc_core.chunk_append(b$2, $if_$4, );
return (1+(i$3 as dc.num));
}, idx$1, c$2, );
return lcoc_core.chunk_cons(lcoc_core.chunk(b$2, ), mapi$1(idx$3, lcoc_core.chunk_rest(s$2, ), ), );
}
final dc.dynamic arg$2=lcoc_core.first(s$2, );
late final dc.dynamic $if_$5;
if((f$3 is dc.Function)){
$if_$5=(f$3 as dc.Function)(idx$1, arg$2, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$5=((f$3 as lcoc_core.IFn$iface).$_invoke$2(idx$1, arg$2, ));
}else{
$if_$5=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, idx$1, arg$2, ));
}
return lcoc_core.cons($if_$5, mapi$1((1+(idx$1 as dc.num)), lcoc_core.rest(s$2, ), ), );
}
return null;
} as dc.dynamic), null, -1, );
};
return mapi$1(0, coll$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END map_indexed$ifn

// BEGIN mapcat
lcoc_core.IFn$iface mapcat=lcoc_core.mapcat$ifn(null, );

// END mapcat

// BEGIN mapcat$ifn
class mapcat$ifn extends dc.Object with lcoc_core.IFnMixin_uY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const mapcat$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.mapcat$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic colls$1, ){
return (lcoc_core.apply.$_invoke$2(lcoc_core.concat, (lcoc_core.apply.$_invoke$3(lcoc_core.map, f$1, colls$1, )), ));
}

dc.dynamic $_invoke$1(dc.dynamic f$2, ){
return (lcoc_core.comp.$_invoke$2((lcoc_core.map.$_invoke$1(f$2, )), lcoc_core.cat, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END mapcat$ifn

// BEGIN mapv
lcoc_core.IFn$iface mapv=lcoc_core.mapv$ifn(null, );

// END mapv

// BEGIN mapv$ifn
class mapv$ifn extends dc.Object with lcoc_core.IFnMixin_uuXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const mapv$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.mapv$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic c1$1, dc.dynamic c2$1, dc.dynamic c3$1, dc.dynamic colls$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.apply.$_invoke$6(lcoc_core.map, f$1, c1$1, c2$1, c3$1, colls$1, )), ));
}

dc.dynamic $_invoke$2(dc.dynamic f$2, dc.dynamic coll$1, ){
final dc.dynamic coll7370$1=coll$1;
dc.dynamic f7371$1(dc.dynamic v$1, dc.dynamic o$1, ){
late final dc.dynamic $if_$1;
if((f$2 is dc.Function)){
$if_$1=(f$2 as dc.Function)(o$1, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$1=((f$2 as lcoc_core.IFn$iface).$_invoke$1(o$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(f$2, ).$_invoke$1(f$2, o$1, ));
}
return (lcoc_core.conj$BANG_.$_invoke$2(v$1, $if_$1, ));
}
final dc.dynamic start7372$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
late final dc.dynamic $if_$2;
if((coll7370$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}else{
$if_$2=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
return lcoc_core.persistent$BANG_($if_$2, );
}

dc.dynamic $_invoke$3(dc.dynamic f$3, dc.dynamic c1$2, dc.dynamic c2$2, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$3(f$3, c1$2, c2$2, )), ));
}

dc.dynamic $_invoke$4(dc.dynamic f$4, dc.dynamic c1$3, dc.dynamic c2$3, dc.dynamic c3$2, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, (lcoc_core.map.$_invoke$4(f$4, c1$3, c2$3, c3$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END mapv$ifn

// BEGIN max
lcoc_core.IFn$iface max=lcoc_core.max$ifn(null, );

// END max

// BEGIN max$ifn
class max$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const max$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.max$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.max;
final dc.num start7372$1=d_math.max<dc.num>(x$2, y$2, );
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return d_math.max<dc.num>(x$6, y$4, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END max$ifn

// BEGIN max-key
lcoc_core.IFn$iface max_key=lcoc_core.max_key$ifn(null, );

// END max-key

// BEGIN max_key$ifn
class max_key$ifn extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const max_key$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.max_key$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic k$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
late final dc.num kx$1;
if((k$1 is dc.Function)){
kx$1=((k$1 as dc.Function)(x$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kx$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, )) as dc.num);
}else{
kx$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, x$1, )) as dc.num);
}
late final dc.num ky$1;
if((k$1 is dc.Function)){
ky$1=((k$1 as dc.Function)(y$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
ky$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(y$1, )) as dc.num);
}else{
ky$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, y$1, )) as dc.num);
}
late final lcoc_core.PersistentVector vec$8785_$1;
if((kx$1>ky$1)){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, x$1, ));
fl$1[1]=kx$1;
vec$8785_$1=lcoc_core.$_vec_owning(fl$1, );
}else{
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, y$1, ));
fl$2[1]=ky$1;
vec$8785_$1=lcoc_core.$_vec_owning(fl$2, );
}
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$8785_$1, 0, null, ));
final dc.dynamic kv$1=(lcoc_core.nth.$_invoke$3(vec$8785_$1, 1, null, ));
dc.dynamic v$2=v$1;
dc.num kv$2=(kv$1 as dc.num);
dc.dynamic more$2=more$1;
do {
if(((more$2!=false)&&(more$2!=null))){
final dc.dynamic w$1=lcoc_core.first(more$2, );
late final dc.num kw$1;
if((k$1 is dc.Function)){
kw$1=((k$1 as dc.Function)(w$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kw$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(w$1, )) as dc.num);
}else{
kw$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, w$1, )) as dc.num);
}
if((kw$1>=kv$2)){
v$2=w$1;
kv$2=kw$1;
more$2=lcoc_core.next(more$2, );
continue;
}
more$2=lcoc_core.next(more$2, );
continue;
}
return v$2;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic k$2, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic $_invoke$3(dc.dynamic k$3, dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.num cast$1;
if((k$3 is dc.Function)){
cast$1=((k$3 as dc.Function)(x$3, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$1=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(x$3, )) as dc.num);
}else{
cast$1=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, x$3, )) as dc.num);
}
late final dc.num cast$2;
if((k$3 is dc.Function)){
cast$2=((k$3 as dc.Function)(y$2, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$2=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(y$2, )) as dc.num);
}else{
cast$2=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, y$2, )) as dc.num);
}
final dc.bool $1=(cast$1>cast$2);
if($1){
return x$3;
}
return y$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END max_key$ifn

// BEGIN maybe-destructured
dc.dynamic maybe_destructured(dc.dynamic params$1, dc.dynamic body$1, ){
if(lcoc_core.every$QMARK_(lcoc_core.symbol$QMARK_, params$1, )){
return lcoc_core.cons(params$1, body$1, );
}
dc.dynamic params$2=params$1;
final dc.dynamic o7524$1=params$2;
late final dc.dynamic $if_$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
dc.dynamic new_params$1=lcoc_core.with_meta(lcoc_core.$_EMPTY_VECTOR, $if_$1, );
dc.dynamic lets$1=lcoc_core.$_EMPTY_VECTOR;
do {
if(((params$2!=false)&&(params$2!=null))){
if(lcoc_core.symbol$QMARK_(lcoc_core.first(params$2, ), )){
final dc.dynamic params$2tmp=lcoc_core.next(params$2, );
final dc.dynamic coll7355$1=new_params$1;
final dc.dynamic o7356$1=lcoc_core.first(params$2, );
if((coll7355$1 is lcoc_core.ICollection$iface)){
new_params$1=((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}else{
new_params$1=((lcoc_core.ICollection.extensions((coll7355$1 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$1 as dc.dynamic), (o7356$1 as dc.dynamic), ));
}
params$2=params$2tmp;
continue;
}
late final dc.dynamic gparam$1;
if((lcoc_core.gensym is dc.Function)){
gparam$1=(lcoc_core.gensym as dc.Function)("p__", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
gparam$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("p__", ));
}else{
gparam$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "p__", ));
}
final dc.dynamic params$2tmp=lcoc_core.next(params$2, );
final dc.dynamic coll7355$2=new_params$1;
final dc.dynamic o7356$2=gparam$1;
if((coll7355$2 is lcoc_core.ICollection$iface)){
new_params$1=((coll7355$2 as lcoc_core.ICollection$iface).$_conj$1(o7356$2, ));
}else{
new_params$1=((lcoc_core.ICollection.extensions((coll7355$2 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$2 as dc.dynamic), o7356$2, ));
}
final dc.dynamic coll7355$3=lets$1;
final dc.dynamic o7356$3=lcoc_core.first(params$2, );
late final dc.dynamic coll7355$4;
if((coll7355$3 is lcoc_core.ICollection$iface)){
coll7355$4=((coll7355$3 as lcoc_core.ICollection$iface).$_conj$1((o7356$3 as dc.dynamic), ));
}else{
coll7355$4=((lcoc_core.ICollection.extensions((coll7355$3 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$3 as dc.dynamic), (o7356$3 as dc.dynamic), ));
}
final dc.dynamic o7356$4=gparam$1;
if((coll7355$4 is lcoc_core.ICollection$iface)){
lets$1=((coll7355$4 as lcoc_core.ICollection$iface).$_conj$1(o7356$4, ));
}else{
lets$1=((lcoc_core.ICollection.extensions(coll7355$4, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$4, o7356$4, ));
}
params$2=params$2tmp;
continue;
}
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(new_params$1, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), )), (lcoc_core.list.$_invoke$1(lets$1, )), body$1, ));
late final dc.dynamic $if_$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
} while(true);
}

// END maybe-destructured

// BEGIN memfn
lcoc_core.IFn$iface memfn=lcoc_core.memfn$ifn(null, );

// END memfn

// BEGIN memfn$ifn
class memfn$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const memfn$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.memfn$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic name$1, dc.dynamic args$1, ){
late final dc.dynamic $if_$2;
if((lcoc_core.gensym is dc.Function)){
$if_$2=(lcoc_core.gensym as dc.Function)("target", );
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
$if_$2=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$1("target", ));
}else{
$if_$2=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$1(lcoc_core.gensym, "target", ));
}
final dc.dynamic o7524$1=name$1;
late final dc.dynamic $if_$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
final dc.dynamic t$1=lcoc_core.with_meta($if_$2, $if_$1, );
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(t$1, )), args$1, ));
late final dc.dynamic $if_$3;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(t$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(name$1, )), args$1, ));
late final dc.dynamic $if_$4;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$2, arg$1, $2, ));
late final dc.dynamic $if_$5;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$3, $4, $3, ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END memfn$ifn

// BEGIN memoize
dc.dynamic memoize(dc.dynamic f$1, ){
final lcoc_core.Atom mem$1=(lcoc_core.atom.$_invoke$1(lcoc_core.$_EMPTY_MAP, ));
final dc.dynamic f$2=lcoc_core.Reify$37(null, mem$1, f$1, );
return f$2;
}

// END memoize

// BEGIN merge
lcoc_core.IFn$iface merge=lcoc_core.merge$ifn(null, );

// END merge

// BEGIN merge$ifn
class merge$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const merge$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.merge$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic maps$1, ){
final dc.dynamic test$1=lcoc_core.some(lcoc_core.identity, maps$1, );
if(((test$1!=false)&&(test$1!=null))){
final dc.dynamic coll7374$1=maps$1;
dc.dynamic f7375$1(dc.dynamic p1$8524_$SHARP_$1, dc.dynamic p2$8525_$SHARP_$1, ){
final dc.dynamic or$7228_$AUTO_$1=p1$8524_$SHARP_$1;
late final dc.dynamic coll7355$1;
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
coll7355$1=or$7228_$AUTO_$1;
}else{
coll7355$1=lcoc_core.$_EMPTY_MAP;
}
final dc.dynamic o7356$1=p2$8525_$SHARP_$1;
if((coll7355$1 is lcoc_core.ICollection$iface)){
return ((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}
return ((lcoc_core.ICollection.extensions(coll7355$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$1, (o7356$1 as dc.dynamic), ));
}
if((coll7374$1 is lcoc_core.IReduce$iface)){
return ((coll7374$1 as lcoc_core.IReduce$iface).$_reduce$1(f7375$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7374$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$1((coll7374$1 as dc.dynamic), f7375$1, ));
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END merge$ifn

// BEGIN merge-with
lcoc_core.IFn$iface merge_with=lcoc_core.merge_with$ifn(null, );

// END merge-with

// BEGIN merge_with$ifn
class merge_with$ifn extends dc.Object with lcoc_core.IFnMixin_uZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const merge_with$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.merge_with$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic maps$1, ){
final dc.dynamic test$1=lcoc_core.some(lcoc_core.identity, maps$1, );
if(((test$1!=false)&&(test$1!=null))){
dc.dynamic merge_entry$1(dc.dynamic m$1, dc.dynamic e$1, ){
final dc.dynamic k$1=lcoc_core.key(e$1, );
final dc.dynamic v$1=lcoc_core.val(e$1, );
if(lcoc_core.contains$QMARK_(m$1, k$1, )){
final dc.dynamic coll7440$1=m$1;
final dc.dynamic k7441$1=k$1;
final dc.dynamic arg$12=(lcoc_core.$get_.$_invoke$2(m$1, k$1, ));
late final dc.dynamic v7442$1;
if((f$1 is dc.Function)){
v7442$1=(f$1 as dc.Function)(arg$12, v$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
v7442$1=((f$1 as lcoc_core.IFn$iface).$_invoke$2(arg$12, v$1, ));
}else{
v7442$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$2(f$1, arg$12, v$1, ));
}
if((coll7440$1 is lcoc_core.IAssociative$iface)){
return ((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$1 as dc.dynamic), v7442$1, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$1 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$1 as dc.dynamic), (k7441$1 as dc.dynamic), v7442$1, ));
}
final dc.dynamic coll7440$2=m$1;
final dc.dynamic k7441$2=k$1;
final dc.dynamic v7442$2=v$1;
if((coll7440$2 is lcoc_core.IAssociative$iface)){
return ((coll7440$2 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$2 as dc.dynamic), (v7442$2 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$2 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$2 as dc.dynamic), (k7441$2 as dc.dynamic), (v7442$2 as dc.dynamic), ));
}
dc.dynamic merge2$1(dc.dynamic m1$1, dc.dynamic m2$1, ){
final dc.dynamic o7310$13=m2$1;
late final dc.dynamic coll7370$1;
if((o7310$13 is lcoc_core.ISeqable$iface)){
coll7370$1=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7370$1=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) f7371$1=merge_entry$1;
final dc.dynamic or$7228_$AUTO_$1=m1$1;
late final dc.dynamic start7372$1;
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
start7372$1=or$7228_$AUTO_$1;
}else{
start7372$1=lcoc_core.$_EMPTY_MAP;
}
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions(coll7370$1, ) as lcoc_core.IReduce$ext).$_reduce$2(coll7370$1, f7371$1, start7372$1, ));
}
final dc.dynamic coll7374$1=maps$1;
final dc.dynamic Function(dc.dynamic, dc.dynamic, ) f7375$1=merge2$1;
if((coll7374$1 is lcoc_core.IReduce$iface)){
return ((coll7374$1 as lcoc_core.IReduce$iface).$_reduce$1(f7375$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7374$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$1((coll7374$1 as dc.dynamic), f7375$1, ));
}
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END merge_with$ifn

// BEGIN meta
dc.dynamic meta(dc.dynamic obj$1, ){
final dc.dynamic o7524$1=obj$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
return ((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}
return ((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}

// END meta

// BEGIN min
lcoc_core.IFn$iface min=lcoc_core.min$ifn(null, );

// END min

// BEGIN min$ifn
class min$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const min$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.min$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.num x$2=(x$1 as dc.num);
final dc.num y$2=(y$1 as dc.num);
final dc.dynamic coll7370$1=more$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.min;
final dc.num start7372$1=d_math.min<dc.num>(x$2, y$2, );
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

dc.dynamic $_invoke$1(dc.dynamic x$3, ){
final dc.num x$4=(x$3 as dc.num);
return x$4;
}

dc.dynamic $_invoke$2(dc.dynamic x$5, dc.dynamic y$3, ){
final dc.num x$6=(x$5 as dc.num);
final dc.num y$4=(y$3 as dc.num);
return d_math.min<dc.num>(x$6, y$4, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END min$ifn

// BEGIN min-key
lcoc_core.IFn$iface min_key=lcoc_core.min_key$ifn(null, );

// END min-key

// BEGIN min_key$ifn
class min_key$ifn extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const min_key$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.min_key$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic k$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
late final dc.num kx$1;
if((k$1 is dc.Function)){
kx$1=((k$1 as dc.Function)(x$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kx$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(x$1, )) as dc.num);
}else{
kx$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, x$1, )) as dc.num);
}
late final dc.num ky$1;
if((k$1 is dc.Function)){
ky$1=((k$1 as dc.Function)(y$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
ky$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(y$1, )) as dc.num);
}else{
ky$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, y$1, )) as dc.num);
}
late final lcoc_core.PersistentVector vec$8781_$1;
if((kx$1<ky$1)){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, x$1, ));
fl$1[1]=kx$1;
vec$8781_$1=lcoc_core.$_vec_owning(fl$1, );
}else{
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, y$1, ));
fl$2[1]=ky$1;
vec$8781_$1=lcoc_core.$_vec_owning(fl$2, );
}
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$8781_$1, 0, null, ));
final dc.dynamic kv$1=(lcoc_core.nth.$_invoke$3(vec$8781_$1, 1, null, ));
dc.dynamic v$2=v$1;
dc.num kv$2=(kv$1 as dc.num);
dc.dynamic more$2=more$1;
do {
if(((more$2!=false)&&(more$2!=null))){
final dc.dynamic w$1=lcoc_core.first(more$2, );
late final dc.num kw$1;
if((k$1 is dc.Function)){
kw$1=((k$1 as dc.Function)(w$1, ) as dc.num);
}else if((k$1 is lcoc_core.IFn$iface)){
kw$1=(((k$1 as lcoc_core.IFn$iface).$_invoke$1(w$1, )) as dc.num);
}else{
kw$1=((lcoc_core.IFn.extensions(k$1, ).$_invoke$1(k$1, w$1, )) as dc.num);
}
if((kw$1<=kv$2)){
v$2=w$1;
kv$2=kw$1;
more$2=lcoc_core.next(more$2, );
continue;
}
more$2=lcoc_core.next(more$2, );
continue;
}
return v$2;
} while(true);
}

dc.dynamic $_invoke$2(dc.dynamic k$2, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic $_invoke$3(dc.dynamic k$3, dc.dynamic x$3, dc.dynamic y$2, ){
late final dc.num cast$1;
if((k$3 is dc.Function)){
cast$1=((k$3 as dc.Function)(x$3, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$1=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(x$3, )) as dc.num);
}else{
cast$1=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, x$3, )) as dc.num);
}
late final dc.num cast$2;
if((k$3 is dc.Function)){
cast$2=((k$3 as dc.Function)(y$2, ) as dc.num);
}else if((k$3 is lcoc_core.IFn$iface)){
cast$2=(((k$3 as lcoc_core.IFn$iface).$_invoke$1(y$2, )) as dc.num);
}else{
cast$2=((lcoc_core.IFn.extensions(k$3, ).$_invoke$1(k$3, y$2, )) as dc.num);
}
final dc.bool $1=(cast$1<cast$2);
if($1){
return x$3;
}
return y$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END min_key$ifn

// BEGIN mix-collection-hash
dc.int mix_collection_hash(dc.dynamic hash_basis$1, dc.dynamic count$1, ){
final dc.int k1$1=lcoc_core.m3_mix_k1(hash_basis$1, );
final dc.int h1$1=lcoc_core.m3_mix_h1(0, k1$1, );
return lcoc_core.m3_fmix(h1$1, count$1, );
}

// END mix-collection-hash

// BEGIN mod
dc.int mod(dc.dynamic num$1, dc.dynamic div$1, ){
return ((num$1 as dc.int)%(div$1 as dc.int));
}

// END mod

// BEGIN name
dc.String name(dc.dynamic x$1, ){
if(lcoc_core.string$QMARK_(x$1, )){
return x$1;
}
final dc.dynamic x7296$1=x$1;
if((x7296$1 is lcoc_core.INamed$iface)){
return ((x7296$1 as lcoc_core.INamed$iface).$_name$0());
}
return ((lcoc_core.INamed.extensions((x7296$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_name$0((x7296$1 as dc.dynamic), ));
}

// END name

// BEGIN namespace
dc.String? namespace(dc.dynamic x$1, ){
final dc.dynamic x7301$1=x$1;
if((x7301$1 is lcoc_core.INamed$iface)){
return ((x7301$1 as lcoc_core.INamed$iface).$_namespace$0());
}
return ((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), ));
}

// END namespace

// BEGIN nary-cmp-inline
dc.dynamic nary_cmp_inline(dc.dynamic op$1, ){
final dc.dynamic f$1=lcoc_core.Reify$4(null, op$1, );
return f$1;
}

// END nary-cmp-inline

// BEGIN nary-inline
lcoc_core.IFn$iface nary_inline=lcoc_core.nary_inline$ifn(null, );

// END nary-inline

// BEGIN nary_inline$ifn
class nary_inline$ifn extends dc.Object with lcoc_core.IFnMixin_uXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const nary_inline$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.nary_inline$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic op$1, ){
return (lcoc_core.nary_inline.$_invoke$3(null, null, op$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic unary_fn$1, dc.dynamic op$2, ){
return (lcoc_core.nary_inline.$_invoke$3(null, unary_fn$1, op$2, ));
}

dc.dynamic $_invoke$3(dc.dynamic zero$1, dc.dynamic unary_fn$2, dc.dynamic op$3, ){
final dc.dynamic f$1=lcoc_core.Reify$3(null, unary_fn$2, zero$1, op$3, );
return f$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END nary_inline$ifn

// BEGIN nat-int?
dc.bool nat_int$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.int$QMARK_(x$1, );
if(and$7187_$AUTO_$1){
if((0>(x$1 as dc.num))){
return false;
}
return true;
}
return and$7187_$AUTO_$1;
}

// END nat-int?

// BEGIN neg-int?
dc.bool neg_int$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.int$QMARK_(x$1, );
if(and$7187_$AUTO_$1){
return (0>(x$1 as dc.num));
}
return and$7187_$AUTO_$1;
}

// END neg-int?

// BEGIN neg?
dc.bool neg$QMARK_(dc.dynamic n$1, ){
return (0>(n$1 as dc.num));
}

// END neg?

// BEGIN new-path
lcoc_core.VectorNode new_path(dc.dynamic level$1, dc.dynamic node$1, ){
dc.int ll$1=(level$1 as dc.int);
lcoc_core.VectorNode ret$1=(node$1 as lcoc_core.VectorNode);
do {
if((0==ll$1)){
return ret$1;
}
ll$1=(ll$1-5);
final dc.List<lcoc_core.VectorNode> fl$1=(dc.List<lcoc_core.VectorNode>.filled(1, ret$1, ));
ret$1=lcoc_core.VectorNode(null, fl$1, );
continue;
} while(true);
}

// END new-path

// BEGIN newline
dc.dynamic newline(){
lcoc_core.$STAR_out$STAR_.writeln();
return null;
}

// END newline

// BEGIN next
dc.dynamic next(dc.dynamic coll$1, ){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic coll7329$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
coll7329$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7329$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((coll7329$1 is lcoc_core.ISeq$iface)){
return ((coll7329$1 as lcoc_core.ISeq$iface).$_next$0());
}
return ((lcoc_core.ISeq.extensions(coll7329$1, ) as lcoc_core.ISeq$ext).$_next$0(coll7329$1, ));
}

// END next

// BEGIN nfirst
dc.dynamic nfirst(dc.dynamic coll$1, ){
return lcoc_core.next(lcoc_core.first(coll$1, ), );
}

// END nfirst

// BEGIN nil?
dc.bool nil$QMARK_(dc.dynamic x$1, ){
return (null==(x$1 as dc.dynamic));
}

// END nil?

// BEGIN nnext
dc.dynamic nnext(dc.dynamic coll$1, ){
return lcoc_core.next(lcoc_core.next(coll$1, ), );
}

// END nnext

// BEGIN not
dc.bool not(dc.dynamic x$1, ){
if(((x$1!=false)&&(x$1!=null))){
return false;
}
return true;
}

// END not

// BEGIN not$EQ_$ifn
class not$EQ_$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const not$EQ_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.not$EQ_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic test$1=(lcoc_core.apply.$_invoke$4(lcoc_core.$EQ_, x$1, y$1, more$1, ));
if(((test$1!=false)&&(test$1!=null))){
return false;
}
return true;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return false;
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
if((lcoc_core.$EQ_.$_invoke$2(x$3, y$2, ))){
return false;
}
return true;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END not$EQ_$ifn

// BEGIN not-any?
var not_any$QMARK_=(lcoc_core.comp.$_invoke$2(lcoc_core.not, lcoc_core.some, ));

// END not-any?

// BEGIN not-empty
dc.dynamic not_empty(dc.dynamic coll$1, ){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return coll$1;
}
return null;
}

// END not-empty

// BEGIN not-every?
dc.bool not_every$QMARK_(dc.dynamic pred$1, dc.dynamic coll$1, ){
if(lcoc_core.every$QMARK_(pred$1, coll$1, )){
return false;
}
return true;
}

// END not-every?

// BEGIN not=
lcoc_core.IFn$iface not$EQ_=lcoc_core.not$EQ_$ifn(null, );

// END not=

// BEGIN nth
lcoc_core.IFn$iface nth=lcoc_core.nth$ifn(null, );

// END nth

// BEGIN nth$ifn
class nth$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const nth$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.nth$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic coll$1, dc.dynamic n$1, ){
final dc.num n$2=(n$1 as dc.num);
final dc.dynamic coll7481$1=coll$1;
final dc.int n7482$1=(n$2.toInt());
if((coll7481$1 is lcoc_core.IIndexed$iface)){
return ((coll7481$1 as lcoc_core.IIndexed$iface).$_nth$1(n7482$1, ));
}
return ((lcoc_core.IIndexed.extensions((coll7481$1 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$1((coll7481$1 as dc.dynamic), n7482$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic coll$2, dc.dynamic n$3, dc.dynamic not_found$1, ){
final dc.num n$4=(n$3 as dc.num);
final dc.dynamic coll7477$1=coll$2;
final dc.int n7478$1=(n$4.toInt());
final dc.dynamic not_found7479$1=not_found$1;
if((coll7477$1 is lcoc_core.IIndexed$iface)){
return ((coll7477$1 as lcoc_core.IIndexed$iface).$_nth$2(n7478$1, (not_found7479$1 as dc.dynamic), ));
}
return ((lcoc_core.IIndexed.extensions((coll7477$1 as dc.dynamic), ) as lcoc_core.IIndexed$ext).$_nth$2((coll7477$1 as dc.dynamic), n7478$1, (not_found7479$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END nth$ifn

// BEGIN nthnext
dc.dynamic nthnext(dc.dynamic coll$1, dc.dynamic n$1, ){
dc.int n$2=(n$1 as dc.int);
final dc.dynamic o7310$1=coll$1;
dc.dynamic xs$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
xs$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
xs$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
final dc.dynamic and$7187_$AUTO_$1=xs$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=(0<n$2);
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
n$2=(n$2-1);
xs$1=lcoc_core.next(xs$1, );
continue;
}
return xs$1;
} while(true);
}

// END nthnext

// BEGIN nthrest
dc.dynamic nthrest(dc.dynamic coll$1, dc.dynamic n$1, ){
dc.int n$2=(n$1 as dc.int);
dc.dynamic xs$1=coll$1;
do {
final dc.bool and$7187_$AUTO_$1=(0<n$2);
late final dc.dynamic temp$7210_$AUTO_$1;
if(and$7187_$AUTO_$1){
final dc.dynamic o7310$1=xs$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7210_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7210_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
}else{
temp$7210_$AUTO_$1=and$7187_$AUTO_$1;
}
if(((temp$7210_$AUTO_$1!=false)&&(temp$7210_$AUTO_$1!=null))){
final dc.dynamic xs$2=temp$7210_$AUTO_$1;
n$2=(n$2-1);
xs$1=lcoc_core.rest(xs$2, );
continue;
}
return xs$1;
} while(true);
}

// END nthrest

// BEGIN number?
dc.bool number$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.num);
}

// END number?

// BEGIN object-array
lcoc_core.IFn$iface object_array=lcoc_core.object_array$ifn(null, );

// END object-array

// BEGIN object_array$ifn
class object_array$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const object_array$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.object_array$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic size_or_seq$1, ){
if(lcoc_core.int$QMARK_(size_or_seq$1, )){
return (dc.List<dc.Object>.filled((size_or_seq$1 as dc.int), (dc.dynamic as dc.Object), ));
}
return (dc.List<dc.Object>.from((size_or_seq$1 as dc.Iterable<dc.dynamic>), growable: false, ));
}

dc.dynamic $_invoke$2(dc.dynamic size$1, dc.dynamic init_val_or_seq$1, ){
if(((lcoc_core.ISeq.satisfies((init_val_or_seq$1 as dc.dynamic), )) as dc.bool)){
final dc.List<dc.Object> a$7797_$AUTO_$1=(dc.List<dc.Object>.filled((size$1 as dc.int), (dc.dynamic as dc.Object), ));
dc.dynamic i$7798_$AUTO_$1=0;
final dc.dynamic o7310$1=init_val_or_seq$1;
dc.dynamic s$7799_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$7799_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$7799_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
final dc.dynamic and$7187_$AUTO_$1=s$7799_$AUTO_$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=((i$7798_$AUTO_$1 as dc.num)<(size$1 as dc.num));
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic v$7774_$AUTO_$1=lcoc_core.first(s$7799_$AUTO_$1, );
a$7797_$AUTO_$1[(i$7798_$AUTO_$1 as dc.int)]=(v$7774_$AUTO_$1 as dc.Object);
i$7798_$AUTO_$1=(1+(i$7798_$AUTO_$1 as dc.num));
s$7799_$AUTO_$1=lcoc_core.next(s$7799_$AUTO_$1, );
continue;
}
return a$7797_$AUTO_$1;
} while(true);
}else{
return (dc.List<dc.Object>.filled((size$1 as dc.int), (init_val_or_seq$1 as dc.Object), ));
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END object_array$ifn

// BEGIN odd?
dc.bool odd$QMARK_(dc.dynamic num$1, ){
return (num$1 as dc.int).isOdd;
}

// END odd?

// BEGIN or
lcoc_core.IFn$iface or=lcoc_core.or$ifn(null, );

// END or

// BEGIN or$ifn
class or$ifn extends dc.Object with lcoc_core.IFnMixin_uuXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const or$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.or$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic x$1, dc.dynamic next$1, ){
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "or__8248__auto__", )), )), (lcoc_core.list.$_invoke$1(x$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "or__8248__auto__", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "or__8248__auto__", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "or", )), )), next$1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, arg$1, $2, ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$4, $4, $3, ));
if((o7310$4 is lcoc_core.ISeqable$iface)){
return ((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic $AMPERSAND_form$2, dc.dynamic $AMPERSAND_env$2, ){
return null;
}

dc.dynamic $_invoke$3(dc.dynamic $AMPERSAND_form$3, dc.dynamic $AMPERSAND_env$3, dc.dynamic x$2, ){
return x$2;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END or$ifn

// BEGIN partial
lcoc_core.IFn$iface partial=lcoc_core.partial$ifn(null, );

// END partial

// BEGIN partial$ifn
class partial$ifn extends dc.Object with lcoc_core.IFnMixin_uXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

const partial$ifn(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$5, ){
return lcoc_core.partial$ifn((m$2101_$AUTO_$5 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic f$1, dc.dynamic arg1$1, dc.dynamic arg2$1, dc.dynamic arg3$1, dc.dynamic more$1, ){
final dc.dynamic f$2=lcoc_core.Reify$9(null, more$1, f$1, arg3$1, arg1$1, arg2$1, );
return f$2;
}

dc.dynamic $_invoke$1(dc.dynamic f$3, ){
return f$3;
}

dc.dynamic $_invoke$2(dc.dynamic f$4, dc.dynamic arg1$2, ){
final dc.dynamic f$5=lcoc_core.Reify$10(null, f$4, arg1$2, );
return f$5;
}

dc.dynamic $_invoke$3(dc.dynamic f$6, dc.dynamic arg1$3, dc.dynamic arg2$2, ){
final dc.dynamic f$7=lcoc_core.Reify$11(null, f$6, arg1$3, arg2$2, );
return f$7;
}

dc.dynamic $_invoke$4(dc.dynamic f$8, dc.dynamic arg1$4, dc.dynamic arg2$3, dc.dynamic arg3$2, ){
final dc.dynamic f$9=lcoc_core.Reify$12(null, arg3$2, f$8, arg2$3, arg1$4, );
return f$9;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partial$ifn

// BEGIN partition
lcoc_core.IFn$iface partition=lcoc_core.partition$ifn(null, );

// END partition

// BEGIN partition$ifn
class partition$ifn extends dc.Object with lcoc_core.IFnMixin_uuXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const partition$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.partition$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic coll$1, ){
return (lcoc_core.partition.$_invoke$3(n$1, n$1, coll$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic n$2, dc.dynamic step$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$2;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
final dc.dynamic p$1=(lcoc_core.doall.$_invoke$1((lcoc_core.take.$_invoke$2(n$2, s$1, )), ));
final dc.dynamic coll7390$1=p$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.bool $1=(n$2==cast$1);
if($1){
return lcoc_core.cons(p$1, (lcoc_core.partition.$_invoke$3(n$2, step$1, lcoc_core.nthrest(s$1, step$1, ), )), );
}
return null;
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$4(dc.dynamic n$3, dc.dynamic step$2, dc.dynamic pad$1, dc.dynamic coll$3, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$2=coll$3;
late final dc.dynamic temp$7215_$AUTO_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$2!=false)&&(temp$7215_$AUTO_$2!=null))){
final dc.dynamic s$2=temp$7215_$AUTO_$2;
final dc.dynamic p$2=(lcoc_core.doall.$_invoke$1((lcoc_core.take.$_invoke$2(n$3, s$2, )), ));
final dc.dynamic coll7390$2=p$2;
late final dc.int cast$2;
if((coll7390$2 is lcoc_core.ICounted$iface)){
cast$2=(((coll7390$2 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$2=(((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), )) as dc.int);
}
final dc.bool $2=(n$3==cast$2);
if($2){
return lcoc_core.cons(p$2, (lcoc_core.partition.$_invoke$4(n$3, step$2, pad$1, lcoc_core.nthrest(s$2, step$2, ), )), );
}
return (lcoc_core.list.$_invoke$1((lcoc_core.take.$_invoke$2(n$3, (lcoc_core.concat.$_invoke$2(p$2, pad$1, )), )), ));
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partition$ifn

// BEGIN partition-all
lcoc_core.IFn$iface partition_all=lcoc_core.partition_all$ifn(null, );

// END partition-all

// BEGIN partition-by
lcoc_core.IFn$iface partition_by=lcoc_core.partition_by$ifn(null, );

// END partition-by

// BEGIN partition_all$ifn
class partition_all$ifn extends dc.Object with lcoc_core.IFnMixin_uXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const partition_all$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.partition_all$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final dc.List<dc.dynamic> a$1=[];
final dc.dynamic f$1=lcoc_core.Reify$43(null, n$1, rf$1, a$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$2, dc.dynamic coll$1, ){
return (lcoc_core.partition_all.$_invoke$3(n$2, n$2, coll$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic n$3, dc.dynamic step$1, dc.dynamic coll$2, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$2;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
final dc.dynamic seg$1=(lcoc_core.doall.$_invoke$1((lcoc_core.take.$_invoke$2(n$3, s$1, )), ));
return lcoc_core.cons(seg$1, (lcoc_core.partition_all.$_invoke$3(n$3, step$1, lcoc_core.nthrest(s$1, step$1, ), )), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partition_all$ifn

// BEGIN partition_by$ifn
class partition_by$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const partition_by$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.partition_by$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return (dc.dynamic rf$1, ){
final dc.List<dc.dynamic> a$1=[];
final lcoc_core.Volatile pv$1=lcoc_core.volatile$BANG_("none", );
final dc.dynamic f$2=lcoc_core.Reify$44(null, rf$1, pv$1, a$1, f$1, );
return f$2;
};
}

dc.dynamic $_invoke$2(dc.dynamic f$3, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
final dc.dynamic fst$1=lcoc_core.first(s$1, );
late final dc.dynamic fv$1;
if((f$3 is dc.Function)){
fv$1=(f$3 as dc.Function)(fst$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
fv$1=((f$3 as lcoc_core.IFn$iface).$_invoke$1(fst$1, ));
}else{
fv$1=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, fst$1, ));
}
final dc.dynamic run$1=lcoc_core.cons(fst$1, (lcoc_core.take_while.$_invoke$2((dc.dynamic p1$8654_$SHARP_$1, ){
late final dc.dynamic $if_$3;
if((f$3 is dc.Function)){
$if_$3=(f$3 as dc.Function)(p1$8654_$SHARP_$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
$if_$3=((f$3 as lcoc_core.IFn$iface).$_invoke$1(p1$8654_$SHARP_$1, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, p1$8654_$SHARP_$1, ));
}
return (lcoc_core.$EQ_.$_invoke$2(fv$1, $if_$3, ));
}, lcoc_core.next(s$1, ), )), );
return lcoc_core.cons(run$1, (lcoc_core.partition_by.$_invoke$2(f$3, lcoc_core.LazySeq(null, ((){
final dc.dynamic coll7390$1=run$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
return (lcoc_core.drop.$_invoke$2(cast$1, s$1, ));
} as dc.dynamic), null, -1, ), )), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END partition_by$ifn

// BEGIN peek
dc.dynamic peek(dc.dynamic coll$1, ){
final dc.dynamic coll7501$1=coll$1;
if((coll7501$1 is lcoc_core.IStack$iface)){
return ((coll7501$1 as lcoc_core.IStack$iface).$_peek$0());
}
return ((lcoc_core.IStack.extensions((coll7501$1 as dc.dynamic), ) as lcoc_core.IStack$ext).$_peek$0((coll7501$1 as dc.dynamic), ));
}

// END peek

// BEGIN persistent!
dc.dynamic persistent$BANG_(dc.dynamic coll$1, ){
final dc.dynamic tcoll7574$1=coll$1;
if((tcoll7574$1 is lcoc_core.ITransientCollection$iface)){
return ((tcoll7574$1 as lcoc_core.ITransientCollection$iface).$_persistent$BANG_$0());
}
return ((lcoc_core.ITransientCollection.extensions((tcoll7574$1 as dc.dynamic), ) as lcoc_core.ITransientCollection$ext).$_persistent$BANG_$0((tcoll7574$1 as dc.dynamic), ));
}

// END persistent!

// BEGIN pop
dc.dynamic pop(dc.dynamic coll$1, ){
final dc.dynamic coll7506$1=coll$1;
if((coll7506$1 is lcoc_core.IStack$iface)){
return ((coll7506$1 as lcoc_core.IStack$iface).$_pop$0());
}
return ((lcoc_core.IStack.extensions((coll7506$1 as dc.dynamic), ) as lcoc_core.IStack$ext).$_pop$0((coll7506$1 as dc.dynamic), ));
}

// END pop

// BEGIN pop!
dc.dynamic pop$BANG_(dc.dynamic coll$1, ){
final dc.dynamic tcoll7466$1=coll$1;
if((tcoll7466$1 is lcoc_core.ITransientVector$iface)){
return ((tcoll7466$1 as lcoc_core.ITransientVector$iface).$_pop$BANG_$0());
}
return ((lcoc_core.ITransientVector.extensions((tcoll7466$1 as dc.dynamic), ) as lcoc_core.ITransientVector$ext).$_pop$BANG_$0((tcoll7466$1 as dc.dynamic), ));
}

// END pop!

// BEGIN pop-tail
dc.dynamic pop_tail(dc.dynamic pv$1, dc.dynamic level$1, dc.dynamic node$1, ){
final dc.int n$1=((pv$1 as lcoc_core.PersistentVector).cnt-2);
final dc.int subidx$1=((n$1>>(31&(level$1 as dc.int)))&31);
if((5<(level$1 as dc.int))){
final dc.dynamic temp$7200_$AUTO_$1=lcoc_core.pop_tail((pv$1 as lcoc_core.PersistentVector), ((level$1 as dc.int)-5), ((node$1 as lcoc_core.VectorNode).arr[subidx$1]), );
if((null==(temp$7200_$AUTO_$1 as dc.dynamic))){
if((0<subidx$1)){
return lcoc_core.VectorNode(null, lcoc_core.ashrink((node$1 as lcoc_core.VectorNode).arr, subidx$1, ), );
}
return null;
}
final dc.dynamic new_child$1=temp$7200_$AUTO_$1;
return lcoc_core.VectorNode(null, lcoc_core.aresize((node$1 as lcoc_core.VectorNode).arr, subidx$1, (1+subidx$1), new_child$1, ), );
}
if((0<subidx$1)){
return lcoc_core.VectorNode(null, lcoc_core.ashrink((node$1 as lcoc_core.VectorNode).arr, subidx$1, ), );
}
return null;
}

// END pop-tail

// BEGIN pos-int?
dc.bool pos_int$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.int$QMARK_(x$1, );
if(and$7187_$AUTO_$1){
return (0<(x$1 as dc.num));
}
return and$7187_$AUTO_$1;
}

// END pos-int?

// BEGIN pos?
dc.bool pos$QMARK_(dc.dynamic n$1, ){
return (0<(n$1 as dc.num));
}

// END pos?

// BEGIN pr
lcoc_core.IFn$iface pr=lcoc_core.pr$ifn(null, );

// END pr

// BEGIN pr$ifn
class pr$ifn extends dc.Object with lcoc_core.IFnMixin_XZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const pr$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.pr$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$3, dc.dynamic more$3, ){
dc.dynamic x$1=x$3;
dc.dynamic more$1=more$3;
do {
final dc.dynamic o7290$1=x$1;
final dc.StringSink string_sink7291$1=lcoc_core.$STAR_out$STAR_;
if((o7290$1 is lcoc_core.IPrint$iface)){
(o7290$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7291$1, );
}else{
(lcoc_core.IPrint.extensions((o7290$1 as dc.dynamic), ) as lcoc_core.IPrint$ext).$_print$1((o7290$1 as dc.dynamic), string_sink7291$1, );
}
final dc.dynamic o7310$13=more$1;
late final dc.dynamic temp$7205_$AUTO_$1;
if((o7310$13 is lcoc_core.ISeqable$iface)){
temp$7205_$AUTO_$1=((o7310$13 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7205_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$13 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$13 as dc.dynamic), ));
}
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.dynamic vec$8763_$1=temp$7205_$AUTO_$1;
final dc.dynamic o7310$14=vec$8763_$1;
late final dc.dynamic seq$8764_$1;
if((o7310$14 is lcoc_core.ISeqable$iface)){
seq$8764_$1=((o7310$14 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8764_$1=((lcoc_core.ISeqable.extensions(o7310$14, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$14, ));
}
final dc.dynamic first$8765_$1=lcoc_core.first(seq$8764_$1, );
final dc.dynamic seq$8764_$2=lcoc_core.next(seq$8764_$1, );
final dc.dynamic x$2=first$8765_$1;
final dc.dynamic more$2=seq$8764_$2;
lcoc_core.$STAR_out$STAR_.write(" ", );
x$1=x$2;
more$1=more$2;
continue;
} while(true);
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END pr$ifn

// BEGIN pr-str
lcoc_core.IFn$iface pr_str=lcoc_core.pr_str$ifn(null, );

// END pr-str

// BEGIN pr_str$ifn
class pr_str$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const pr_str$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.pr_str$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic xs$1, ){
final dc.StringBuffer s$8066_$AUTO_$1=dc.StringBuffer();
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), ));
fl$1[1]=s$8066_$AUTO_$1;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8050_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
lcoc_core.apply.$_invoke$2(lcoc_core.pr, xs$1, );
return (s$8066_$AUTO_$1.toString());
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8050_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END pr_str$ifn

// BEGIN preserving-reduced
dc.dynamic preserving_reduced(dc.dynamic rf$1, ){
return (dc.dynamic p1$8632_$SHARP_$1, dc.dynamic p2$8633_$SHARP_$1, ){
late final dc.dynamic ret$1;
if((rf$1 is dc.Function)){
ret$1=(rf$1 as dc.Function)(p1$8632_$SHARP_$1, p2$8633_$SHARP_$1, );
}else if((rf$1 is lcoc_core.IFn$iface)){
ret$1=((rf$1 as lcoc_core.IFn$iface).$_invoke$2(p1$8632_$SHARP_$1, p2$8633_$SHARP_$1, ));
}else{
ret$1=(lcoc_core.IFn.extensions(rf$1, ).$_invoke$2(rf$1, p1$8632_$SHARP_$1, p2$8633_$SHARP_$1, ));
}
if(lcoc_core.reduced$QMARK_(ret$1, )){
return lcoc_core.reduced(ret$1, );
}
return ret$1;
};
}

// END preserving-reduced

// BEGIN print
lcoc_core.IFn$iface print=lcoc_core.print$ifn(null, );

// END print

// BEGIN print$ifn
class print$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const print$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.print$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic more$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), ));
fl$1[1]=null;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8050_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
return (lcoc_core.apply.$_invoke$2(lcoc_core.pr, more$1, ));
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8050_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END print$ifn

// BEGIN print-map
dc.dynamic print_map(dc.dynamic m$1, dc.dynamic sink$1, ){
(sink$1 as dc.StringSink).write("{", );
if(((lcoc_core.IKVReduce.satisfies((m$1 as dc.dynamic), )) as dc.bool)){
lcoc_core.reduce_kv((dc.dynamic need_sep$1, dc.dynamic k$1, dc.dynamic v$1, ){
if(((need_sep$1!=false)&&(need_sep$1!=null))){
(sink$1 as dc.StringSink).write(", ", );
}else{
}
final dc.dynamic o7290$1=k$1;
final dc.StringSink string_sink7291$1=(sink$1 as dc.StringSink);
if((o7290$1 is lcoc_core.IPrint$iface)){
(o7290$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7291$1, );
}else{
(lcoc_core.IPrint.extensions((o7290$1 as dc.dynamic), ) as lcoc_core.IPrint$ext).$_print$1((o7290$1 as dc.dynamic), string_sink7291$1, );
}
(sink$1 as dc.StringSink).write(" ", );
final dc.dynamic o7290$2=v$1;
final dc.StringSink string_sink7291$2=(sink$1 as dc.StringSink);
if((o7290$2 is lcoc_core.IPrint$iface)){
(o7290$2 as lcoc_core.IPrint$iface).$_print$1(string_sink7291$2, );
}else{
(lcoc_core.IPrint.extensions((o7290$2 as dc.dynamic), ) as lcoc_core.IPrint$ext).$_print$1((o7290$2 as dc.dynamic), string_sink7291$2, );
}
return true;
}, false, m$1, );
}else{
final dc.dynamic coll7370$1=m$1;
dc.bool f7371$1(dc.dynamic need_sep$2, dc.dynamic p$8518_$1, ){
final dc.dynamic vec$8519_$1=p$8518_$1;
final dc.dynamic k$2=(lcoc_core.nth.$_invoke$3(vec$8519_$1, 0, null, ));
final dc.dynamic v$2=(lcoc_core.nth.$_invoke$3(vec$8519_$1, 1, null, ));
if(((need_sep$2!=false)&&(need_sep$2!=null))){
(sink$1 as dc.StringSink).write(", ", );
}else{
}
final dc.dynamic o7290$3=k$2;
final dc.StringSink string_sink7291$3=(sink$1 as dc.StringSink);
if((o7290$3 is lcoc_core.IPrint$iface)){
(o7290$3 as lcoc_core.IPrint$iface).$_print$1(string_sink7291$3, );
}else{
(lcoc_core.IPrint.extensions((o7290$3 as dc.dynamic), ) as lcoc_core.IPrint$ext).$_print$1((o7290$3 as dc.dynamic), string_sink7291$3, );
}
(sink$1 as dc.StringSink).write(" ", );
final dc.dynamic o7290$4=v$2;
final dc.StringSink string_sink7291$4=(sink$1 as dc.StringSink);
if((o7290$4 is lcoc_core.IPrint$iface)){
(o7290$4 as lcoc_core.IPrint$iface).$_print$1(string_sink7291$4, );
}else{
(lcoc_core.IPrint.extensions((o7290$4 as dc.dynamic), ) as lcoc_core.IPrint$ext).$_print$1((o7290$4 as dc.dynamic), string_sink7291$4, );
}
return true;
}
final dc.bool start7372$1=false;
if((coll7370$1 is lcoc_core.IReduce$iface)){
(coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, );
}else{
(lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, );
}
}
return ((sink$1 as dc.StringSink).write("}", ));
}

// END print-map

// BEGIN print-sequential
dc.dynamic print_sequential(dc.dynamic begin$1, dc.dynamic end$1, dc.dynamic sequence$1, dc.dynamic sink$1, ){
(sink$1 as dc.StringSink).write((begin$1 as dc.String), );
final dc.dynamic coll7370$1=sequence$1;
dc.bool f7371$1(dc.dynamic need_sep$1, dc.dynamic x$1, ){
if(((need_sep$1!=false)&&(need_sep$1!=null))){
(sink$1 as dc.StringSink).write(" ", );
}else{
}
final dc.dynamic o7290$1=x$1;
final dc.StringSink string_sink7291$1=(sink$1 as dc.StringSink);
if((o7290$1 is lcoc_core.IPrint$iface)){
(o7290$1 as lcoc_core.IPrint$iface).$_print$1(string_sink7291$1, );
}else{
(lcoc_core.IPrint.extensions((o7290$1 as dc.dynamic), ) as lcoc_core.IPrint$ext).$_print$1((o7290$1 as dc.dynamic), string_sink7291$1, );
}
return true;
}
final dc.bool start7372$1=false;
if((coll7370$1 is lcoc_core.IReduce$iface)){
(coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, );
}else{
(lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, );
}
return ((sink$1 as dc.StringSink).write((end$1 as dc.String), ));
}

// END print-sequential

// BEGIN println
lcoc_core.IFn$iface println=lcoc_core.println$ifn(null, );

// END println

// BEGIN println$ifn
class println$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const println$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.println$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic more$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*print-readably*", )), ));
fl$1[1]=null;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8050_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
return (lcoc_core.apply.$_invoke$2(lcoc_core.prn, more$1, ));
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8050_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END println$ifn

// BEGIN prn
lcoc_core.IFn$iface prn=lcoc_core.prn$ifn(null, );

// END prn

// BEGIN prn$ifn
class prn$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const prn$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.prn$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic more$1, ){
lcoc_core.apply.$_invoke$2(lcoc_core.pr, more$1, );
return lcoc_core.newline();
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END prn$ifn

// BEGIN prn-str
lcoc_core.IFn$iface prn_str=lcoc_core.prn_str$ifn(null, );

// END prn-str

// BEGIN prn_str$ifn
class prn_str$ifn extends dc.Object with lcoc_core.IFnMixin_Z implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const prn_str$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.prn_str$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic xs$1, ){
final dc.StringBuffer s$8066_$AUTO_$1=dc.StringBuffer();
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), ));
fl$1[1]=s$8066_$AUTO_$1;
final lcoc_core.PersistentHashMap $1=lcoc_core.$_map_lit(fl$1, );
final dc.dynamic prev_bindings$8050_$AUTO_$1=lcoc_core.push_dynamic_bindings($1, );
try {
lcoc_core.apply.$_invoke$2(lcoc_core.prn, xs$1, );
return (s$8066_$AUTO_$1.toString());
} finally {
lcoc_core.restore_dynamic_bindings(prev_bindings$8050_$AUTO_$1, );
}
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END prn_str$ifn

// BEGIN push-dynamic-bindings
dc.dynamic push_dynamic_bindings(dc.dynamic bindings$1, ){
final dc.dynamic old$1=lcoc_core.$_DYNAMIC_BINDINGS;
lcoc_core.$_DYNAMIC_BINDINGS=(lcoc_core.into.$_invoke$3(old$1, (lcoc_core.map.$_invoke$1((dc.dynamic p$8748_$1, ){
final dc.dynamic vec$8749_$1=p$8748_$1;
final dc.dynamic k$1=(lcoc_core.nth.$_invoke$3(vec$8749_$1, 0, null, ));
final dc.dynamic v$1=(lcoc_core.nth.$_invoke$3(vec$8749_$1, 1, null, ));
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, k$1, ));
fl$1[1]=lcoc_core.volatile$BANG_(v$1, );
return lcoc_core.$_vec_owning(fl$1, );
}, )), bindings$1, ));
return old$1;
}

// END push-dynamic-bindings

// BEGIN push-tail
lcoc_core.VectorNode push_tail(dc.dynamic pv$1, dc.dynamic level$1, dc.dynamic parent$1, dc.dynamic tailnode$1, ){
final dc.int subidx$1=((((pv$1 as lcoc_core.PersistentVector).cnt-1)>>(31&(level$1 as dc.int)))&31);
final dc.List arr_parent$1=(parent$1 as lcoc_core.VectorNode).arr;
final dc.int level$2=((level$1 as dc.int)-5);
late final lcoc_core.VectorNode new_node$1;
if((0==level$2)){
new_node$1=(tailnode$1 as lcoc_core.VectorNode);
}else if((subidx$1<arr_parent$1.length)){
final dc.dynamic temp$7200_$AUTO_$1=(arr_parent$1[subidx$1]);
if((null==temp$7200_$AUTO_$1)){
new_node$1=lcoc_core.new_path(level$2, (tailnode$1 as lcoc_core.VectorNode), );
}else{
final dc.dynamic child$1=temp$7200_$AUTO_$1;
new_node$1=lcoc_core.push_tail((pv$1 as lcoc_core.PersistentVector), level$2, child$1, (tailnode$1 as lcoc_core.VectorNode), );
}
}else{
new_node$1=lcoc_core.new_path(level$2, (tailnode$1 as lcoc_core.VectorNode), );
}
return lcoc_core.VectorNode(null, lcoc_core.aresize(arr_parent$1, subidx$1, (1+subidx$1), new_node$1, ), );
}

// END push-tail

// BEGIN pv-kv-reduce
dc.dynamic pv_kv_reduce(dc.dynamic pv$1, dc.dynamic f$1, dc.dynamic from$1, dc.dynamic to$1, dc.dynamic init$1, ){
if(((from$1 as dc.int)<(to$1 as dc.int))){
final dc.int tail_off$1=(((pv$1 as lcoc_core.PersistentVector).cnt-1)&(~31));
final lcoc_core.VectorNode root$1=(pv$1 as lcoc_core.PersistentVector).root;
final dc.int shift$1=(pv$1 as lcoc_core.PersistentVector).shift;
final dc.List tail$1=(pv$1 as lcoc_core.PersistentVector).tail;
dc.dynamic acc$1=init$1;
dc.int i$1=(from$1 as dc.int);
dc.dynamic arr$1;
if((0==tail_off$1)){
arr$1=tail$1;
}else{
arr$1=lcoc_core.unchecked_array_for(root$1, shift$1, i$1, );
}
do {
if((i$1<(to$1 as dc.int))){
final dc.dynamic arg$1=((arr$1 as dc.List)[(i$1&31)]);
late final dc.dynamic val$1;
if((f$1 is dc.Function)){
val$1=(f$1 as dc.Function)(acc$1, i$1, arg$1, );
}else if((f$1 is lcoc_core.IFn$iface)){
val$1=((f$1 as lcoc_core.IFn$iface).$_invoke$3(acc$1, i$1, arg$1, ));
}else{
val$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$3(f$1, acc$1, i$1, arg$1, ));
}
final dc.int i$PRIME_$1=(1+i$1);
if(lcoc_core.reduced$QMARK_(val$1, )){
return lcoc_core.deref(val$1, );
}
acc$1=val$1;
i$1=i$PRIME_$1;
if((0<(i$PRIME_$1&31))){
arr$1=arr$1;
}else if((tail_off$1==i$PRIME_$1)){
arr$1=tail$1;
}else if((i$PRIME_$1<(to$1 as dc.int))){
arr$1=lcoc_core.unchecked_array_for(root$1, shift$1, i$PRIME_$1, );
}else{
arr$1=null;
}
continue;
}
return acc$1;
} while(true);
}else{
return init$1;
}
}

// END pv-kv-reduce

// BEGIN pv-reduce
lcoc_core.IFn$iface pv_reduce=lcoc_core.pv_reduce$ifn(null, );

// END pv-reduce

// BEGIN pv_reduce$ifn
class pv_reduce$ifn extends dc.Object with lcoc_core.IFnMixin_uuuXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const pv_reduce$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.pv_reduce$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$3(dc.dynamic pv$1, dc.dynamic f$1, dc.dynamic from$1, ){
final lcoc_core.PersistentVector pv$2=(pv$1 as lcoc_core.PersistentVector);
final dc.int from$2=(from$1 as dc.int);
final dc.int cnt$1=pv$2.cnt;
final dc.List tail$1=pv$2.tail;
final lcoc_core.VectorNode root$1=pv$2.root;
final dc.int shift$1=pv$2.shift;
if((cnt$1<=from$2)){
if((f$1 is dc.Function)){
return (f$1 as dc.Function)();
}
if((f$1 is lcoc_core.IFn$iface)){
return ((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}
return (lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
final dc.int tail_off$1=((cnt$1-1)&(~31));
late final dc.List arr$1;
if((tail_off$1<=from$2)){
arr$1=tail$1;
}else{
arr$1=lcoc_core.unchecked_array_for(root$1, shift$1, from$2, );
}
return (lcoc_core.pv_reduce.$_invoke$4(pv$2, f$1, (1+from$2), (arr$1[(from$2&31)]), ));
}

dc.dynamic $_invoke$4(dc.dynamic pv$3, dc.dynamic f$2, dc.dynamic from$3, dc.dynamic init$1, ){
final lcoc_core.PersistentVector pv$4=(pv$3 as lcoc_core.PersistentVector);
final dc.int from$4=(from$3 as dc.int);
return (lcoc_core.pv_reduce.$_invoke$5(pv$4, f$2, from$4, pv$4.cnt, init$1, ));
}

dc.dynamic $_invoke$5(dc.dynamic pv$5, dc.dynamic f$3, dc.dynamic from$5, dc.dynamic to$1, dc.dynamic init$2, ){
final lcoc_core.PersistentVector pv$6=(pv$5 as lcoc_core.PersistentVector);
final dc.int from$6=(from$5 as dc.int);
final dc.int to$2=(to$1 as dc.int);
final dc.List tail$2=pv$6.tail;
final lcoc_core.VectorNode root$2=pv$6.root;
final dc.int shift$2=pv$6.shift;
if((to$2<=from$6)){
return init$2;
}
final dc.int tail_off$2=((pv$6.cnt-1)&(~31));
dc.dynamic acc$1=init$2;
dc.int i$1=from$6;
dc.dynamic arr$2;
if((tail_off$2<=from$6)){
arr$2=tail$2;
}else{
arr$2=lcoc_core.unchecked_array_for(root$2, shift$2, from$6, );
}
do {
final dc.dynamic arg$1=((arr$2 as dc.List)[(i$1&31)]);
late final dc.dynamic acc$2;
if((f$3 is dc.Function)){
acc$2=(f$3 as dc.Function)(acc$1, arg$1, );
}else if((f$3 is lcoc_core.IFn$iface)){
acc$2=((f$3 as lcoc_core.IFn$iface).$_invoke$2(acc$1, arg$1, ));
}else{
acc$2=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, acc$1, arg$1, ));
}
final dc.int i$PRIME_$1=(1+i$1);
if(lcoc_core.reduced$QMARK_(acc$2, )){
return lcoc_core.deref(acc$2, );
}
if((i$PRIME_$1<to$2)){
acc$1=acc$2;
i$1=i$PRIME_$1;
if((0<(i$PRIME_$1&31))){
arr$2=arr$2;
}else if((tail_off$2==i$PRIME_$1)){
arr$2=tail$2;
}else{
arr$2=lcoc_core.unchecked_array_for(root$2, shift$2, i$PRIME_$1, );
}
continue;
}
return acc$2;
} while(true);
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END pv_reduce$ifn

// BEGIN qualified-ident?
dc.bool qualified_ident$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.ident$QMARK_(x$1, );
late final dc.Object? $if_$1;
if(and$7187_$AUTO_$1){
final dc.dynamic x7301$1=x$1;
late final dc.String? and$7187_$AUTO_$2;
if((x7301$1 is lcoc_core.INamed$iface)){
and$7187_$AUTO_$2=(((x7301$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
and$7187_$AUTO_$2=(((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), )) as dc.String?);
}
if((and$7187_$AUTO_$2!=null)){
$if_$1=true;
}else{
$if_$1=and$7187_$AUTO_$2;
}
}else{
$if_$1=and$7187_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

// END qualified-ident?

// BEGIN qualified-keyword?
dc.dynamic qualified_keyword$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.keyword$QMARK_(x$1, );
late final dc.Object? $if_$1;
if(and$7187_$AUTO_$1){
final dc.dynamic x7301$1=x$1;
late final dc.String? and$7187_$AUTO_$2;
if((x7301$1 is lcoc_core.INamed$iface)){
and$7187_$AUTO_$2=(((x7301$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
and$7187_$AUTO_$2=(((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), )) as dc.String?);
}
if((and$7187_$AUTO_$2!=null)){
$if_$1=true;
}else{
$if_$1=and$7187_$AUTO_$2;
}
}else{
$if_$1=and$7187_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

// END qualified-keyword?

// BEGIN qualified-symbol?
dc.dynamic qualified_symbol$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.symbol$QMARK_(x$1, );
late final dc.Object? $if_$1;
if(and$7187_$AUTO_$1){
final dc.dynamic x7301$1=x$1;
late final dc.String? and$7187_$AUTO_$2;
if((x7301$1 is lcoc_core.INamed$iface)){
and$7187_$AUTO_$2=(((x7301$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
and$7187_$AUTO_$2=(((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), )) as dc.String?);
}
if((and$7187_$AUTO_$2!=null)){
$if_$1=true;
}else{
$if_$1=and$7187_$AUTO_$2;
}
}else{
$if_$1=and$7187_$AUTO_$1;
}
return lcoc_core.boolean($if_$1, );
}

// END qualified-symbol?

// BEGIN quick-bench
lcoc_core.IFn$iface quick_bench=lcoc_core.quick_bench$ifn(null, );

// END quick-bench

// BEGIN quick-bench*
dc.dynamic quick_bench$STAR_(dc.dynamic run$1, ){
final dc.Stopwatch sw$1=dc.Stopwatch();
final void $UNDERSCORE_$1=dc.print("Calibrating", );
late final dc.dynamic n$2;
dc.dynamic n$1=1;
do {
final dc.Stopwatch G$8475_$1=sw$1;
G$8475_$1.reset();
G$8475_$1.start();
if((run$1 is dc.Function)){
(run$1 as dc.Function)(n$1, );
}else if((run$1 is lcoc_core.IFn$iface)){
(run$1 as lcoc_core.IFn$iface).$_invoke$1(n$1, );
}else{
lcoc_core.IFn.extensions(run$1, ).$_invoke$1(run$1, n$1, );
}
sw$1.stop();
if((sw$1.elapsedMicroseconds<100000)){
n$1=(2*(n$1 as dc.num));
continue;
}
n$2=n$1;
break;
} while(true);
dc.print((lcoc_core.str.$_invoke$3("Running (batch size: ", n$2, ")", )), );
dc.dynamic cnt$1=0;
dc.dynamic mean$1=0.0;
dc.dynamic m2$1=0.0;
dc.dynamic rem$1=(((2*60)*1000)*1000);
do {
final dc.Stopwatch G$8476_$1=sw$1;
G$8476_$1.reset();
G$8476_$1.start();
if((run$1 is dc.Function)){
(run$1 as dc.Function)(n$2, );
}else if((run$1 is lcoc_core.IFn$iface)){
(run$1 as lcoc_core.IFn$iface).$_invoke$1(n$2, );
}else{
lcoc_core.IFn.extensions(run$1, ).$_invoke$1(run$1, n$2, );
}
sw$1.stop();
final dc.int t$1=sw$1.elapsedMicroseconds;
final dc.num rem$2=((rem$1 as dc.num)-t$1);
final dc.num cnt$2=(1+(cnt$1 as dc.num));
final dc.num delta$1=(t$1-(mean$1 as dc.num));
final dc.num mean$2=((mean$1 as dc.num)+(delta$1/cnt$2));
final dc.num delta$PRIME_$1=(t$1-mean$2);
final dc.num m2$2=((m2$1 as dc.num)+(delta$1*delta$PRIME_$1));
final dc.bool or$7228_$AUTO_$1=(0<rem$2);
late final dc.bool $if_$1;
if(or$7228_$AUTO_$1){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=(cnt$2<2);
}
if($if_$1){
cnt$1=cnt$2;
mean$1=mean$2;
m2$1=m2$2;
rem$1=rem$2;
continue;
}
final dc.double sd$1=d_math.sqrt((m2$2/(cnt$2-1)), );
return dc.print((lcoc_core.str.$_invoke$4((mean$2/(n$2 as dc.num)), " (+/-", (sd$1/(n$2 as dc.num)), ") us", )), );
} while(true);
}

// END quick-bench*

// BEGIN quick_bench$ifn
class quick_bench$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const quick_bench$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.quick_bench$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "quick-bench*", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "fn", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "n__8477__auto__", )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "dotimes", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "_", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "n__8477__auto__", )), )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, body$1, ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$2, $5, $4, ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$2(arg$3, $6, ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END quick_bench$ifn

// BEGIN quot
dc.num quot(dc.dynamic num$1, dc.dynamic div$1, ){
return ((num$1 as dc.num)~/(div$1 as dc.num));
}

// END quot

// BEGIN rand
lcoc_core.IFn$iface rand=lcoc_core.rand$ifn(null, );

// END rand

// BEGIN rand$ifn
class rand$ifn extends dc.Object with lcoc_core.IFnMixin_XX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const rand$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.rand$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
return (lcoc_core.RNG.nextDouble());
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return ((lcoc_core.RNG.nextDouble())*(n$1 as dc.num));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END rand$ifn

// BEGIN rand-int
dc.int rand_int(dc.dynamic n$1, ){
return (lcoc_core.RNG.nextInt((n$1 as dc.int), ));
}

// END rand-int

// BEGIN rand-nth
dc.dynamic rand_nth(dc.dynamic coll$1, ){
final dc.dynamic coll7390$1=coll$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.int $1=lcoc_core.rand_int(cast$1, );
return (lcoc_core.nth.$_invoke$2(coll$1, $1, ));
}

// END rand-nth

// BEGIN random-sample
lcoc_core.IFn$iface random_sample=lcoc_core.random_sample$ifn(null, );

// END random-sample

// BEGIN random_sample$ifn
class random_sample$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const random_sample$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.random_sample$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic prob$1, ){
return (lcoc_core.filter.$_invoke$1((dc.dynamic $UNDERSCORE_$1, ){
return ((lcoc_core.rand.$_invoke$0())<(prob$1 as dc.num));
}, ));
}

dc.dynamic $_invoke$2(dc.dynamic prob$2, dc.dynamic coll$1, ){
return (lcoc_core.filter.$_invoke$2((dc.dynamic $UNDERSCORE_$2, ){
return ((lcoc_core.rand.$_invoke$0())<(prob$2 as dc.num));
}, coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END random_sample$ifn

// BEGIN range
lcoc_core.IFn$iface range=lcoc_core.range$ifn(null, );

// END range

// BEGIN range$ifn
class range$ifn extends dc.Object with lcoc_core.IFnMixin_XXXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const range$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.range$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$0(){
return (lcoc_core.range.$_invoke$3(0, dc.double.maxFinite, 1, ));
}

dc.dynamic $_invoke$1(dc.dynamic end$1, ){
return (lcoc_core.range.$_invoke$3(0, end$1, 1, ));
}

dc.dynamic $_invoke$2(dc.dynamic start$1, dc.dynamic end$2, ){
return (lcoc_core.range.$_invoke$3(start$1, end$2, 1, ));
}

dc.dynamic $_invoke$3(dc.dynamic start$2, dc.dynamic end$3, dc.dynamic step$1, ){
return lcoc_core.LazySeq(null, ((){
final lcoc_core.ChunkBuffer b$1=lcoc_core.chunk_buffer(32, );
final dc.bool or$7228_$AUTO_$1=(0==(step$1 as dc.dynamic));
late final dc.bool $if_$1;
if(or$7228_$AUTO_$1){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=(start$2==(end$3 as dc.dynamic));
}
late final lcoc_core.IFn$iface? comp$1;
if($if_$1){
comp$1=lcoc_core.not$EQ_;
}else if((0<(step$1 as dc.num))){
comp$1=lcoc_core.$LT_;
}else if((0>(step$1 as dc.num))){
comp$1=lcoc_core.$GT_;
}else{
comp$1=null;
}
dc.dynamic i$1=start$2;
do {
final lcoc_core.ChunkBuffer coll7390$1=b$1;
final dc.int cast$1=((coll7390$1.$_count$0()) as dc.int);
final dc.bool and$7187_$AUTO_$1=(cast$1<32);
late final dc.dynamic $if_$2;
if(and$7187_$AUTO_$1){
$if_$2=((comp$1 as lcoc_core.IFn$iface).$_invoke$2(i$1, end$3, ));
}else{
$if_$2=and$7187_$AUTO_$1;
}
if((($if_$2!=false)&&($if_$2!=null))){
lcoc_core.chunk_append(b$1, i$1, );
i$1=((i$1 as dc.num)+(step$1 as dc.num));
continue;
}
final dc.dynamic arg$1=lcoc_core.chunk(b$1, );
final dc.dynamic test$1=((comp$1 as lcoc_core.IFn$iface).$_invoke$2(i$1, end$3, ));
late final dc.dynamic $if_$3;
if(((test$1!=false)&&(test$1!=null))){
$if_$3=(lcoc_core.range.$_invoke$3(i$1, end$3, step$1, ));
}else{
$if_$3=null;
}
return lcoc_core.chunk_cons(arg$1, $if_$3, );
} while(true);
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END range$ifn

// BEGIN re-find
lcoc_core.IFn$iface re_find=lcoc_core.re_find$ifn(null, );

// END re-find

// BEGIN re-groups
dc.dynamic re_groups(dc.dynamic m$1, ){
final dc.int gc$1=(m$1 as dc.Match).groupCount;
if((0==gc$1)){
return ((m$1 as dc.Match).group(0, ));
}
dc.dynamic ret$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
dc.int c$1=0;
do {
if((c$1<=gc$1)){
ret$1=(lcoc_core.conj$BANG_.$_invoke$2(ret$1, ((m$1 as dc.Match).group(c$1, )), ));
c$1=(1+c$1);
continue;
}
return lcoc_core.persistent$BANG_(ret$1, );
} while(true);
}

// END re-groups

// BEGIN re-matcher
dc.dynamic re_matcher(dc.dynamic re$1, dc.dynamic s$1, ){
return ((re$1 as dc.RegExp).allMatches((s$1 as dc.String), )).iterator;
}

// END re-matcher

// BEGIN re-matches
dc.dynamic re_matches(dc.dynamic re$1, dc.dynamic s$1, ){
final dc.RegExp re$2=dc.RegExp((lcoc_core.str.$_invoke$3("(?:", (re$1 as dc.RegExp).pattern, ")\$", )), multiLine: (re$1 as dc.RegExp).isMultiLine, caseSensitive: (re$1 as dc.RegExp).isCaseSensitive, unicode: (re$1 as dc.RegExp).isUnicode, dotAll: (re$1 as dc.RegExp).isDotAll, );
final dc.Match? temp$7205_$AUTO_$1=(re$2.matchAsPrefix((s$1 as dc.String), ));
if((null==temp$7205_$AUTO_$1)){
return null;
}
final dc.Match? m$1=temp$7205_$AUTO_$1;
return lcoc_core.re_groups(m$1, );
}

// END re-matches

// BEGIN re-pattern
dc.RegExp re_pattern(dc.dynamic s$1, ){
if((s$1 is dc.RegExp)){
return s$1;
}
return dc.RegExp((s$1 as dc.String), unicode: true, );
}

// END re-pattern

// BEGIN re-seq
dc.dynamic re_seq(dc.dynamic re$1, dc.dynamic s$1, ){
final dc.dynamic o7310$1=(lcoc_core.map.$_invoke$2(lcoc_core.re_groups, ((re$1 as dc.RegExp).allMatches((s$1 as dc.String), )), ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

// END re-seq

// BEGIN re_find$ifn
class re_find$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const re_find$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.re_find$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic m$1, ){
final dc.Iterator m$2=(m$1 as dc.Iterator);
if((m$2.moveNext())){
return lcoc_core.re_groups(m$2.current, );
}
return null;
}

dc.dynamic $_invoke$2(dc.dynamic re$1, dc.dynamic s$1, ){
final dc.RegExp re$2=(re$1 as dc.RegExp);
final dc.RegExpMatch? G$8775_$1=(re$2.firstMatch((s$1 as dc.String), ));
if((null==G$8775_$1)){
return null;
}
return lcoc_core.re_groups(G$8775_$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END re_find$ifn

// BEGIN realized?
dc.bool realized$QMARK_(dc.dynamic x$1, ){
final dc.dynamic x7346$1=x$1;
if((x7346$1 is lcoc_core.IPending$iface)){
return ((x7346$1 as lcoc_core.IPending$iface).$_realized$QMARK_$0());
}
return ((lcoc_core.IPending.extensions((x7346$1 as dc.dynamic), ) as lcoc_core.IPending$ext).$_realized$QMARK_$0((x7346$1 as dc.dynamic), ));
}

// END realized?

// BEGIN record?
dc.bool record$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IRecord.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END record?

// BEGIN reduce
lcoc_core.IFn$iface reduce=lcoc_core.reduce$ifn(null, );

// END reduce

// BEGIN reduce$ifn
class reduce$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const reduce$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.reduce$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic f$1, dc.dynamic coll$1, ){
final dc.dynamic coll7374$1=coll$1;
final dc.dynamic f7375$1=f$1;
if((coll7374$1 is lcoc_core.IReduce$iface)){
return ((coll7374$1 as lcoc_core.IReduce$iface).$_reduce$1((f7375$1 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7374$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$1((coll7374$1 as dc.dynamic), (f7375$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic f$2, dc.dynamic init$1, dc.dynamic coll$2, ){
final dc.dynamic coll7370$1=coll$2;
final dc.dynamic f7371$1=f$2;
final dc.dynamic start7372$1=init$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2((f7371$1 as dc.dynamic), (start7372$1 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), (f7371$1 as dc.dynamic), (start7372$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END reduce$ifn

// BEGIN reduce-kv
dc.dynamic reduce_kv(dc.dynamic f$1, dc.dynamic init$1, dc.dynamic coll$1, ){
final dc.dynamic coll7383$1=coll$1;
final dc.dynamic f7384$1=f$1;
final dc.dynamic init7385$1=init$1;
if((coll7383$1 is lcoc_core.IKVReduce$iface)){
return ((coll7383$1 as lcoc_core.IKVReduce$iface).$_kv_reduce$2((f7384$1 as dc.dynamic), (init7385$1 as dc.dynamic), ));
}
return ((lcoc_core.IKVReduce.extensions((coll7383$1 as dc.dynamic), ) as lcoc_core.IKVReduce$ext).$_kv_reduce$2((coll7383$1 as dc.dynamic), (f7384$1 as dc.dynamic), (init7385$1 as dc.dynamic), ));
}

// END reduce-kv

// BEGIN reduced
dc.dynamic reduced(dc.dynamic x$1, ){
return lcoc_core.Reduced((x$1 as dc.dynamic), );
}

// END reduced

// BEGIN reduced?
dc.bool reduced$QMARK_(dc.dynamic r$1, ){
return (r$1 is lcoc_core.Reduced);
}

// END reduced?

// BEGIN reductions
lcoc_core.IFn$iface reductions=lcoc_core.reductions$ifn(null, );

// END reductions

// BEGIN reductions$ifn
class reductions$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const reductions$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.reductions$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic f$1, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7210_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7210_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7210_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7210_$AUTO_$1!=false)&&(temp$7210_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7210_$AUTO_$1;
return (lcoc_core.reductions.$_invoke$3(f$1, lcoc_core.first(s$1, ), lcoc_core.rest(s$1, ), ));
}
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
return (lcoc_core.list.$_invoke$1($if_$1, ));
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$3(dc.dynamic f$2, dc.dynamic init$1, dc.dynamic coll$2, ){
if(lcoc_core.reduced$QMARK_(init$1, )){
return (lcoc_core.list.$_invoke$1(lcoc_core.deref(init$1, ), ));
}
return lcoc_core.cons(init$1, lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$2=coll$2;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$2=temp$7215_$AUTO_$1;
final dc.dynamic arg$1=lcoc_core.first(s$2, );
late final dc.dynamic $if_$2;
if((f$2 is dc.Function)){
$if_$2=(f$2 as dc.Function)(init$1, arg$1, );
}else if((f$2 is lcoc_core.IFn$iface)){
$if_$2=((f$2 as lcoc_core.IFn$iface).$_invoke$2(init$1, arg$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$2(f$2, init$1, arg$1, ));
}
return (lcoc_core.reductions.$_invoke$3(f$2, $if_$2, lcoc_core.rest(s$2, ), ));
}
return null;
} as dc.dynamic), null, -1, ), );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END reductions$ifn

// BEGIN reify
lcoc_core.IFn$iface reify=lcoc_core.reify$ifn(null, );

// END reify

// BEGIN reify$ifn
class reify$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const reify$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.reify$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic vec$8187_$1=lcoc_core.roll_leading_opts(body$1, );
final dc.dynamic opts$1=(lcoc_core.nth.$_invoke$3(vec$8187_$1, 0, null, ));
final dc.dynamic specs$1=(lcoc_core.nth.$_invoke$3(vec$8187_$1, 1, null, ));
return (lcoc_core.list$STAR_.$_invoke$3((lcoc_core.symbol.$_invoke$2(null, "reify*", )), opts$1, specs$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END reify$ifn

// BEGIN rem
dc.dynamic rem(dc.dynamic num$1, dc.dynamic div$1, ){
return ((num$1 as dc.num).remainder((div$1 as dc.num), ));
}

// END rem

// BEGIN remove
lcoc_core.IFn$iface remove=lcoc_core.remove$ifn(null, );

// END remove

// BEGIN remove$ifn
class remove$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const remove$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.remove$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (lcoc_core.filter.$_invoke$1(lcoc_core.complement(pred$1, ), ));
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
return (lcoc_core.filter.$_invoke$2(lcoc_core.complement(pred$2, ), coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END remove$ifn

// BEGIN remove-watch
lcoc_core.Atom remove_watch(dc.dynamic reference$1, dc.dynamic key$1, ){
final lcoc_core.Atom this7635$1=(reference$1 as lcoc_core.Atom);
final dc.dynamic key7636$1=key$1;
this7635$1.$_remove_watch$1((key7636$1 as dc.dynamic), );
return (reference$1 as lcoc_core.Atom);
}

// END remove-watch

// BEGIN repeat
lcoc_core.IFn$iface repeat=lcoc_core.repeat$ifn(null, );

// END repeat

// BEGIN repeat$ifn
class repeat$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const repeat$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.repeat$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic x$1, ){
return lcoc_core.LazySeq(null, ((){
return lcoc_core.cons(x$1, (lcoc_core.repeat.$_invoke$1(x$1, )), );
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic x$2, ){
return (lcoc_core.take.$_invoke$2(n$1, (lcoc_core.repeat.$_invoke$1(x$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END repeat$ifn

// BEGIN repeatedly
lcoc_core.IFn$iface repeatedly=lcoc_core.repeatedly$ifn(null, );

// END repeatedly

// BEGIN repeatedly$ifn
class repeatedly$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const repeatedly$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.repeatedly$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic f$1, ){
return lcoc_core.LazySeq(null, ((){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
return lcoc_core.cons($if_$1, (lcoc_core.repeatedly.$_invoke$1(f$1, )), );
} as dc.dynamic), null, -1, );
}

dc.dynamic $_invoke$2(dc.dynamic n$1, dc.dynamic f$2, ){
return (lcoc_core.take.$_invoke$2(n$1, (lcoc_core.repeatedly.$_invoke$1(f$2, )), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END repeatedly$ifn

// BEGIN replace
lcoc_core.IFn$iface replace=lcoc_core.replace$ifn(null, );

// END replace

// BEGIN replace$ifn
class replace$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const replace$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.replace$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic smap$1, ){
return (lcoc_core.map.$_invoke$1((dc.dynamic p1$8657_$SHARP_$1, ){
final dc.dynamic temp$7210_$AUTO_$1=lcoc_core.find(smap$1, p1$8657_$SHARP_$1, );
if((temp$7210_$AUTO_$1!=null)){
final dc.dynamic e$1=temp$7210_$AUTO_$1;
return lcoc_core.val(e$1, );
}
return p1$8657_$SHARP_$1;
}, ));
}

dc.dynamic $_invoke$2(dc.dynamic smap$2, dc.dynamic coll$1, ){
if(lcoc_core.vector$QMARK_(coll$1, )){
final dc.dynamic coll7390$1=coll$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.dynamic coll7370$1=(lcoc_core.range.$_invoke$1(cast$1, ));
dc.dynamic f7371$1(dc.dynamic v$1, dc.dynamic i$1, ){
final dc.dynamic temp$7210_$AUTO_$2=lcoc_core.find(smap$2, (lcoc_core.nth.$_invoke$2(v$1, i$1, )), );
if((temp$7210_$AUTO_$2!=null)){
final dc.dynamic e$2=temp$7210_$AUTO_$2;
final dc.dynamic coll7440$1=v$1;
final dc.dynamic k7441$1=i$1;
final dc.dynamic v7442$1=lcoc_core.val(e$2, );
if((coll7440$1 is lcoc_core.IAssociative$iface)){
return ((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$1 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$1 as dc.dynamic), (k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
return v$1;
}
final dc.dynamic start7372$1=coll$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
return (lcoc_core.map.$_invoke$2((dc.dynamic p1$8658_$SHARP_$1, ){
final dc.dynamic temp$7210_$AUTO_$3=lcoc_core.find(smap$2, p1$8658_$SHARP_$1, );
if((temp$7210_$AUTO_$3!=null)){
final dc.dynamic e$3=temp$7210_$AUTO_$3;
return lcoc_core.val(e$3, );
}
return p1$8658_$SHARP_$1;
}, coll$1, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END replace$ifn

// BEGIN reset!
dc.dynamic reset$BANG_(dc.dynamic atom$1, dc.dynamic new_value$1, ){
final dc.dynamic o7597$1=atom$1;
final dc.dynamic new_value7598$1=new_value$1;
if((o7597$1 is lcoc_core.IReset$iface)){
return ((o7597$1 as lcoc_core.IReset$iface).$_reset$BANG_$1((new_value7598$1 as dc.dynamic), ));
}
return ((lcoc_core.IReset.extensions((o7597$1 as dc.dynamic), ) as lcoc_core.IReset$ext).$_reset$BANG_$1((o7597$1 as dc.dynamic), (new_value7598$1 as dc.dynamic), ));
}

// END reset!

// BEGIN reset-meta!
dc.dynamic reset_meta$BANG_(dc.dynamic iref$1, dc.dynamic metadata_map$1, ){
final lcoc_core.Atom arg$1=(iref$1 as lcoc_core.Atom);
arg$1.meta=metadata_map$1;
return metadata_map$1;
}

// END reset-meta!

// BEGIN reset-vals!
dc.dynamic reset_vals$BANG_(dc.dynamic a$1, dc.dynamic newval$1, ){
final dc.dynamic old_state$1=(a$1 as lcoc_core.Atom).state;
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, old_state$1, ));
fl$1[1]=lcoc_core.set_and_validate_atom_state$BANG_((a$1 as lcoc_core.Atom), newval$1, );
return lcoc_core.$_vec_owning(fl$1, );
}

// END reset-vals!

// BEGIN rest
dc.dynamic rest(dc.dynamic coll$1, ){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic coll7324$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
coll7324$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
coll7324$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((coll7324$1 is lcoc_core.ISeq$iface)){
return ((coll7324$1 as lcoc_core.ISeq$iface).$_rest$0());
}
return ((lcoc_core.ISeq.extensions(coll7324$1, ) as lcoc_core.ISeq$ext).$_rest$0(coll7324$1, ));
}

// END rest

// BEGIN restore-dynamic-bindings
dc.dynamic restore_dynamic_bindings(dc.dynamic bindings$1, ){
lcoc_core.$_DYNAMIC_BINDINGS=bindings$1;
return lcoc_core.$_DYNAMIC_BINDINGS;
}

// END restore-dynamic-bindings

// BEGIN reverse
dc.dynamic reverse(dc.dynamic coll$1, ){
final dc.dynamic coll7370$1=coll$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.conj;
final lcoc_core.PersistentList start7372$1=lcoc_core.$_EMPTY_LIST;
if((coll7370$1 is lcoc_core.IReduce$iface)){
return ((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, ));
}
return ((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, ));
}

// END reverse

// BEGIN roll-leading-opts
dc.dynamic roll_leading_opts(dc.dynamic body$1, ){
final dc.dynamic o7310$1=body$1;
late final dc.dynamic G$8179_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
G$8179_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
G$8179_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic vec$8180_$1=G$8179_$1;
final dc.dynamic o7310$2=vec$8180_$1;
late final dc.dynamic seq$8181_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
seq$8181_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8181_$1=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
final dc.dynamic first$8182_$1=lcoc_core.first(seq$8181_$1, );
final dc.dynamic seq$8181_$2=lcoc_core.next(seq$8181_$1, );
final dc.dynamic k$1=first$8182_$1;
final dc.dynamic first$8182_$2=lcoc_core.first(seq$8181_$2, );
final dc.dynamic seq$8181_$3=lcoc_core.next(seq$8181_$2, );
final dc.dynamic v$1=first$8182_$2;
final dc.dynamic more$1=seq$8181_$3;
final dc.dynamic body$2=vec$8180_$1;
final lcoc_core.PersistentHashMap opts$1=lcoc_core.$_EMPTY_MAP;
dc.dynamic G$8179_$2=G$8179_$1;
dc.dynamic opts$2=opts$1;
do {
final dc.dynamic vec$8183_$1=G$8179_$2;
final dc.dynamic o7310$3=vec$8183_$1;
late final dc.dynamic seq$8184_$1;
if((o7310$3 is lcoc_core.ISeqable$iface)){
seq$8184_$1=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8184_$1=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic first$8185_$1=lcoc_core.first(seq$8184_$1, );
final dc.dynamic seq$8184_$2=lcoc_core.next(seq$8184_$1, );
final dc.dynamic k$2=first$8185_$1;
final dc.dynamic first$8185_$2=lcoc_core.first(seq$8184_$2, );
final dc.dynamic seq$8184_$3=lcoc_core.next(seq$8184_$2, );
final dc.dynamic v$2=first$8185_$2;
final dc.dynamic more$2=seq$8184_$3;
final dc.dynamic body$3=vec$8183_$1;
final dc.dynamic opts$3=opts$2;
final dc.dynamic and$7187_$AUTO_$1=body$3;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=lcoc_core.keyword$QMARK_(k$2, );
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
G$8179_$2=more$2;
final dc.dynamic coll7440$1=opts$3;
final dc.dynamic k7441$1=k$2;
final dc.dynamic v7442$1=v$2;
if((coll7440$1 is lcoc_core.IAssociative$iface)){
opts$2=((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}else{
opts$2=((lcoc_core.IAssociative.extensions((coll7440$1 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$1 as dc.dynamic), (k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
continue;
}
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, opts$3, ));
fl$1[1]=body$3;
return lcoc_core.$_vec_owning(fl$1, );
} while(true);
}

// END roll-leading-opts

// BEGIN rseq
dc.dynamic rseq(dc.dynamic rev$1, ){
if(lcoc_core.vector$QMARK_(rev$1, )){
}else{
throw dc.Exception((lcoc_core.str.$_invoke$3("class ", rev$1.runtimeType, " is not reversible.", )), );
}
final dc.dynamic coll7390$1=rev$1;
late final dc.int cnt$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cnt$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cnt$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
if((0==cnt$1)){
return null;
}
return lcoc_core.RSeq(null, (rev$1 as dc.dynamic), (cnt$1-1), -1, );
}

// END rseq

// BEGIN run!
dc.dynamic run$BANG_(dc.dynamic proc$1, dc.dynamic coll$1, ){
final dc.dynamic coll7370$1=coll$1;
dc.dynamic f7371$1(dc.dynamic p1$8648_$SHARP_$1, dc.dynamic p2$8647_$SHARP_$1, ){
if((proc$1 is dc.Function)){
return (proc$1 as dc.Function)(p2$8647_$SHARP_$1, );
}
if((proc$1 is lcoc_core.IFn$iface)){
return ((proc$1 as lcoc_core.IFn$iface).$_invoke$1(p2$8647_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(proc$1, ).$_invoke$1(proc$1, p2$8647_$SHARP_$1, ));
}
final dc.Null start7372$1=null;
if((coll7370$1 is lcoc_core.IReduce$iface)){
(coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, start7372$1, );
}else{
(lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, start7372$1, );
}
return null;
}

// END run!

// BEGIN satisfies?
dc.bool satisfies$QMARK_(dc.dynamic protocol$1, dc.dynamic x$1, ){
return ((protocol$1 as lcoc_core.IProtocol).satisfies((x$1 as dc.dynamic), ));
}

// END satisfies?

// BEGIN second
dc.dynamic second(dc.dynamic coll$1, ){
return lcoc_core.first(lcoc_core.next(coll$1, ), );
}

// END second

// BEGIN select-keys
dc.dynamic select_keys(dc.dynamic map$1, dc.dynamic keyseq$1, ){
dc.dynamic ret$1=lcoc_core.$_EMPTY_MAP;
final dc.dynamic o7310$1=keyseq$1;
dc.dynamic keys$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
keys$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
keys$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
do {
if(((keys$1!=false)&&(keys$1!=null))){
final dc.dynamic key$1=lcoc_core.first(keys$1, );
final dc.dynamic entry$1=(lcoc_core.$get_.$_invoke$3(map$1, key$1, lcoc_core.sentinel, ));
late final dc.bool $if_$1;
if(dc.identical((entry$1 as dc.Object?), (lcoc_core.sentinel as dc.Object?), )){
$if_$1=false;
}else{
$if_$1=true;
}
if($if_$1){
final dc.dynamic coll7440$1=ret$1;
final dc.dynamic k7441$1=key$1;
final dc.dynamic v7442$1=entry$1;
if((coll7440$1 is lcoc_core.IAssociative$iface)){
ret$1=((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}else{
ret$1=((lcoc_core.IAssociative.extensions((coll7440$1 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$1 as dc.dynamic), (k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
}else{
ret$1=ret$1;
}
keys$1=lcoc_core.next(keys$1, );
continue;
}
final dc.dynamic o7517$1=ret$1;
final dc.dynamic o7524$1=map$1;
late final dc.dynamic meta7518$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
meta7518$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
meta7518$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
if((o7517$1 is lcoc_core.IWithMeta$iface)){
return ((o7517$1 as lcoc_core.IWithMeta$iface).$_with_meta$1(meta7518$1, ));
}
return ((lcoc_core.IWithMeta.extensions((o7517$1 as dc.dynamic), ) as lcoc_core.IWithMeta$ext).$_with_meta$1((o7517$1 as dc.dynamic), meta7518$1, ));
} while(true);
}

// END select-keys

// BEGIN sentinel
var sentinel=dc.Object();

// END sentinel

// BEGIN seq
dc.dynamic seq(dc.dynamic coll$1, ){
final dc.dynamic o7310$1=coll$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

// END seq

// BEGIN seq?
dc.bool seq$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.ISeq.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END seq?

// BEGIN seqable?
dc.bool seqable$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.ISeqable.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END seqable?

// BEGIN sequence
lcoc_core.IFn$iface sequence=lcoc_core.sequence$ifn(null, );

// END sequence

// BEGIN sequence$ifn
class sequence$ifn extends dc.Object with lcoc_core.IFnMixin_uXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const sequence$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.sequence$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic xform$1, dc.dynamic coll$1, dc.dynamic colls$1, ){
final dc.dynamic or$7228_$AUTO_$1=(lcoc_core.chunked_iterator_seq.$_invoke$1((lcoc_core.apply.$_invoke$4(lcoc_core.iterator, xform$1, coll$1, colls$1, )), ));
if((or$7228_$AUTO_$1!=null)){
return or$7228_$AUTO_$1;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_invoke$1(dc.dynamic coll$2, ){
if(((lcoc_core.ISeq.satisfies((coll$2 as dc.dynamic), )) as dc.bool)){
return coll$2;
}
final dc.dynamic o7310$1=coll$2;
late final dc.dynamic or$7228_$AUTO_$2;
if((o7310$1 is lcoc_core.ISeqable$iface)){
or$7228_$AUTO_$2=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
or$7228_$AUTO_$2=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((or$7228_$AUTO_$2!=false)&&(or$7228_$AUTO_$2!=null))){
return or$7228_$AUTO_$2;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic $_invoke$2(dc.dynamic xform$2, dc.dynamic coll$3, ){
final dc.dynamic or$7228_$AUTO_$3=(lcoc_core.chunked_iterator_seq.$_invoke$1((lcoc_core.iterator.$_invoke$2(xform$2, coll$3, )), ));
if((or$7228_$AUTO_$3!=null)){
return or$7228_$AUTO_$3;
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sequence$ifn

// BEGIN sequential?
dc.bool sequential$QMARK_(dc.dynamic coll$1, ){
return ((lcoc_core.ISequential.satisfies((coll$1 as dc.dynamic), )) as dc.bool);
}

// END sequential?

// BEGIN set
lcoc_core.PersistentHashSet $set_(dc.dynamic coll$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_SET, coll$1, ));
}

// END set

// BEGIN set-and-validate-atom-state!
dc.dynamic set_and_validate_atom_state$BANG_(dc.dynamic a$1, dc.dynamic new_state$1, ){
final dc.dynamic temp$7205_$AUTO_$1=(a$1 as lcoc_core.Atom).validator;
if((null==temp$7205_$AUTO_$1)){
}else{
final dc.dynamic validator$1=temp$7205_$AUTO_$1;
lcoc_core.validate_atom_state(validator$1, new_state$1, );
}
final dc.dynamic old_state$1=(a$1 as lcoc_core.Atom).state;
final lcoc_core.Atom arg$1=(a$1 as lcoc_core.Atom);
arg$1.state=new_state$1;
final lcoc_core.Atom this7621$1=(a$1 as lcoc_core.Atom);
final dc.dynamic oldval7622$1=old_state$1;
final dc.dynamic newval7623$1=new_state$1;
this7621$1.$_notify_watches$2(oldval7622$1, (newval7623$1 as dc.dynamic), );
return new_state$1;
}

// END set-and-validate-atom-state!

// BEGIN set-dynamic-binding!
dc.dynamic set_dynamic_binding$BANG_(dc.dynamic k$1, dc.dynamic v$1, ){
final dc.dynamic temp$7200_$AUTO_$1=(lcoc_core.$get_.$_invoke$2(lcoc_core.$_DYNAMIC_BINDINGS, k$1, ));
if((null==(temp$7200_$AUTO_$1 as dc.dynamic))){
throw dc.Exception((lcoc_core.str.$_invoke$3("Can't change/establish root binding of: ", k$1, " with set!.", )), );
}
final dc.dynamic binding$1=temp$7200_$AUTO_$1;
return lcoc_core.vreset$BANG_(binding$1, v$1, );
}

// END set-dynamic-binding!

// BEGIN set-validator!
dc.dynamic set_validator$BANG_(dc.dynamic atom$1, dc.dynamic f$1, ){
if(((f$1!=false)&&(f$1!=null))){
final lcoc_core.Atom o7365$1=(atom$1 as lcoc_core.Atom);
final dc.dynamic $1=(o7365$1.$_deref$0());
lcoc_core.validate_atom_state(f$1, $1, );
}else{
}
final lcoc_core.Atom arg$1=(atom$1 as lcoc_core.Atom);
arg$1.validator=f$1;
return f$1;
}

// END set-validator!

// BEGIN set?
dc.bool set$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.ISet.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END set?

// BEGIN shuffle
dc.dynamic shuffle(dc.dynamic source$1, ){
final dc.dynamic coll7370$1=source$1;
final lcoc_core.IFn$iface f7371$1=lcoc_core.conj$BANG_;
final dc.dynamic start7372$1=lcoc_core.transient(lcoc_core.$_EMPTY_VECTOR, );
late final dc.dynamic source$BANG_$1;
if((coll7370$1 is lcoc_core.IReduce$iface)){
source$BANG_$1=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}else{
source$BANG_$1=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
final dc.dynamic coll7390$1=source$BANG_$1;
late final dc.int length$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
length$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
length$1=(((lcoc_core.ICounted.extensions(coll7390$1, ) as lcoc_core.ICounted$ext).$_count$0(coll7390$1, )) as dc.int);
}
dc.dynamic tv$1=source$BANG_$1;
dc.int i$1=length$1;
do {
final dc.int i_1$1=(i$1-1);
if((0<i_1$1)){
final dc.int j$1=lcoc_core.rand_int(i$1, );
final dc.dynamic tmp$1=(lcoc_core.nth.$_invoke$2(tv$1, i_1$1, ));
tv$1=(lcoc_core.assoc$BANG_.$_invoke$3((lcoc_core.assoc$BANG_.$_invoke$3(tv$1, i_1$1, (lcoc_core.nth.$_invoke$2(tv$1, j$1, )), )), j$1, tmp$1, ));
i$1=i_1$1;
continue;
}
return lcoc_core.persistent$BANG_(tv$1, );
} while(true);
}

// END shuffle

// BEGIN sigs
dc.dynamic sigs(dc.dynamic fdecl$1, ){
dc.dynamic asig$1(dc.dynamic fdecl$2, ){
final dc.dynamic arglist$1=lcoc_core.first(fdecl$2, );
late final dc.dynamic arglist$2;
if((lcoc_core.$EQ_.$_invoke$2((lcoc_core.symbol.$_invoke$2(null, "&form", )), lcoc_core.first(arglist$1, ), ))){
final dc.dynamic coll7390$1=arglist$1;
late final dc.int cast$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
cast$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
cast$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
arglist$2=(lcoc_core.subvec.$_invoke$3(arglist$1, 2, cast$1, ));
}else{
arglist$2=arglist$1;
}
final dc.dynamic body$1=lcoc_core.next(fdecl$2, );
if(lcoc_core.map$QMARK_(lcoc_core.first(body$1, ), )){
final dc.dynamic test$1=lcoc_core.next(body$1, );
if(((test$1!=false)&&(test$1!=null))){
final dc.dynamic o7524$1=arglist$2;
late final dc.dynamic $if_$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions(o7524$1, ) as lcoc_core.IMeta$ext).$_meta$0(o7524$1, ));
}
late final dc.dynamic coll7355$1;
if((($if_$1!=false)&&($if_$1!=null))){
final dc.dynamic o7524$2=arglist$2;
if((o7524$2 is lcoc_core.IMeta$iface)){
coll7355$1=((o7524$2 as lcoc_core.IMeta$iface).$_meta$0());
}else{
coll7355$1=((lcoc_core.IMeta.extensions(o7524$2, ) as lcoc_core.IMeta$ext).$_meta$0(o7524$2, ));
}
}else{
coll7355$1=lcoc_core.$_EMPTY_MAP;
}
final dc.dynamic o7356$1=lcoc_core.first(body$1, );
late final dc.dynamic $if_$2;
if((coll7355$1 is lcoc_core.ICollection$iface)){
$if_$2=((coll7355$1 as lcoc_core.ICollection$iface).$_conj$1((o7356$1 as dc.dynamic), ));
}else{
$if_$2=((lcoc_core.ICollection.extensions(coll7355$1, ) as lcoc_core.ICollection$ext).$_conj$1(coll7355$1, (o7356$1 as dc.dynamic), ));
}
return lcoc_core.with_meta(arglist$2, $if_$2, );
}
return arglist$2;
}
return arglist$2;
}
dc.dynamic resolve_tag$1(dc.dynamic argvec$1, ){
final dc.dynamic o7524$3=argvec$1;
late final dc.dynamic m$1;
if((o7524$3 is lcoc_core.IMeta$iface)){
m$1=((o7524$3 as lcoc_core.IMeta$iface).$_meta$0());
}else{
m$1=((lcoc_core.IMeta.extensions((o7524$3 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$3 as dc.dynamic), ));
}
final dc.dynamic tag$1=(const lcoc_core.Keyword(null, "tag", 2780644040, ).$_invoke$1(m$1, ));
return argvec$1;
}
if(((lcoc_core.ISeq.satisfies((lcoc_core.first(fdecl$1, ) as dc.dynamic), )) as dc.bool)){
dc.dynamic ret$1=lcoc_core.$_EMPTY_VECTOR;
dc.dynamic fdecls$1=fdecl$1;
do {
if(((fdecls$1!=false)&&(fdecls$1!=null))){
final dc.dynamic coll7355$2=ret$1;
final dc.dynamic o7356$2=resolve_tag$1(asig$1(lcoc_core.first(fdecls$1, ), ), );
if((coll7355$2 is lcoc_core.ICollection$iface)){
ret$1=((coll7355$2 as lcoc_core.ICollection$iface).$_conj$1(o7356$2, ));
}else{
ret$1=((lcoc_core.ICollection.extensions((coll7355$2 as dc.dynamic), ) as lcoc_core.ICollection$ext).$_conj$1((coll7355$2 as dc.dynamic), o7356$2, ));
}
fdecls$1=lcoc_core.next(fdecls$1, );
continue;
}
final dc.dynamic o7310$1=ret$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
} while(true);
}else{
return (lcoc_core.list.$_invoke$1(resolve_tag$1(asig$1(fdecl$1, ), ), ));
}
}

// END sigs

// BEGIN simple-ident?
dc.bool simple_ident$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.ident$QMARK_(x$1, );
if(and$7187_$AUTO_$1){
final dc.dynamic x7301$1=x$1;
late final dc.String? cast$1;
if((x7301$1 is lcoc_core.INamed$iface)){
cast$1=(((x7301$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), )) as dc.String?);
}
return (null==cast$1);
}
return and$7187_$AUTO_$1;
}

// END simple-ident?

// BEGIN simple-keyword?
dc.bool simple_keyword$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.keyword$QMARK_(x$1, );
if(and$7187_$AUTO_$1){
final dc.dynamic x7301$1=x$1;
late final dc.String? cast$1;
if((x7301$1 is lcoc_core.INamed$iface)){
cast$1=(((x7301$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), )) as dc.String?);
}
return (null==cast$1);
}
return and$7187_$AUTO_$1;
}

// END simple-keyword?

// BEGIN simple-symbol?
dc.bool simple_symbol$QMARK_(dc.dynamic x$1, ){
final dc.bool and$7187_$AUTO_$1=lcoc_core.symbol$QMARK_(x$1, );
if(and$7187_$AUTO_$1){
final dc.dynamic x7301$1=x$1;
late final dc.String? cast$1;
if((x7301$1 is lcoc_core.INamed$iface)){
cast$1=(((x7301$1 as lcoc_core.INamed$iface).$_namespace$0()) as dc.String?);
}else{
cast$1=(((lcoc_core.INamed.extensions((x7301$1 as dc.dynamic), ) as lcoc_core.INamed$ext).$_namespace$0((x7301$1 as dc.dynamic), )) as dc.String?);
}
return (null==cast$1);
}
return and$7187_$AUTO_$1;
}

// END simple-symbol?

// BEGIN some
dc.dynamic some(dc.dynamic pred$2, dc.dynamic coll$2, ){
dc.dynamic pred$1=pred$2;
dc.dynamic coll$1=coll$2;
do {
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
final dc.dynamic arg$1=lcoc_core.first(s$1, );
late final dc.dynamic or$7228_$AUTO_$1;
if((pred$1 is dc.Function)){
or$7228_$AUTO_$1=(pred$1 as dc.Function)(arg$1, );
}else if((pred$1 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$1=((pred$1 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
or$7228_$AUTO_$1=(lcoc_core.IFn.extensions(pred$1, ).$_invoke$1(pred$1, arg$1, ));
}
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
return or$7228_$AUTO_$1;
}
coll$1=lcoc_core.next(s$1, );
continue;
}
return null;
} while(true);
}

// END some

// BEGIN some->
lcoc_core.IFn$iface some_$GT_=lcoc_core.some_$GT_$ifn(null, );

// END some->

// BEGIN some->>
lcoc_core.IFn$iface some_$GT_$GT_=lcoc_core.some_$GT_$GT_$ifn(null, );

// END some->>

// BEGIN some-fn
lcoc_core.IFn$iface some_fn=lcoc_core.some_fn$ifn(null, );

// END some-fn

// BEGIN some?
dc.bool some$QMARK_(dc.dynamic x$1, ){
return (x$1!=null);
}

// END some?

// BEGIN some_$GT_$GT_$ifn
class some_$GT_$GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const some_$GT_$GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.some_$GT_$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic forms$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic step$1, ){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), )), (lcoc_core.list.$_invoke$1(g$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->>", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4(arg$2, $2, arg$1, $1, ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}, forms$1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$3;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7310$5=steps$1;
late final dc.dynamic $if_$4;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
late final dc.bool $if_$5;
if((($if_$4!=false)&&($if_$4!=null))){
$if_$5=false;
}else{
$if_$5=true;
}
late final dc.dynamic $if_$6;
if($if_$5){
$if_$6=g$1;
}else{
$if_$6=lcoc_core.last(steps$1, );
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$3, $5, $4, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_$GT_$GT_$ifn

// BEGIN some_$GT_$ifn
class some_$GT_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const some_$GT_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.some_$GT_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic expr$1, dc.dynamic forms$1, ){
late final dc.dynamic g$1;
if((lcoc_core.gensym is dc.Function)){
g$1=(lcoc_core.gensym as dc.Function)();
}else if((lcoc_core.gensym is lcoc_core.IFn$iface)){
g$1=((lcoc_core.gensym as lcoc_core.IFn$iface).$_invoke$0());
}else{
g$1=(lcoc_core.IFn.extensions(lcoc_core.gensym, ).$_invoke$0(lcoc_core.gensym, ));
}
final dc.dynamic steps$1=(lcoc_core.map.$_invoke$2((dc.dynamic step$1, ){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), )), (lcoc_core.list.$_invoke$1(g$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "->", )), )), (lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(step$1, )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$4(arg$2, $2, arg$1, $1, ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}, forms$1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3((lcoc_core.list.$_invoke$1(g$1, )), (lcoc_core.list.$_invoke$1(expr$1, )), (lcoc_core.interleave.$_invoke$2((lcoc_core.repeat.$_invoke$1(g$1, )), lcoc_core.butlast(steps$1, ), )), ));
late final dc.dynamic $if_$3;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7310$5=steps$1;
late final dc.dynamic $if_$4;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
late final dc.bool $if_$5;
if((($if_$4!=false)&&($if_$4!=null))){
$if_$5=false;
}else{
$if_$5=true;
}
late final dc.dynamic $if_$6;
if($if_$5){
$if_$6=g$1;
}else{
$if_$6=lcoc_core.last(steps$1, );
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$6, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$3, $5, $4, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_$GT_$ifn

// BEGIN some_fn$ifn
class some_fn$ifn extends dc.Object with lcoc_core.IFnMixin_uXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$5;

const some_fn$ifn(this.meta$5, ):super();

dc.dynamic $_meta$0(){
return meta$5;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$5, ){
return lcoc_core.some_fn$ifn((m$2101_$AUTO_$5 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic p1$1, dc.dynamic p2$1, dc.dynamic p3$1, dc.dynamic ps$1, ){
final dc.dynamic ps$2=(lcoc_core.list$STAR_.$_invoke$4(p1$1, p2$1, p3$1, ps$1, ));
final dc.dynamic spn$1=lcoc_core.spn$23(null, ps$2, );
return spn$1;
}

dc.dynamic $_invoke$1(dc.dynamic p$1, ){
final dc.dynamic sp1$1=lcoc_core.sp1$24(null, p$1, );
return sp1$1;
}

dc.dynamic $_invoke$2(dc.dynamic p1$2, dc.dynamic p2$2, ){
final dc.dynamic sp2$1=lcoc_core.sp2$25(null, p2$2, p1$2, );
return sp2$1;
}

dc.dynamic $_invoke$3(dc.dynamic p1$3, dc.dynamic p2$3, dc.dynamic p3$2, ){
final dc.dynamic sp3$1=lcoc_core.sp3$26(null, p3$2, p1$3, p2$3, );
return sp3$1;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END some_fn$ifn

// BEGIN sort
lcoc_core.IFn$iface sort=lcoc_core.sort$ifn(null, );

// END sort

// BEGIN sort$ifn
class sort$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const sort$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.sort$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic coll$1, ){
return (lcoc_core.sort.$_invoke$2(lcoc_core.compare, coll$1, ));
}

dc.dynamic $_invoke$2(dc.dynamic comp$1, dc.dynamic coll$2, ){
final dc.dynamic o7310$1=coll$2;
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if((($if_$1!=false)&&($if_$1!=null))){
final dc.List a$1=lcoc_core.to_array(coll$2, );
final dc.dynamic maybe_f$1=comp$1;
late final dc.int Function(dc.dynamic, dc.dynamic, )? wrapper_f$1;
if((maybe_f$1 is dc.int Function(dc.dynamic, dc.dynamic, )?)){
wrapper_f$1=maybe_f$1;
}else{
wrapper_f$1=(dc.dynamic $1, dc.dynamic $2, ){
if((maybe_f$1 is dc.Function)){
return (maybe_f$1 as dc.Function)($1, $2, );
}
if((maybe_f$1 is lcoc_core.IFn$iface)){
return ((maybe_f$1 as lcoc_core.IFn$iface).$_invoke$2($1, $2, ));
}
return (lcoc_core.IFn.extensions(maybe_f$1, ).$_invoke$2(maybe_f$1, $1, $2, ));
};
}
a$1.sort(wrapper_f$1, );
final dc.List o7310$2=a$1;
late final dc.dynamic $if_$3;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions(o7310$2, ) as lcoc_core.ISeqable$ext).$_seq$0(o7310$2, ));
}
final dc.dynamic o7524$1=coll$2;
late final dc.dynamic $if_$2;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$2=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$2=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
return lcoc_core.with_meta($if_$3, $if_$2, );
}
return lcoc_core.$_EMPTY_LIST;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sort$ifn

// BEGIN sort-by
lcoc_core.IFn$iface sort_by=lcoc_core.sort_by$ifn(null, );

// END sort-by

// BEGIN sort_by$ifn
class sort_by$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const sort_by$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.sort_by$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic keyfn$1, dc.dynamic coll$1, ){
return (lcoc_core.sort_by.$_invoke$3(keyfn$1, lcoc_core.compare, coll$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic keyfn$2, dc.dynamic comp$1, dc.dynamic coll$2, ){
return (lcoc_core.sort.$_invoke$2((dc.dynamic x$1, dc.dynamic y$1, ){
late final dc.dynamic $if_$2;
if((keyfn$2 is dc.Function)){
$if_$2=(keyfn$2 as dc.Function)(x$1, );
}else if((keyfn$2 is lcoc_core.IFn$iface)){
$if_$2=((keyfn$2 as lcoc_core.IFn$iface).$_invoke$1(x$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(keyfn$2, ).$_invoke$1(keyfn$2, x$1, ));
}
late final dc.dynamic $if_$1;
if((keyfn$2 is dc.Function)){
$if_$1=(keyfn$2 as dc.Function)(y$1, );
}else if((keyfn$2 is lcoc_core.IFn$iface)){
$if_$1=((keyfn$2 as lcoc_core.IFn$iface).$_invoke$1(y$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(keyfn$2, ).$_invoke$1(keyfn$2, y$1, ));
}
late final dc.dynamic $if_$3;
if((comp$1 is dc.Function)){
$if_$3=(comp$1 as dc.Function)($if_$2, $if_$1, );
}else if((comp$1 is lcoc_core.IFn$iface)){
$if_$3=((comp$1 as lcoc_core.IFn$iface).$_invoke$2($if_$2, $if_$1, ));
}else{
$if_$3=(lcoc_core.IFn.extensions(comp$1, ).$_invoke$2(comp$1, $if_$2, $if_$1, ));
}
return ($if_$3 as dc.int);
}, coll$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sort_by$ifn

// BEGIN sp1$24
class sp1$24 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;
final p$1;

const sp1$24(this.meta$2, this.p$1, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.sp1$24((m$2101_$AUTO_$2 as dc.dynamic), (p$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$5, dc.dynamic y$4, dc.dynamic z$3, dc.dynamic args$2, ){
final dc.dynamic or$7228_$AUTO_$5=(this.$_invoke$3(x$5, y$4, z$3, ));
if(((or$7228_$AUTO_$5!=false)&&(or$7228_$AUTO_$5!=null))){
return or$7228_$AUTO_$5;
}
return lcoc_core.some(p$1, args$2, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$6, ){
if((p$1 is dc.Function)){
return (p$1 as dc.Function)(x$6, );
}
if((p$1 is lcoc_core.IFn$iface)){
return ((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$6, ));
}
return (lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$6, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$7, dc.dynamic y$5, ){
late final dc.dynamic or$7228_$AUTO_$6;
if((p$1 is dc.Function)){
or$7228_$AUTO_$6=(p$1 as dc.Function)(x$7, );
}else if((p$1 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$6=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$7, ));
}else{
or$7228_$AUTO_$6=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$7, ));
}
if(((or$7228_$AUTO_$6!=false)&&(or$7228_$AUTO_$6!=null))){
return or$7228_$AUTO_$6;
}
if((p$1 is dc.Function)){
return (p$1 as dc.Function)(y$5, );
}
if((p$1 is lcoc_core.IFn$iface)){
return ((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$5, ));
}
return (lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$5, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$8, dc.dynamic y$6, dc.dynamic z$4, ){
late final dc.dynamic or$7228_$AUTO_$7;
if((p$1 is dc.Function)){
or$7228_$AUTO_$7=(p$1 as dc.Function)(x$8, );
}else if((p$1 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$7=((p$1 as lcoc_core.IFn$iface).$_invoke$1(x$8, ));
}else{
or$7228_$AUTO_$7=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, x$8, ));
}
if(((or$7228_$AUTO_$7!=false)&&(or$7228_$AUTO_$7!=null))){
return or$7228_$AUTO_$7;
}
late final dc.dynamic or$7228_$AUTO_$8;
if((p$1 is dc.Function)){
or$7228_$AUTO_$8=(p$1 as dc.Function)(y$6, );
}else if((p$1 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$8=((p$1 as lcoc_core.IFn$iface).$_invoke$1(y$6, ));
}else{
or$7228_$AUTO_$8=(lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, y$6, ));
}
if(((or$7228_$AUTO_$8!=false)&&(or$7228_$AUTO_$8!=null))){
return or$7228_$AUTO_$8;
}
if((p$1 is dc.Function)){
return (p$1 as dc.Function)(z$4, );
}
if((p$1 is lcoc_core.IFn$iface)){
return ((p$1 as lcoc_core.IFn$iface).$_invoke$1(z$4, ));
}
return (lcoc_core.IFn.extensions(p$1, ).$_invoke$1(p$1, z$4, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sp1$24

// BEGIN sp2$25
class sp2$25 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$3;
final p2$2;
final p1$2;

const sp2$25(this.meta$3, this.p2$2, this.p1$2, ):super();

dc.dynamic $_meta$0(){
return meta$3;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$3, ){
return lcoc_core.sp2$25((m$2101_$AUTO_$3 as dc.dynamic), (p2$2 as dc.dynamic), (p1$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$9, dc.dynamic y$7, dc.dynamic z$5, dc.dynamic args$3, ){
final dc.dynamic or$7228_$AUTO_$9=(this.$_invoke$3(x$9, y$7, z$5, ));
if(((or$7228_$AUTO_$9!=false)&&(or$7228_$AUTO_$9!=null))){
return or$7228_$AUTO_$9;
}
return lcoc_core.some((dc.dynamic p1$8571_$SHARP_$1, ){
late final dc.dynamic or$7228_$AUTO_$10;
if((p1$2 is dc.Function)){
or$7228_$AUTO_$10=(p1$2 as dc.Function)(p1$8571_$SHARP_$1, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$10=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(p1$8571_$SHARP_$1, ));
}else{
or$7228_$AUTO_$10=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, p1$8571_$SHARP_$1, ));
}
if(((or$7228_$AUTO_$10!=false)&&(or$7228_$AUTO_$10!=null))){
return or$7228_$AUTO_$10;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(p1$8571_$SHARP_$1, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(p1$8571_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, p1$8571_$SHARP_$1, ));
}, args$3, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$10, ){
late final dc.dynamic or$7228_$AUTO_$11;
if((p1$2 is dc.Function)){
or$7228_$AUTO_$11=(p1$2 as dc.Function)(x$10, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$11=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}else{
or$7228_$AUTO_$11=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$10, ));
}
if(((or$7228_$AUTO_$11!=false)&&(or$7228_$AUTO_$11!=null))){
return or$7228_$AUTO_$11;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(x$10, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$10, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$10, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$11, dc.dynamic y$8, ){
late final dc.dynamic or$7228_$AUTO_$12;
if((p1$2 is dc.Function)){
or$7228_$AUTO_$12=(p1$2 as dc.Function)(x$11, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$12=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
or$7228_$AUTO_$12=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$11, ));
}
if(((or$7228_$AUTO_$12!=false)&&(or$7228_$AUTO_$12!=null))){
return or$7228_$AUTO_$12;
}
late final dc.dynamic or$7228_$AUTO_$13;
if((p1$2 is dc.Function)){
or$7228_$AUTO_$13=(p1$2 as dc.Function)(y$8, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$13=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}else{
or$7228_$AUTO_$13=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$8, ));
}
if(((or$7228_$AUTO_$13!=false)&&(or$7228_$AUTO_$13!=null))){
return or$7228_$AUTO_$13;
}
late final dc.dynamic or$7228_$AUTO_$14;
if((p2$2 is dc.Function)){
or$7228_$AUTO_$14=(p2$2 as dc.Function)(x$11, );
}else if((p2$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$14=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$11, ));
}else{
or$7228_$AUTO_$14=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$11, ));
}
if(((or$7228_$AUTO_$14!=false)&&(or$7228_$AUTO_$14!=null))){
return or$7228_$AUTO_$14;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(y$8, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$8, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$8, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$12, dc.dynamic y$9, dc.dynamic z$6, ){
late final dc.dynamic or$7228_$AUTO_$15;
if((p1$2 is dc.Function)){
or$7228_$AUTO_$15=(p1$2 as dc.Function)(x$12, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$15=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
or$7228_$AUTO_$15=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, x$12, ));
}
if(((or$7228_$AUTO_$15!=false)&&(or$7228_$AUTO_$15!=null))){
return or$7228_$AUTO_$15;
}
late final dc.dynamic or$7228_$AUTO_$16;
if((p1$2 is dc.Function)){
or$7228_$AUTO_$16=(p1$2 as dc.Function)(y$9, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$16=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
or$7228_$AUTO_$16=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, y$9, ));
}
if(((or$7228_$AUTO_$16!=false)&&(or$7228_$AUTO_$16!=null))){
return or$7228_$AUTO_$16;
}
late final dc.dynamic or$7228_$AUTO_$17;
if((p1$2 is dc.Function)){
or$7228_$AUTO_$17=(p1$2 as dc.Function)(z$6, );
}else if((p1$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$17=((p1$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}else{
or$7228_$AUTO_$17=(lcoc_core.IFn.extensions(p1$2, ).$_invoke$1(p1$2, z$6, ));
}
if(((or$7228_$AUTO_$17!=false)&&(or$7228_$AUTO_$17!=null))){
return or$7228_$AUTO_$17;
}
late final dc.dynamic or$7228_$AUTO_$18;
if((p2$2 is dc.Function)){
or$7228_$AUTO_$18=(p2$2 as dc.Function)(x$12, );
}else if((p2$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$18=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(x$12, ));
}else{
or$7228_$AUTO_$18=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, x$12, ));
}
if(((or$7228_$AUTO_$18!=false)&&(or$7228_$AUTO_$18!=null))){
return or$7228_$AUTO_$18;
}
late final dc.dynamic or$7228_$AUTO_$19;
if((p2$2 is dc.Function)){
or$7228_$AUTO_$19=(p2$2 as dc.Function)(y$9, );
}else if((p2$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$19=((p2$2 as lcoc_core.IFn$iface).$_invoke$1(y$9, ));
}else{
or$7228_$AUTO_$19=(lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, y$9, ));
}
if(((or$7228_$AUTO_$19!=false)&&(or$7228_$AUTO_$19!=null))){
return or$7228_$AUTO_$19;
}
if((p2$2 is dc.Function)){
return (p2$2 as dc.Function)(z$6, );
}
if((p2$2 is lcoc_core.IFn$iface)){
return ((p2$2 as lcoc_core.IFn$iface).$_invoke$1(z$6, ));
}
return (lcoc_core.IFn.extensions(p2$2, ).$_invoke$1(p2$2, z$6, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sp2$25

// BEGIN sp3$26
class sp3$26 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$4;
final p3$2;
final p1$3;
final p2$3;

const sp3$26(this.meta$4, this.p3$2, this.p1$3, this.p2$3, ):super();

dc.dynamic $_meta$0(){
return meta$4;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$4, ){
return lcoc_core.sp3$26((m$2101_$AUTO_$4 as dc.dynamic), (p3$2 as dc.dynamic), (p1$3 as dc.dynamic), (p2$3 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$13, dc.dynamic y$10, dc.dynamic z$7, dc.dynamic args$4, ){
final dc.dynamic or$7228_$AUTO_$20=(this.$_invoke$3(x$13, y$10, z$7, ));
if(((or$7228_$AUTO_$20!=false)&&(or$7228_$AUTO_$20!=null))){
return or$7228_$AUTO_$20;
}
return lcoc_core.some((dc.dynamic p1$8572_$SHARP_$1, ){
late final dc.dynamic or$7228_$AUTO_$21;
if((p1$3 is dc.Function)){
or$7228_$AUTO_$21=(p1$3 as dc.Function)(p1$8572_$SHARP_$1, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$21=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(p1$8572_$SHARP_$1, ));
}else{
or$7228_$AUTO_$21=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, p1$8572_$SHARP_$1, ));
}
if(((or$7228_$AUTO_$21!=false)&&(or$7228_$AUTO_$21!=null))){
return or$7228_$AUTO_$21;
}
late final dc.dynamic or$7228_$AUTO_$22;
if((p2$3 is dc.Function)){
or$7228_$AUTO_$22=(p2$3 as dc.Function)(p1$8572_$SHARP_$1, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$22=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(p1$8572_$SHARP_$1, ));
}else{
or$7228_$AUTO_$22=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, p1$8572_$SHARP_$1, ));
}
if(((or$7228_$AUTO_$22!=false)&&(or$7228_$AUTO_$22!=null))){
return or$7228_$AUTO_$22;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(p1$8572_$SHARP_$1, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(p1$8572_$SHARP_$1, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, p1$8572_$SHARP_$1, ));
}, args$4, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$14, ){
late final dc.dynamic or$7228_$AUTO_$23;
if((p1$3 is dc.Function)){
or$7228_$AUTO_$23=(p1$3 as dc.Function)(x$14, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$23=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
or$7228_$AUTO_$23=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$14, ));
}
if(((or$7228_$AUTO_$23!=false)&&(or$7228_$AUTO_$23!=null))){
return or$7228_$AUTO_$23;
}
late final dc.dynamic or$7228_$AUTO_$24;
if((p2$3 is dc.Function)){
or$7228_$AUTO_$24=(p2$3 as dc.Function)(x$14, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$24=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}else{
or$7228_$AUTO_$24=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$14, ));
}
if(((or$7228_$AUTO_$24!=false)&&(or$7228_$AUTO_$24!=null))){
return or$7228_$AUTO_$24;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(x$14, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$14, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$14, ));
}

dc.dynamic $_invoke$2(dc.dynamic x$15, dc.dynamic y$11, ){
late final dc.dynamic or$7228_$AUTO_$25;
if((p1$3 is dc.Function)){
or$7228_$AUTO_$25=(p1$3 as dc.Function)(x$15, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$25=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
or$7228_$AUTO_$25=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$15, ));
}
if(((or$7228_$AUTO_$25!=false)&&(or$7228_$AUTO_$25!=null))){
return or$7228_$AUTO_$25;
}
late final dc.dynamic or$7228_$AUTO_$26;
if((p2$3 is dc.Function)){
or$7228_$AUTO_$26=(p2$3 as dc.Function)(x$15, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$26=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
or$7228_$AUTO_$26=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$15, ));
}
if(((or$7228_$AUTO_$26!=false)&&(or$7228_$AUTO_$26!=null))){
return or$7228_$AUTO_$26;
}
late final dc.dynamic or$7228_$AUTO_$27;
if((p3$2 is dc.Function)){
or$7228_$AUTO_$27=(p3$2 as dc.Function)(x$15, );
}else if((p3$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$27=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$15, ));
}else{
or$7228_$AUTO_$27=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$15, ));
}
if(((or$7228_$AUTO_$27!=false)&&(or$7228_$AUTO_$27!=null))){
return or$7228_$AUTO_$27;
}
late final dc.dynamic or$7228_$AUTO_$28;
if((p1$3 is dc.Function)){
or$7228_$AUTO_$28=(p1$3 as dc.Function)(y$11, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$28=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
or$7228_$AUTO_$28=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$11, ));
}
if(((or$7228_$AUTO_$28!=false)&&(or$7228_$AUTO_$28!=null))){
return or$7228_$AUTO_$28;
}
late final dc.dynamic or$7228_$AUTO_$29;
if((p2$3 is dc.Function)){
or$7228_$AUTO_$29=(p2$3 as dc.Function)(y$11, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$29=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}else{
or$7228_$AUTO_$29=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$11, ));
}
if(((or$7228_$AUTO_$29!=false)&&(or$7228_$AUTO_$29!=null))){
return or$7228_$AUTO_$29;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(y$11, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$11, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$11, ));
}

dc.dynamic $_invoke$3(dc.dynamic x$16, dc.dynamic y$12, dc.dynamic z$8, ){
late final dc.dynamic or$7228_$AUTO_$30;
if((p1$3 is dc.Function)){
or$7228_$AUTO_$30=(p1$3 as dc.Function)(x$16, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$30=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
or$7228_$AUTO_$30=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, x$16, ));
}
if(((or$7228_$AUTO_$30!=false)&&(or$7228_$AUTO_$30!=null))){
return or$7228_$AUTO_$30;
}
late final dc.dynamic or$7228_$AUTO_$31;
if((p2$3 is dc.Function)){
or$7228_$AUTO_$31=(p2$3 as dc.Function)(x$16, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$31=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
or$7228_$AUTO_$31=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, x$16, ));
}
if(((or$7228_$AUTO_$31!=false)&&(or$7228_$AUTO_$31!=null))){
return or$7228_$AUTO_$31;
}
late final dc.dynamic or$7228_$AUTO_$32;
if((p3$2 is dc.Function)){
or$7228_$AUTO_$32=(p3$2 as dc.Function)(x$16, );
}else if((p3$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$32=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(x$16, ));
}else{
or$7228_$AUTO_$32=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, x$16, ));
}
if(((or$7228_$AUTO_$32!=false)&&(or$7228_$AUTO_$32!=null))){
return or$7228_$AUTO_$32;
}
late final dc.dynamic or$7228_$AUTO_$33;
if((p1$3 is dc.Function)){
or$7228_$AUTO_$33=(p1$3 as dc.Function)(y$12, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$33=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
or$7228_$AUTO_$33=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, y$12, ));
}
if(((or$7228_$AUTO_$33!=false)&&(or$7228_$AUTO_$33!=null))){
return or$7228_$AUTO_$33;
}
late final dc.dynamic or$7228_$AUTO_$34;
if((p2$3 is dc.Function)){
or$7228_$AUTO_$34=(p2$3 as dc.Function)(y$12, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$34=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
or$7228_$AUTO_$34=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, y$12, ));
}
if(((or$7228_$AUTO_$34!=false)&&(or$7228_$AUTO_$34!=null))){
return or$7228_$AUTO_$34;
}
late final dc.dynamic or$7228_$AUTO_$35;
if((p3$2 is dc.Function)){
or$7228_$AUTO_$35=(p3$2 as dc.Function)(y$12, );
}else if((p3$2 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$35=((p3$2 as lcoc_core.IFn$iface).$_invoke$1(y$12, ));
}else{
or$7228_$AUTO_$35=(lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, y$12, ));
}
if(((or$7228_$AUTO_$35!=false)&&(or$7228_$AUTO_$35!=null))){
return or$7228_$AUTO_$35;
}
late final dc.dynamic or$7228_$AUTO_$36;
if((p1$3 is dc.Function)){
or$7228_$AUTO_$36=(p1$3 as dc.Function)(z$8, );
}else if((p1$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$36=((p1$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
or$7228_$AUTO_$36=(lcoc_core.IFn.extensions(p1$3, ).$_invoke$1(p1$3, z$8, ));
}
if(((or$7228_$AUTO_$36!=false)&&(or$7228_$AUTO_$36!=null))){
return or$7228_$AUTO_$36;
}
late final dc.dynamic or$7228_$AUTO_$37;
if((p2$3 is dc.Function)){
or$7228_$AUTO_$37=(p2$3 as dc.Function)(z$8, );
}else if((p2$3 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$37=((p2$3 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}else{
or$7228_$AUTO_$37=(lcoc_core.IFn.extensions(p2$3, ).$_invoke$1(p2$3, z$8, ));
}
if(((or$7228_$AUTO_$37!=false)&&(or$7228_$AUTO_$37!=null))){
return or$7228_$AUTO_$37;
}
if((p3$2 is dc.Function)){
return (p3$2 as dc.Function)(z$8, );
}
if((p3$2 is lcoc_core.IFn$iface)){
return ((p3$2 as lcoc_core.IFn$iface).$_invoke$1(z$8, ));
}
return (lcoc_core.IFn.extensions(p3$2, ).$_invoke$1(p3$2, z$8, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END sp3$26

// BEGIN split-at
dc.dynamic split_at(dc.dynamic n$1, dc.dynamic coll$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.take.$_invoke$2(n$1, coll$1, )), ));
fl$1[1]=(lcoc_core.drop.$_invoke$2(n$1, coll$1, ));
return lcoc_core.$_vec_owning(fl$1, );
}

// END split-at

// BEGIN split-with
dc.dynamic split_with(dc.dynamic pred$1, dc.dynamic coll$1, ){
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, (lcoc_core.take_while.$_invoke$2(pred$1, coll$1, )), ));
fl$1[1]=(lcoc_core.drop_while.$_invoke$2(pred$1, coll$1, ));
return lcoc_core.$_vec_owning(fl$1, );
}

// END split-with

// BEGIN spn$23
class spn$23 extends dc.Object with lcoc_core.IFnMixin_XXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;
final ps$2;

const spn$23(this.meta$1, this.ps$2, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.spn$23((m$2101_$AUTO_$1 as dc.dynamic), (ps$2 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic args$1, ){
final dc.dynamic or$7228_$AUTO_$1=(this.$_invoke$3(x$1, y$1, z$1, ));
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
return or$7228_$AUTO_$1;
}
return lcoc_core.some((dc.dynamic p1$8576_$SHARP_$1, ){
return lcoc_core.some(p1$8576_$SHARP_$1, args$1, );
}, ps$2, );
}

dc.dynamic $_invoke$0(){
return null;
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
return lcoc_core.some((dc.dynamic p1$8573_$SHARP_$1, ){
if((p1$8573_$SHARP_$1 is dc.Function)){
return (p1$8573_$SHARP_$1 as dc.Function)(x$2, );
}
if((p1$8573_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$8573_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$2, ));
}
return (lcoc_core.IFn.extensions(p1$8573_$SHARP_$1, ).$_invoke$1(p1$8573_$SHARP_$1, x$2, ));
}, ps$2, );
}

dc.dynamic $_invoke$2(dc.dynamic x$3, dc.dynamic y$2, ){
return lcoc_core.some((dc.dynamic p1$8574_$SHARP_$1, ){
late final dc.dynamic or$7228_$AUTO_$2;
if((p1$8574_$SHARP_$1 is dc.Function)){
or$7228_$AUTO_$2=(p1$8574_$SHARP_$1 as dc.Function)(x$3, );
}else if((p1$8574_$SHARP_$1 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$2=((p1$8574_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$3, ));
}else{
or$7228_$AUTO_$2=(lcoc_core.IFn.extensions(p1$8574_$SHARP_$1, ).$_invoke$1(p1$8574_$SHARP_$1, x$3, ));
}
if(((or$7228_$AUTO_$2!=false)&&(or$7228_$AUTO_$2!=null))){
return or$7228_$AUTO_$2;
}
if((p1$8574_$SHARP_$1 is dc.Function)){
return (p1$8574_$SHARP_$1 as dc.Function)(y$2, );
}
if((p1$8574_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$8574_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$2, ));
}
return (lcoc_core.IFn.extensions(p1$8574_$SHARP_$1, ).$_invoke$1(p1$8574_$SHARP_$1, y$2, ));
}, ps$2, );
}

dc.dynamic $_invoke$3(dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
return lcoc_core.some((dc.dynamic p1$8575_$SHARP_$1, ){
late final dc.dynamic or$7228_$AUTO_$3;
if((p1$8575_$SHARP_$1 is dc.Function)){
or$7228_$AUTO_$3=(p1$8575_$SHARP_$1 as dc.Function)(x$4, );
}else if((p1$8575_$SHARP_$1 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$3=((p1$8575_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(x$4, ));
}else{
or$7228_$AUTO_$3=(lcoc_core.IFn.extensions(p1$8575_$SHARP_$1, ).$_invoke$1(p1$8575_$SHARP_$1, x$4, ));
}
if(((or$7228_$AUTO_$3!=false)&&(or$7228_$AUTO_$3!=null))){
return or$7228_$AUTO_$3;
}
late final dc.dynamic or$7228_$AUTO_$4;
if((p1$8575_$SHARP_$1 is dc.Function)){
or$7228_$AUTO_$4=(p1$8575_$SHARP_$1 as dc.Function)(y$3, );
}else if((p1$8575_$SHARP_$1 is lcoc_core.IFn$iface)){
or$7228_$AUTO_$4=((p1$8575_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(y$3, ));
}else{
or$7228_$AUTO_$4=(lcoc_core.IFn.extensions(p1$8575_$SHARP_$1, ).$_invoke$1(p1$8575_$SHARP_$1, y$3, ));
}
if(((or$7228_$AUTO_$4!=false)&&(or$7228_$AUTO_$4!=null))){
return or$7228_$AUTO_$4;
}
if((p1$8575_$SHARP_$1 is dc.Function)){
return (p1$8575_$SHARP_$1 as dc.Function)(z$2, );
}
if((p1$8575_$SHARP_$1 is lcoc_core.IFn$iface)){
return ((p1$8575_$SHARP_$1 as lcoc_core.IFn$iface).$_invoke$1(z$2, ));
}
return (lcoc_core.IFn.extensions(p1$8575_$SHARP_$1, ).$_invoke$1(p1$8575_$SHARP_$1, z$2, ));
}, ps$2, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END spn$23

// BEGIN spread
dc.dynamic spread(dc.dynamic arglist$1, ){
if((null==(arglist$1 as dc.dynamic))){
return null;
}
if((null==(lcoc_core.next(arglist$1, ) as dc.dynamic))){
final dc.dynamic o7310$1=lcoc_core.first(arglist$1, );
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
return lcoc_core.cons(lcoc_core.first(arglist$1, ), lcoc_core.spread(lcoc_core.next(arglist$1, ), ), );
}

// END spread

// BEGIN str
lcoc_core.IFn$iface str=lcoc_core.str$ifn(null, );

// END str

// BEGIN str$ifn
class str$ifn extends dc.Object with lcoc_core.IFnMixin_XY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const str$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.str$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic x$1, dc.dynamic xs$1, ){
final dc.StringBuffer sb$1=dc.StringBuffer((lcoc_core.str.$_invoke$1(x$1, )), );
dc.dynamic xs$2=(xs$1 as dc.dynamic);
do {
if((xs$2!=null)){
sb$1.write((lcoc_core.str.$_invoke$1(lcoc_core.first(xs$2, ), )), );
xs$2=lcoc_core.next(xs$2, );
continue;
}
break;
} while(true);
return (sb$1.toString());
}

dc.dynamic $_invoke$0(){
return "";
}

dc.dynamic $_invoke$1(dc.dynamic x$2, ){
if((null==(x$2 as dc.dynamic))){
return "";
}
return (x$2.toString());
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END str$ifn

// BEGIN string?
dc.bool string$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.String);
}

// END string?

// BEGIN subs
lcoc_core.IFn$iface subs=lcoc_core.subs$ifn(null, );

// END subs

// BEGIN subs$ifn
class subs$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const subs$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.subs$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic s$1, dc.dynamic start$1, ){
final dc.String s$2=(s$1 as dc.String);
return (s$2.substring((start$1 as dc.int), ));
}

dc.dynamic $_invoke$3(dc.dynamic s$3, dc.dynamic start$2, dc.dynamic end$1, ){
final dc.String s$4=(s$3 as dc.String);
return (s$4.substring((start$2 as dc.int), (end$1 as dc.int?), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END subs$ifn

// BEGIN subvec
lcoc_core.IFn$iface subvec=lcoc_core.subvec$ifn(null, );

// END subvec

// BEGIN subvec$ifn
class subvec$ifn extends dc.Object with lcoc_core.IFnMixin_uuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const subvec$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.subvec$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$2(dc.dynamic v$1, dc.dynamic start$1, ){
final dc.num start$2=(start$1 as dc.num);
final dc.dynamic coll7390$1=v$1;
late final dc.dynamic $if_$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
$if_$1=((coll7390$1 as lcoc_core.ICounted$iface).$_count$0());
}else{
$if_$1=((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), ));
}
return (lcoc_core.subvec.$_invoke$3(v$1, start$2, $if_$1, ));
}

dc.dynamic $_invoke$3(dc.dynamic v$2, dc.dynamic start$3, dc.dynamic end$1, ){
final dc.num start$4=(start$3 as dc.num);
final dc.num end$2=(end$1 as dc.num);
final dc.dynamic coll7390$2=v$2;
late final dc.dynamic n$1;
if((coll7390$2 is lcoc_core.ICounted$iface)){
n$1=((coll7390$2 as lcoc_core.ICounted$iface).$_count$0());
}else{
n$1=((lcoc_core.ICounted.extensions((coll7390$2 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$2 as dc.dynamic), ));
}
final dc.int start$5=(start$4.toInt());
final dc.int end$3=(end$2.toInt());
late final dc.bool $if_$2;
if(((lcoc_core.ISubvecable.satisfies((v$2 as dc.dynamic), )) as dc.bool)){
$if_$2=false;
}else{
$if_$2=true;
}
if($if_$2){
throw dc.ArgumentError("v must satisfy ISubvecable", );
}
final dc.bool or$7228_$AUTO_$1=(0>start$5);
late final dc.bool $if_$3;
if(or$7228_$AUTO_$1){
$if_$3=or$7228_$AUTO_$1;
}else{
final dc.bool or$7228_$AUTO_$2=(end$3<start$5);
if(or$7228_$AUTO_$2){
$if_$3=or$7228_$AUTO_$2;
}else{
$if_$3=((n$1 as dc.num)<end$3);
}
}
if($if_$3){
throw dc.ArgumentError("Index out of bounds", );
}
final dc.bool and$7187_$AUTO_$1=(0==start$5);
late final dc.bool $if_$4;
if(and$7187_$AUTO_$1){
$if_$4=(end$3==n$1);
}else{
$if_$4=and$7187_$AUTO_$1;
}
if($if_$4){
return v$2;
}
if((start$5<end$3)){
final dc.dynamic vector7433$1=v$2;
final dc.int start7434$1=start$5;
final dc.int end7435$1=end$3;
if((vector7433$1 is lcoc_core.ISubvecable$iface)){
return ((vector7433$1 as lcoc_core.ISubvecable$iface).$_subvec$2(start7434$1, end7435$1, ));
}
return ((lcoc_core.ISubvecable.extensions((vector7433$1 as dc.dynamic), ) as lcoc_core.ISubvecable$ext).$_subvec$2((vector7433$1 as dc.dynamic), start7434$1, end7435$1, ));
}
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END subvec$ifn

// BEGIN swap!
lcoc_core.IFn$iface swap$BANG_=lcoc_core.swap$BANG_$ifn(null, );

// END swap!

// BEGIN swap$BANG_$ifn
class swap$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uuXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const swap$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.swap$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic f$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final dc.dynamic o7603$1=a$1;
final dc.dynamic f7604$1=f$1;
final dc.dynamic a7605$1=x$1;
final dc.dynamic b7606$1=y$1;
final dc.dynamic xs7607$1=more$1;
if((o7603$1 is lcoc_core.ISwap$iface)){
return ((o7603$1 as lcoc_core.ISwap$iface).$_swap$BANG_$4((f7604$1 as dc.dynamic), (a7605$1 as dc.dynamic), (b7606$1 as dc.dynamic), (xs7607$1 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o7603$1 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$4((o7603$1 as dc.dynamic), (f7604$1 as dc.dynamic), (a7605$1 as dc.dynamic), (b7606$1 as dc.dynamic), (xs7607$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$2(dc.dynamic a$2, dc.dynamic f$2, ){
final dc.dynamic o7616$1=a$2;
final dc.dynamic f7617$1=f$2;
if((o7616$1 is lcoc_core.ISwap$iface)){
return ((o7616$1 as lcoc_core.ISwap$iface).$_swap$BANG_$1((f7617$1 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o7616$1 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$1((o7616$1 as dc.dynamic), (f7617$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic a$3, dc.dynamic f$3, dc.dynamic x$2, ){
final dc.dynamic o7613$1=a$3;
final dc.dynamic f7614$1=f$3;
final dc.dynamic a7615$1=x$2;
if((o7613$1 is lcoc_core.ISwap$iface)){
return ((o7613$1 as lcoc_core.ISwap$iface).$_swap$BANG_$2((f7614$1 as dc.dynamic), (a7615$1 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o7613$1 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$2((o7613$1 as dc.dynamic), (f7614$1 as dc.dynamic), (a7615$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$4(dc.dynamic a$4, dc.dynamic f$4, dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic o7609$1=a$4;
final dc.dynamic f7610$1=f$4;
final dc.dynamic a7611$1=x$3;
final dc.dynamic b7612$1=y$2;
if((o7609$1 is lcoc_core.ISwap$iface)){
return ((o7609$1 as lcoc_core.ISwap$iface).$_swap$BANG_$3((f7610$1 as dc.dynamic), (a7611$1 as dc.dynamic), (b7612$1 as dc.dynamic), ));
}
return ((lcoc_core.ISwap.extensions((o7609$1 as dc.dynamic), ) as lcoc_core.ISwap$ext).$_swap$BANG_$3((o7609$1 as dc.dynamic), (f7610$1 as dc.dynamic), (a7611$1 as dc.dynamic), (b7612$1 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END swap$BANG_$ifn

// BEGIN swap-vals!
lcoc_core.IFn$iface swap_vals$BANG_=lcoc_core.swap_vals$BANG_$ifn(null, );

// END swap-vals!

// BEGIN swap_vals$BANG_$ifn
class swap_vals$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uuXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const swap_vals$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.swap_vals$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic f$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic more$1, ){
final lcoc_core.Atom a$2=(a$1 as lcoc_core.Atom);
final dc.dynamic old_state$1=a$2.state;
final dc.List<dc.dynamic> fl$1=(dc.List<dc.dynamic>.filled(2, old_state$1, ));
fl$1[1]=(lcoc_core.apply.$_invoke$6(lcoc_core.swap$BANG_, a$2, f$1, x$1, y$1, more$1, ));
return lcoc_core.$_vec_owning(fl$1, );
}

dc.dynamic $_invoke$2(dc.dynamic a$3, dc.dynamic f$2, ){
final lcoc_core.Atom a$4=(a$3 as lcoc_core.Atom);
final dc.dynamic old_state$2=a$4.state;
final dc.List<dc.dynamic> fl$2=(dc.List<dc.dynamic>.filled(2, old_state$2, ));
fl$2[1]=(lcoc_core.swap$BANG_.$_invoke$2(a$4, f$2, ));
return lcoc_core.$_vec_owning(fl$2, );
}

dc.dynamic $_invoke$3(dc.dynamic a$5, dc.dynamic f$3, dc.dynamic x$2, ){
final lcoc_core.Atom a$6=(a$5 as lcoc_core.Atom);
final dc.dynamic old_state$3=a$6.state;
final dc.List<dc.dynamic> fl$3=(dc.List<dc.dynamic>.filled(2, old_state$3, ));
fl$3[1]=(lcoc_core.swap$BANG_.$_invoke$3(a$6, f$3, x$2, ));
return lcoc_core.$_vec_owning(fl$3, );
}

dc.dynamic $_invoke$4(dc.dynamic a$7, dc.dynamic f$4, dc.dynamic x$3, dc.dynamic y$2, ){
final lcoc_core.Atom a$8=(a$7 as lcoc_core.Atom);
final dc.dynamic old_state$4=a$8.state;
final dc.List<dc.dynamic> fl$4=(dc.List<dc.dynamic>.filled(2, old_state$4, ));
fl$4[1]=(lcoc_core.swap$BANG_.$_invoke$4(a$8, f$4, x$3, y$2, ));
return lcoc_core.$_vec_owning(fl$4, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END swap_vals$BANG_$ifn

// BEGIN symbol
lcoc_core.IFn$iface symbol=lcoc_core.symbol$ifn(null, );

// END symbol

// BEGIN symbol$ifn
class symbol$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const symbol$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.symbol$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic name$1, ){
if(lcoc_core.symbol$QMARK_(name$1, )){
return name$1;
}
if(lcoc_core.string$QMARK_(name$1, )){
final dc.String name$2=(name$1 as dc.String);
final dc.int idx$1=(name$2.indexOf("/", ));
if((idx$1<0)){
return (lcoc_core.symbol.$_invoke$2(null, name$2, ));
}
return (lcoc_core.symbol.$_invoke$2((name$2.substring(0, idx$1, )), (name$2.substring((1+idx$1), )), ));
}
if(lcoc_core.keyword$QMARK_(name$1, )){
final lcoc_core.Keyword k$1=(name$1 as lcoc_core.Keyword);
return (lcoc_core.symbol.$_invoke$2(k$1.ns, k$1.name, ));
}
throw dc.Exception((lcoc_core.str.$_invoke$2("no conversion to symbol on ", name$1.runtimeType, )), );
}

dc.dynamic $_invoke$2(dc.dynamic ns$1, dc.dynamic name$3, ){
return lcoc_core.Symbol((ns$1 as dc.String?), (name$3 as dc.String), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END symbol$ifn

// BEGIN symbol?
dc.bool symbol$QMARK_(dc.dynamic x$1, ){
return (x$1 is lcoc_core.Symbol);
}

// END symbol?

// BEGIN tagged-literal
var tagged_literal=null;

// END tagged-literal

// BEGIN take
lcoc_core.IFn$iface take=lcoc_core.take$ifn(null, );

// END take

// BEGIN take$ifn
class take$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const take$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.take$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile nv$1=lcoc_core.volatile$BANG_(n$1, );
final dc.dynamic f$1=lcoc_core.Reify$32(null, rf$1, nv$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$3, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
if((0<(n$3 as dc.num))){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.take.$_invoke$2(((n$3 as dc.num)-1), lcoc_core.rest(s$1, ), )), );
}
return null;
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END take$ifn

// BEGIN take-last
dc.dynamic take_last(dc.dynamic n$1, dc.dynamic coll$1, ){
final dc.dynamic o7310$1=coll$1;
dc.dynamic s$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic o7310$2=(lcoc_core.drop.$_invoke$2(n$1, coll$1, ));
dc.dynamic lead$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
lead$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
lead$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
do {
if(((lead$1!=false)&&(lead$1!=null))){
s$1=lcoc_core.next(s$1, );
lead$1=lcoc_core.next(lead$1, );
continue;
}
return s$1;
} while(true);
}

// END take-last

// BEGIN take-nth
lcoc_core.IFn$iface take_nth=lcoc_core.take_nth$ifn(null, );

// END take-nth

// BEGIN take-while
lcoc_core.IFn$iface take_while=lcoc_core.take_while$ifn(null, );

// END take-while

// BEGIN take_nth$ifn
class take_nth$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const take_nth$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.take_nth$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic n$1, ){
return (dc.dynamic rf$1, ){
final lcoc_core.Volatile iv$1=lcoc_core.volatile$BANG_(-1, );
final dc.dynamic f$1=lcoc_core.Reify$34(null, n$1, iv$1, rf$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic n$2, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.take_nth.$_invoke$2(n$2, (lcoc_core.drop.$_invoke$2(n$2, s$1, )), )), );
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END take_nth$ifn

// BEGIN take_while$ifn
class take_while$ifn extends dc.Object with lcoc_core.IFnMixin_uXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$2;

const take_while$ifn(this.meta$2, ):super();

dc.dynamic $_meta$0(){
return meta$2;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$2, ){
return lcoc_core.take_while$ifn((m$2101_$AUTO_$2 as dc.dynamic), );
}

dc.dynamic $_invoke$1(dc.dynamic pred$1, ){
return (dc.dynamic rf$1, ){
final dc.dynamic f$1=lcoc_core.Reify$33(null, rf$1, pred$1, );
return f$1;
};
}

dc.dynamic $_invoke$2(dc.dynamic pred$2, dc.dynamic coll$1, ){
return lcoc_core.LazySeq(null, ((){
final dc.dynamic o7310$1=coll$1;
late final dc.dynamic temp$7215_$AUTO_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
temp$7215_$AUTO_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
temp$7215_$AUTO_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
if(((temp$7215_$AUTO_$1!=false)&&(temp$7215_$AUTO_$1!=null))){
final dc.dynamic s$1=temp$7215_$AUTO_$1;
final dc.dynamic arg$1=lcoc_core.first(s$1, );
late final dc.dynamic $if_$2;
if((pred$2 is dc.Function)){
$if_$2=(pred$2 as dc.Function)(arg$1, );
}else if((pred$2 is lcoc_core.IFn$iface)){
$if_$2=((pred$2 as lcoc_core.IFn$iface).$_invoke$1(arg$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(pred$2, ).$_invoke$1(pred$2, arg$1, ));
}
if((($if_$2!=false)&&($if_$2!=null))){
return lcoc_core.cons(lcoc_core.first(s$1, ), (lcoc_core.take_while.$_invoke$2(pred$2, lcoc_core.rest(s$1, ), )), );
}
return null;
}
return null;
} as dc.dynamic), null, -1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END take_while$ifn

// BEGIN to-array
dc.List to_array(dc.dynamic coll$1, ){
if((coll$1 is dc.List)){
return ((coll$1 as dc.List).toList(growable: false, ));
}
final dc.dynamic coll7390$1=coll$1;
late final dc.int length$1;
if((coll7390$1 is lcoc_core.ICounted$iface)){
length$1=(((coll7390$1 as lcoc_core.ICounted$iface).$_count$0()) as dc.int);
}else{
length$1=(((lcoc_core.ICounted.extensions((coll7390$1 as dc.dynamic), ) as lcoc_core.ICounted$ext).$_count$0((coll7390$1 as dc.dynamic), )) as dc.int);
}
final dc.List<dc.dynamic> ary$1=(dc.List.filled(length$1, null, ));
final dc.dynamic o7310$1=coll$1;
dc.dynamic s$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
s$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
s$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
dc.int idx$1=0;
do {
if((null==(s$1 as dc.dynamic))){
return ary$1;
}
final dc.dynamic v$7774_$AUTO_$1=lcoc_core.first(s$1, );
ary$1[idx$1]=(v$7774_$AUTO_$1 as dc.dynamic);
s$1=lcoc_core.next(s$1, );
idx$1=(1+idx$1);
continue;
} while(true);
}

// END to-array

// BEGIN transduce
lcoc_core.IFn$iface transduce=lcoc_core.transduce$ifn(null, );

// END transduce

// BEGIN transduce$ifn
class transduce$ifn extends dc.Object with lcoc_core.IFnMixin_uuuXX implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const transduce$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.transduce$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$3(dc.dynamic xform$1, dc.dynamic f$1, dc.dynamic coll$1, ){
late final dc.dynamic $if_$1;
if((f$1 is dc.Function)){
$if_$1=(f$1 as dc.Function)();
}else if((f$1 is lcoc_core.IFn$iface)){
$if_$1=((f$1 as lcoc_core.IFn$iface).$_invoke$0());
}else{
$if_$1=(lcoc_core.IFn.extensions(f$1, ).$_invoke$0(f$1, ));
}
return (lcoc_core.transduce.$_invoke$4(xform$1, f$1, $if_$1, coll$1, ));
}

dc.dynamic $_invoke$4(dc.dynamic xform$2, dc.dynamic f$2, dc.dynamic init$1, dc.dynamic coll$2, ){
late final dc.dynamic f$3;
if((xform$2 is dc.Function)){
f$3=(xform$2 as dc.Function)(f$2, );
}else if((xform$2 is lcoc_core.IFn$iface)){
f$3=((xform$2 as lcoc_core.IFn$iface).$_invoke$1(f$2, ));
}else{
f$3=(lcoc_core.IFn.extensions(xform$2, ).$_invoke$1(xform$2, f$2, ));
}
final dc.dynamic coll7370$1=coll$2;
final dc.dynamic f7371$1=f$3;
final dc.dynamic start7372$1=init$1;
late final dc.dynamic $if_$2;
if((coll7370$1 is lcoc_core.IReduce$iface)){
$if_$2=((coll7370$1 as lcoc_core.IReduce$iface).$_reduce$2(f7371$1, (start7372$1 as dc.dynamic), ));
}else{
$if_$2=((lcoc_core.IReduce.extensions((coll7370$1 as dc.dynamic), ) as lcoc_core.IReduce$ext).$_reduce$2((coll7370$1 as dc.dynamic), f7371$1, (start7372$1 as dc.dynamic), ));
}
if((f$3 is dc.Function)){
return (f$3 as dc.Function)($if_$2, );
}
if((f$3 is lcoc_core.IFn$iface)){
return ((f$3 as lcoc_core.IFn$iface).$_invoke$1($if_$2, ));
}
return (lcoc_core.IFn.extensions(f$3, ).$_invoke$1(f$3, $if_$2, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END transduce$ifn

// BEGIN transient
dc.dynamic transient(dc.dynamic coll$1, ){
final dc.dynamic coll7563$1=coll$1;
if((coll7563$1 is lcoc_core.IEditableCollection$iface)){
return ((coll7563$1 as lcoc_core.IEditableCollection$iface).$_as_transient$0());
}
return ((lcoc_core.IEditableCollection.extensions((coll7563$1 as dc.dynamic), ) as lcoc_core.IEditableCollection$ext).$_as_transient$0((coll7563$1 as dc.dynamic), ));
}

// END transient

// BEGIN tree-seq
dc.dynamic tree_seq(dc.dynamic branch$QMARK_$1, dc.dynamic children$1, dc.dynamic root$1, ){
lcoc_core.LazySeq walk$1(dc.dynamic node$1, ){
return lcoc_core.LazySeq(null, ((){
late final dc.dynamic $if_$4;
if((branch$QMARK_$1 is dc.Function)){
$if_$4=(branch$QMARK_$1 as dc.Function)(node$1, );
}else if((branch$QMARK_$1 is lcoc_core.IFn$iface)){
$if_$4=((branch$QMARK_$1 as lcoc_core.IFn$iface).$_invoke$1(node$1, ));
}else{
$if_$4=(lcoc_core.IFn.extensions(branch$QMARK_$1, ).$_invoke$1(branch$QMARK_$1, node$1, ));
}
late final dc.dynamic $if_$6;
if((($if_$4!=false)&&($if_$4!=null))){
late final dc.dynamic $if_$5;
if((children$1 is dc.Function)){
$if_$5=(children$1 as dc.Function)(node$1, );
}else if((children$1 is lcoc_core.IFn$iface)){
$if_$5=((children$1 as lcoc_core.IFn$iface).$_invoke$1(node$1, ));
}else{
$if_$5=(lcoc_core.IFn.extensions(children$1, ).$_invoke$1(children$1, node$1, ));
}
$if_$6=(lcoc_core.mapcat.$_invoke$2(walk$1, $if_$5, ));
}else{
$if_$6=null;
}
return lcoc_core.cons(node$1, $if_$6, );
} as dc.dynamic), null, -1, );
}
final lcoc_core.LazySeq Function(dc.dynamic, ) walk$2=walk$1;
return walk$2(root$1, );
}

// END tree-seq

// BEGIN true?
dc.bool true$QMARK_(dc.dynamic x$1, ){
return dc.identical((x$1 as dc.Object?), true, );
}

// END true?

// BEGIN tv-editable-array-for
dc.dynamic tv_editable_array_for(dc.dynamic tv$1, dc.dynamic i$1, ){
final lcoc_core.TransientVector arg$2=(tv$1 as lcoc_core.TransientVector);
final lcoc_core.VectorNode arg$1=lcoc_core.tv_ensure_editable((tv$1 as lcoc_core.TransientVector).edit, (tv$1 as lcoc_core.TransientVector).root, );
arg$2.root=arg$1;
lcoc_core.VectorNode node$1=arg$1;
dc.int level$1=(tv$1 as lcoc_core.TransientVector).shift;
do {
if((0<level$1)){
final dc.List arr$1=node$1.arr;
final dc.int j$1=(((i$1 as dc.int)>>(31&level$1))&31);
final lcoc_core.VectorNode v$7774_$AUTO_$1=lcoc_core.tv_ensure_editable((tv$1 as lcoc_core.TransientVector).edit, (arr$1[j$1]), );
arr$1[j$1]=v$7774_$AUTO_$1;
node$1=v$7774_$AUTO_$1;
level$1=(level$1-5);
continue;
}
return node$1.arr;
} while(true);
}

// END tv-editable-array-for

// BEGIN tv-ensure-editable
lcoc_core.VectorNode tv_ensure_editable(dc.dynamic edit$1, dc.dynamic node$1, ){
if(dc.identical((edit$1 as dc.Object?), (node$1 as lcoc_core.VectorNode).edit, )){
return (node$1 as lcoc_core.VectorNode);
}
final dc.List arr$1=(node$1 as lcoc_core.VectorNode).arr;
return lcoc_core.VectorNode((edit$1 as dc.dynamic), lcoc_core.aresize(arr$1, arr$1.length, 32, null, ), );
}

// END tv-ensure-editable

// BEGIN tv-new-path
lcoc_core.VectorNode tv_new_path(dc.dynamic edit$1, dc.dynamic level$1, dc.dynamic node$1, ){
dc.int ll$1=(level$1 as dc.int);
lcoc_core.VectorNode ret$1=(node$1 as lcoc_core.VectorNode);
do {
if((0==ll$1)){
return ret$1;
}
final dc.List<dc.dynamic> arr$1=(dc.List<dc.dynamic>.filled(32, null, ));
final lcoc_core.VectorNode v$7774_$AUTO_$1=ret$1;
arr$1[0]=v$7774_$AUTO_$1;
ll$1=(ll$1-5);
ret$1=lcoc_core.VectorNode((edit$1 as dc.dynamic), arr$1, );
continue;
} while(true);
}

// END tv-new-path

// BEGIN tv-pop-tail!
dc.dynamic tv_pop_tail$BANG_(dc.dynamic tv$1, dc.dynamic level$1, dc.dynamic node$1, ){
final dc.int n$1=((tv$1 as lcoc_core.TransientVector).cnt-2);
final dc.int subidx$1=((n$1>>(31&(level$1 as dc.int)))&31);
if((5<(level$1 as dc.int))){
final dc.dynamic or$7228_$AUTO_$1=lcoc_core.tv_pop_tail$BANG_((tv$1 as lcoc_core.TransientVector), ((level$1 as dc.int)-5), ((node$1 as lcoc_core.VectorNode).arr[subidx$1]), );
if(((or$7228_$AUTO_$1!=false)&&(or$7228_$AUTO_$1!=null))){
return or$7228_$AUTO_$1;
}
if((0<subidx$1)){
final dc.Null v$7774_$AUTO_$1=null;
(node$1 as lcoc_core.VectorNode).arr[subidx$1]=v$7774_$AUTO_$1;
return true;
}
return null;
}
if((0<subidx$1)){
final dc.Null v$7774_$AUTO_$2=null;
(node$1 as lcoc_core.VectorNode).arr[subidx$1]=v$7774_$AUTO_$2;
return true;
}
return null;
}

// END tv-pop-tail!

// BEGIN tv-push-tail
lcoc_core.VectorNode tv_push_tail(dc.dynamic tv$1, dc.dynamic level$1, dc.dynamic parent$1, dc.dynamic tail_node$1, ){
final dc.dynamic edit$1=(tv$1 as lcoc_core.TransientVector).edit;
final lcoc_core.VectorNode ret$1=lcoc_core.tv_ensure_editable(edit$1, (parent$1 as lcoc_core.VectorNode), );
final dc.int subidx$1=((((tv$1 as lcoc_core.TransientVector).cnt-1)>>(31&(level$1 as dc.int)))&31);
final dc.int level$2=((level$1 as dc.int)-5);
late final dc.dynamic v$7774_$AUTO_$1;
if((0==level$2)){
v$7774_$AUTO_$1=tail_node$1;
}else{
final dc.dynamic child$1=(ret$1.arr[subidx$1]);
if((null==child$1)){
v$7774_$AUTO_$1=lcoc_core.tv_new_path(edit$1, level$2, tail_node$1, );
}else{
v$7774_$AUTO_$1=lcoc_core.tv_push_tail((tv$1 as lcoc_core.TransientVector), level$2, child$1, tail_node$1, );
}
}
ret$1.arr[subidx$1]=v$7774_$AUTO_$1;
return ret$1;
}

// END tv-push-tail

// BEGIN u32
dc.int u32(dc.dynamic x$1, ){
return (4294967295&(x$1 as dc.int));
}

// END u32

// BEGIN u32-add
dc.int u32_add(dc.dynamic x$1, dc.dynamic y$1, ){
return (4294967295&((x$1 as dc.int)+(y$1 as dc.int)));
}

// END u32-add

// BEGIN u32-bit-count
dc.int u32_bit_count(dc.dynamic v$1, ){
final dc.int v$2=((v$1 as dc.int)-(((v$1 as dc.int)>>(1&63))&1431655765));
final dc.int v$3=((v$2&858993459)+((v$2>>(2&63))&858993459));
return (63&((((v$3+(v$3>>(4&63)))&252645135)*16843009)>>(24&63)));
}

// END u32-bit-count

// BEGIN u32-bit-shift-left
dc.int u32_bit_shift_left(dc.dynamic x$1, dc.dynamic n$1, ){
return (4294967295&((x$1 as dc.int)<<(31&(n$1 as dc.int))));
}

// END u32-bit-shift-left

// BEGIN u32-bit-shift-right
dc.int u32_bit_shift_right(dc.dynamic x$1, dc.dynamic n$1, ){
return ((x$1 as dc.int)>>(31&(n$1 as dc.int)));
}

// END u32-bit-shift-right

// BEGIN u32-mul
dc.int u32_mul(dc.dynamic x$1, dc.dynamic y$1, ){
return (4294967295&((x$1 as dc.int)*(y$1 as dc.int)));
}

// END u32-mul

// BEGIN u32-rol
dc.int u32_rol(dc.dynamic x$1, dc.dynamic n$1, ){
return ((4294967295&((x$1 as dc.int)<<(31&(n$1 as dc.int))))|((x$1 as dc.int)>>(31&(-(n$1 as dc.int)))));
}

// END u32-rol

// BEGIN u32x2-bit-count
dc.int u32x2_bit_count(dc.dynamic hi$1, dc.dynamic lo$1, ){
final dc.int hi$2=((hi$1 as dc.int)-(((hi$1 as dc.int)>>(1&63))&1431655765));
final dc.int lo$2=((lo$1 as dc.int)-(((lo$1 as dc.int)>>(1&63))&1431655765));
final dc.int v$1=((((hi$2&858993459)+((hi$2>>(2&63))&858993459))+(lo$2&858993459))+((lo$2>>(2&63))&858993459));
return (127&((((252645135&v$1)+(252645135&(v$1>>(4&63))))*16843009)>>(24&63)));
}

// END u32x2-bit-count

// BEGIN unchecked-array-for
dc.List unchecked_array_for(dc.dynamic root$1, dc.dynamic shift$1, dc.dynamic i$1, ){
lcoc_core.VectorNode node$1=(root$1 as lcoc_core.VectorNode);
dc.int level$1=(shift$1 as dc.int);
do {
if((0<level$1)){
node$1=(node$1.arr[(((i$1 as dc.int)>>(31&level$1))&31)]);
level$1=(level$1-5);
continue;
}
return node$1.arr;
} while(true);
}

// END unchecked-array-for

// BEGIN unquote
var unquote=null;

// END unquote

// BEGIN unquote-splicing
var unquote_splicing=null;

// END unquote-splicing

// BEGIN unreduced
dc.dynamic unreduced(dc.dynamic x$1, ){
if(lcoc_core.reduced$QMARK_(x$1, )){
final dc.dynamic o7365$1=x$1;
if((o7365$1 is lcoc_core.IDeref$iface)){
return ((o7365$1 as lcoc_core.IDeref$iface).$_deref$0());
}
return ((lcoc_core.IDeref.extensions((o7365$1 as dc.dynamic), ) as lcoc_core.IDeref$ext).$_deref$0((o7365$1 as dc.dynamic), ));
}
return x$1;
}

// END unreduced

// BEGIN update
lcoc_core.IFn$iface update=lcoc_core.update$ifn(null, );

// END update

// BEGIN update$ifn
class update$ifn extends dc.Object with lcoc_core.IFnMixin_uuuXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const update$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.update$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic m$1, dc.dynamic k$1, dc.dynamic f$1, dc.dynamic x$1, dc.dynamic y$1, dc.dynamic z$1, dc.dynamic more$1, ){
final dc.dynamic coll7440$1=m$1;
final dc.dynamic k7441$1=k$1;
final dc.dynamic v7442$1=(lcoc_core.apply.$_invoke$6(f$1, (lcoc_core.$get_.$_invoke$2(m$1, k$1, )), x$1, y$1, z$1, more$1, ));
if((coll7440$1 is lcoc_core.IAssociative$iface)){
return ((coll7440$1 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$1 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$1 as dc.dynamic), (k7441$1 as dc.dynamic), (v7442$1 as dc.dynamic), ));
}

dc.dynamic $_invoke$3(dc.dynamic m$2, dc.dynamic k$2, dc.dynamic f$2, ){
final dc.dynamic coll7440$2=m$2;
final dc.dynamic k7441$2=k$2;
final dc.dynamic arg$31=(lcoc_core.$get_.$_invoke$2(m$2, k$2, ));
late final dc.dynamic v7442$2;
if((f$2 is dc.Function)){
v7442$2=(f$2 as dc.Function)(arg$31, );
}else if((f$2 is lcoc_core.IFn$iface)){
v7442$2=((f$2 as lcoc_core.IFn$iface).$_invoke$1(arg$31, ));
}else{
v7442$2=(lcoc_core.IFn.extensions(f$2, ).$_invoke$1(f$2, arg$31, ));
}
if((coll7440$2 is lcoc_core.IAssociative$iface)){
return ((coll7440$2 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$2 as dc.dynamic), v7442$2, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$2 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$2 as dc.dynamic), (k7441$2 as dc.dynamic), v7442$2, ));
}

dc.dynamic $_invoke$4(dc.dynamic m$3, dc.dynamic k$3, dc.dynamic f$3, dc.dynamic x$2, ){
final dc.dynamic coll7440$3=m$3;
final dc.dynamic k7441$3=k$3;
final dc.dynamic arg$32=(lcoc_core.$get_.$_invoke$2(m$3, k$3, ));
late final dc.dynamic v7442$3;
if((f$3 is dc.Function)){
v7442$3=(f$3 as dc.Function)(arg$32, x$2, );
}else if((f$3 is lcoc_core.IFn$iface)){
v7442$3=((f$3 as lcoc_core.IFn$iface).$_invoke$2(arg$32, x$2, ));
}else{
v7442$3=(lcoc_core.IFn.extensions(f$3, ).$_invoke$2(f$3, arg$32, x$2, ));
}
if((coll7440$3 is lcoc_core.IAssociative$iface)){
return ((coll7440$3 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$3 as dc.dynamic), v7442$3, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$3 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$3 as dc.dynamic), (k7441$3 as dc.dynamic), v7442$3, ));
}

dc.dynamic $_invoke$5(dc.dynamic m$4, dc.dynamic k$4, dc.dynamic f$4, dc.dynamic x$3, dc.dynamic y$2, ){
final dc.dynamic coll7440$4=m$4;
final dc.dynamic k7441$4=k$4;
final dc.dynamic arg$33=(lcoc_core.$get_.$_invoke$2(m$4, k$4, ));
late final dc.dynamic v7442$4;
if((f$4 is dc.Function)){
v7442$4=(f$4 as dc.Function)(arg$33, x$3, y$2, );
}else if((f$4 is lcoc_core.IFn$iface)){
v7442$4=((f$4 as lcoc_core.IFn$iface).$_invoke$3(arg$33, x$3, y$2, ));
}else{
v7442$4=(lcoc_core.IFn.extensions(f$4, ).$_invoke$3(f$4, arg$33, x$3, y$2, ));
}
if((coll7440$4 is lcoc_core.IAssociative$iface)){
return ((coll7440$4 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$4 as dc.dynamic), v7442$4, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$4 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$4 as dc.dynamic), (k7441$4 as dc.dynamic), v7442$4, ));
}

dc.dynamic $_invoke$6(dc.dynamic m$5, dc.dynamic k$5, dc.dynamic f$5, dc.dynamic x$4, dc.dynamic y$3, dc.dynamic z$2, ){
final dc.dynamic coll7440$5=m$5;
final dc.dynamic k7441$5=k$5;
final dc.dynamic arg$34=(lcoc_core.$get_.$_invoke$2(m$5, k$5, ));
late final dc.dynamic v7442$5;
if((f$5 is dc.Function)){
v7442$5=(f$5 as dc.Function)(arg$34, x$4, y$3, z$2, );
}else if((f$5 is lcoc_core.IFn$iface)){
v7442$5=((f$5 as lcoc_core.IFn$iface).$_invoke$4(arg$34, x$4, y$3, z$2, ));
}else{
v7442$5=(lcoc_core.IFn.extensions(f$5, ).$_invoke$4(f$5, arg$34, x$4, y$3, z$2, ));
}
if((coll7440$5 is lcoc_core.IAssociative$iface)){
return ((coll7440$5 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$5 as dc.dynamic), v7442$5, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$5 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$5 as dc.dynamic), (k7441$5 as dc.dynamic), v7442$5, ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END update$ifn

// BEGIN update-in
lcoc_core.IFn$iface update_in=lcoc_core.update_in$ifn(null, );

// END update-in

// BEGIN update_in$ifn
class update_in$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const update_in$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.update_in$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic m$1, dc.dynamic ks$1, dc.dynamic f$1, dc.dynamic args$1, ){
dc.dynamic up$1(dc.dynamic m$2, dc.dynamic ks$2, dc.dynamic f$2, dc.dynamic args$2, ){
final dc.dynamic vec$8589_$1=ks$2;
final dc.dynamic o7310$2=vec$8589_$1;
late final dc.dynamic seq$8590_$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
seq$8590_$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
seq$8590_$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic first$8591_$1=lcoc_core.first(seq$8590_$1, );
final dc.dynamic seq$8590_$2=lcoc_core.next(seq$8590_$1, );
final dc.dynamic k$2=first$8591_$1;
final dc.dynamic ks$4=seq$8590_$2;
if(((ks$4!=false)&&(ks$4!=null))){
final dc.dynamic coll7440$3=m$2;
final dc.dynamic k7441$3=k$2;
final dc.dynamic v7442$3=up$1((lcoc_core.$get_.$_invoke$2(m$2, k$2, )), ks$4, f$2, args$2, );
if((coll7440$3 is lcoc_core.IAssociative$iface)){
return ((coll7440$3 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$3 as dc.dynamic), v7442$3, ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$3 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$3 as dc.dynamic), (k7441$3 as dc.dynamic), v7442$3, ));
}
final dc.dynamic coll7440$4=m$2;
final dc.dynamic k7441$4=k$2;
final dc.dynamic v7442$4=(lcoc_core.apply.$_invoke$3(f$2, (lcoc_core.$get_.$_invoke$2(m$2, k$2, )), args$2, ));
if((coll7440$4 is lcoc_core.IAssociative$iface)){
return ((coll7440$4 as lcoc_core.IAssociative$iface).$_assoc$2((k7441$4 as dc.dynamic), (v7442$4 as dc.dynamic), ));
}
return ((lcoc_core.IAssociative.extensions((coll7440$4 as dc.dynamic), ) as lcoc_core.IAssociative$ext).$_assoc$2((coll7440$4 as dc.dynamic), (k7441$4 as dc.dynamic), (v7442$4 as dc.dynamic), ));
}
final dc.dynamic Function(dc.dynamic, dc.dynamic, dc.dynamic, dc.dynamic, ) up$2=up$1;
return up$2(m$1, ks$1, f$1, args$1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END update_in$ifn

// BEGIN uri?
dc.dynamic uri$QMARK_(dc.dynamic x$1, ){
return (x$1 is dc.Uri);
}

// END uri?

// BEGIN val
dc.dynamic val(dc.dynamic e$1, ){
return (e$1 as dc.MapEntry).value;
}

// END val

// BEGIN validate-atom-state
dc.dynamic validate_atom_state(dc.dynamic validator$1, dc.dynamic new_state$1, ){
late final dc.dynamic $if_$1;
if((validator$1 is dc.Function)){
$if_$1=(validator$1 as dc.Function)(new_state$1, );
}else if((validator$1 is lcoc_core.IFn$iface)){
$if_$1=((validator$1 as lcoc_core.IFn$iface).$_invoke$1(new_state$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(validator$1, ).$_invoke$1(validator$1, new_state$1, ));
}
if((($if_$1!=false)&&($if_$1!=null))){
return null;
}
throw dc.Exception("Validator rejected reference state", );
}

// END validate-atom-state

// BEGIN vals
dc.dynamic vals(dc.dynamic coll$1, ){
if((coll$1 is dc.Map)){
return (lcoc_core.chunked_iterator_seq.$_invoke$1((coll$1 as dc.Map).values.iterator, ));
}
final dc.dynamic o7310$1=(lcoc_core.map.$_invoke$2(lcoc_core.val, coll$1, ));
if((o7310$1 is lcoc_core.ISeqable$iface)){
return ((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}

// END vals

// BEGIN vary-meta
lcoc_core.IFn$iface vary_meta=lcoc_core.vary_meta$ifn(null, );

// END vary-meta

// BEGIN vary_meta$ifn
class vary_meta$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const vary_meta$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.vary_meta$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic obj$1, dc.dynamic f$1, dc.dynamic args$1, ){
final dc.dynamic o7524$1=obj$1;
late final dc.dynamic $if_$1;
if((o7524$1 is lcoc_core.IMeta$iface)){
$if_$1=((o7524$1 as lcoc_core.IMeta$iface).$_meta$0());
}else{
$if_$1=((lcoc_core.IMeta.extensions((o7524$1 as dc.dynamic), ) as lcoc_core.IMeta$ext).$_meta$0((o7524$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$3(f$1, $if_$1, args$1, ));
return lcoc_core.with_meta(obj$1, $1, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END vary_meta$ifn

// BEGIN vec
lcoc_core.PersistentVector vec(dc.dynamic coll$1, ){
return (lcoc_core.into.$_invoke$2(lcoc_core.$_EMPTY_VECTOR, coll$1, ));
}

// END vec

// BEGIN vector
lcoc_core.IFn$iface vector=lcoc_core.vector$ifn(null, );

// END vector

// BEGIN vector$ifn
class vector$ifn extends dc.Object with lcoc_core.IFnMixin_XXXXXXY implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const vector$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.vector$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic a$1, dc.dynamic b$1, dc.dynamic c$1, dc.dynamic d$1, dc.dynamic e$1, dc.dynamic f$1, dc.dynamic args$1, ){
final dc.List<dc.dynamic> fl$6=(dc.List<dc.dynamic>.filled(6, a$1, ));
fl$6[1]=b$1;
fl$6[2]=c$1;
fl$6[3]=d$1;
fl$6[4]=e$1;
fl$6[5]=f$1;
final lcoc_core.PersistentVector $1=lcoc_core.$_vec_owning(fl$6, );
return (lcoc_core.into.$_invoke$2($1, args$1, ));
}

dc.dynamic $_invoke$0(){
return lcoc_core.$_EMPTY_VECTOR;
}

dc.dynamic $_invoke$1(dc.dynamic a$2, ){
final dc.List<dc.dynamic> fl$7=(dc.List<dc.dynamic>.filled(1, a$2, ));
return lcoc_core.$_vec_owning(fl$7, );
}

dc.dynamic $_invoke$2(dc.dynamic a$3, dc.dynamic b$2, ){
final dc.List<dc.dynamic> fl$8=(dc.List<dc.dynamic>.filled(2, a$3, ));
fl$8[1]=b$2;
return lcoc_core.$_vec_owning(fl$8, );
}

dc.dynamic $_invoke$3(dc.dynamic a$4, dc.dynamic b$3, dc.dynamic c$2, ){
final dc.List<dc.dynamic> fl$9=(dc.List<dc.dynamic>.filled(3, a$4, ));
fl$9[1]=b$3;
fl$9[2]=c$2;
return lcoc_core.$_vec_owning(fl$9, );
}

dc.dynamic $_invoke$4(dc.dynamic a$5, dc.dynamic b$4, dc.dynamic c$3, dc.dynamic d$2, ){
final dc.List<dc.dynamic> fl$10=(dc.List<dc.dynamic>.filled(4, a$5, ));
fl$10[1]=b$4;
fl$10[2]=c$3;
fl$10[3]=d$2;
return lcoc_core.$_vec_owning(fl$10, );
}

dc.dynamic $_invoke$5(dc.dynamic a$6, dc.dynamic b$5, dc.dynamic c$4, dc.dynamic d$3, dc.dynamic e$2, ){
final dc.List<dc.dynamic> fl$11=(dc.List<dc.dynamic>.filled(5, a$6, ));
fl$11[1]=b$5;
fl$11[2]=c$4;
fl$11[3]=d$3;
fl$11[4]=e$2;
return lcoc_core.$_vec_owning(fl$11, );
}

dc.dynamic $_invoke$6(dc.dynamic a$7, dc.dynamic b$6, dc.dynamic c$5, dc.dynamic d$4, dc.dynamic e$3, dc.dynamic f$2, ){
final dc.List<dc.dynamic> fl$12=(dc.List<dc.dynamic>.filled(6, a$7, ));
fl$12[1]=b$6;
fl$12[2]=c$5;
fl$12[3]=d$4;
fl$12[4]=e$3;
fl$12[5]=f$2;
return lcoc_core.$_vec_owning(fl$12, );
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END vector$ifn

// BEGIN vector?
dc.bool vector$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IVector.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END vector?

// BEGIN volatile!
lcoc_core.Volatile volatile$BANG_(dc.dynamic val$1, ){
return lcoc_core.Volatile((val$1 as dc.dynamic), );
}

// END volatile!

// BEGIN volatile?
dc.bool volatile$QMARK_(dc.dynamic x$1, ){
return ((lcoc_core.IVolatile.satisfies((x$1 as dc.dynamic), )) as dc.bool);
}

// END volatile?

// BEGIN vreset!
dc.dynamic vreset$BANG_(dc.dynamic vol$1, dc.dynamic newval$1, ){
final dc.dynamic o7651$1=vol$1;
final dc.dynamic new_value7652$1=newval$1;
if((o7651$1 is lcoc_core.IVolatile$iface)){
return ((o7651$1 as lcoc_core.IVolatile$iface).$_vreset$BANG_$1((new_value7652$1 as dc.dynamic), ));
}
return ((lcoc_core.IVolatile.extensions((o7651$1 as dc.dynamic), ) as lcoc_core.IVolatile$ext).$_vreset$BANG_$1((o7651$1 as dc.dynamic), (new_value7652$1 as dc.dynamic), ));
}

// END vreset!

// BEGIN vswap!
lcoc_core.IFn$iface vswap$BANG_=lcoc_core.vswap$BANG_$ifn(null, );

// END vswap!

// BEGIN vswap$BANG_$ifn
class vswap$BANG_$ifn extends dc.Object with lcoc_core.IFnMixin_uuuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const vswap$BANG_$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.vswap$BANG_$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic vol$1, dc.dynamic f$1, dc.dynamic args$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-vreset!", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(vol$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(f$1, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "-deref", )), )), (lcoc_core.list.$_invoke$1(vol$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3(arg$1, $1, args$1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $2, ));
if((o7310$3 is lcoc_core.ISeqable$iface)){
return ((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END vswap$BANG_$ifn

// BEGIN when
lcoc_core.IFn$iface when=lcoc_core.when$ifn(null, );

// END when

// BEGIN when$ifn
class when$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const when$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.when$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic body$1, ){
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body$1, ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$3(arg$2, arg$1, $1, ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when$ifn

// BEGIN when-first
lcoc_core.IFn$iface when_first=lcoc_core.when_first$ifn(null, );

// END when-first

// BEGIN when-let
lcoc_core.IFn$iface when_let=lcoc_core.when_let$ifn(null, );

// END when-let

// BEGIN when-not
lcoc_core.IFn$iface when_not=lcoc_core.when_not$ifn(null, );

// END when-not

// BEGIN when-some
lcoc_core.IFn$iface when_some=lcoc_core.when_some$ifn(null, );

// END when-some

// BEGIN when_first$ifn
class when_first$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const when_first$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.when_first$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
final dc.dynamic vec$8245_$1=bindings$1;
final dc.dynamic x$1=(lcoc_core.nth.$_invoke$3(vec$8245_$1, 0, null, ));
final dc.dynamic xs$1=(lcoc_core.nth.$_invoke$3(vec$8245_$1, 1, null, ));
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when-let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "xs__8243__auto__", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "seq", )), )), (lcoc_core.list.$_invoke$1(xs$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(x$1, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "first", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "xs__8243__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$2(arg$2, $3, ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$4, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$3, $5, body$1, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$4, $7, $6, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_first$ifn

// BEGIN when_let$ifn
class when_let$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const when_let$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.when_let$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
late final dc.dynamic form$1;
if((bindings$1 is dc.Function)){
form$1=(bindings$1 as dc.Function)(0, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
form$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(0, ));
}else{
form$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 0, ));
}
late final dc.dynamic tst$1;
if((bindings$1 is dc.Function)){
tst$1=(bindings$1 as dc.Function)(1, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
tst$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(1, ));
}else{
tst$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 1, ));
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8241__auto__", )), )), (lcoc_core.list.$_invoke$1(tst$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "when", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8241__auto__", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(form$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8241__auto__", )), )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$3(arg$1, $3, body$1, ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$3, arg$2, $4, ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$3(arg$4, $6, $5, ));
if((o7310$5 is lcoc_core.ISeqable$iface)){
return ((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_let$ifn

// BEGIN when_not$ifn
class when_not$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const when_not$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.when_not$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic test$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(test$1, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "do", )), )), body$1, ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$4(arg$3, arg$2, arg$1, $1, ));
if((o7310$2 is lcoc_core.ISeqable$iface)){
return ((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_not$ifn

// BEGIN when_some$ifn
class when_some$ifn extends dc.Object with lcoc_core.IFnMixin_uuuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const when_some$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.when_some$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic bindings$1, dc.dynamic body$1, ){
late final dc.dynamic form$1;
if((bindings$1 is dc.Function)){
form$1=(bindings$1 as dc.Function)(0, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
form$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(0, ));
}else{
form$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 0, ));
}
late final dc.dynamic tst$1;
if((bindings$1 is dc.Function)){
tst$1=(bindings$1 as dc.Function)(1, );
}else if((bindings$1 is lcoc_core.IFn$iface)){
tst$1=((bindings$1 as lcoc_core.IFn$iface).$_invoke$1(1, ));
}else{
tst$1=(lcoc_core.IFn.extensions(bindings$1, ).$_invoke$1(bindings$1, 1, ));
}
final dc.dynamic arg$4=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8237__auto__", )), )), (lcoc_core.list.$_invoke$1(tst$1, )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$1, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($1, ));
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "if", )), ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "nil?", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8237__auto__", )), )), ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($if_$2, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1(null, ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1(form$1, )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "temp__8237__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $3=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$3(arg$1, $3, body$1, ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$4(arg$3, $5, arg$2, $4, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$4, $7, $6, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END when_some$ifn

// BEGIN while
lcoc_core.IFn$iface $while_=lcoc_core.$while_$ifn(null, );

// END while

// BEGIN with-meta
dc.dynamic with_meta(dc.dynamic obj$1, dc.dynamic m$1, ){
final dc.bool or$7228_$AUTO_$1=(null==(m$1 as dc.dynamic));
late final dc.bool $if_$1;
if(or$7228_$AUTO_$1){
$if_$1=or$7228_$AUTO_$1;
}else{
$if_$1=lcoc_core.map$QMARK_(m$1, );
}
if($if_$1){
}else{
throw dc.Exception((lcoc_core.str.$_invoke$3("class ", m$1.runtimeType, " cannot be cast to cljd.core/IMap", )), );
}
final dc.dynamic o7517$1=obj$1;
final dc.dynamic meta7518$1=m$1;
if((o7517$1 is lcoc_core.IWithMeta$iface)){
return ((o7517$1 as lcoc_core.IWithMeta$iface).$_with_meta$1((meta7518$1 as dc.dynamic), ));
}
return ((lcoc_core.IWithMeta.extensions((o7517$1 as dc.dynamic), ) as lcoc_core.IWithMeta$ext).$_with_meta$1((o7517$1 as dc.dynamic), (meta7518$1 as dc.dynamic), ));
}

// END with-meta

// BEGIN with-out-str
lcoc_core.IFn$iface with_out_str=lcoc_core.with_out_str$ifn(null, );

// END with-out-str

// BEGIN with_out_str$ifn
class with_out_str$ifn extends dc.Object with lcoc_core.IFnMixin_uuZ implements lcoc_core.IMeta$iface, lcoc_core.IWithMeta$iface, lcoc_core.Fn$iface, lcoc_core.IFn$iface {
final meta$1;

const with_out_str$ifn(this.meta$1, ):super();

dc.dynamic $_meta$0(){
return meta$1;
}

dc.dynamic $_with_meta$1(dc.dynamic m$2101_$AUTO_$1, ){
return lcoc_core.with_out_str$ifn((m$2101_$AUTO_$1 as dc.dynamic), );
}

dc.dynamic $_invoke$vararg(dc.dynamic $AMPERSAND_form$1, dc.dynamic $AMPERSAND_env$1, dc.dynamic body$1, ){
final dc.dynamic arg$3=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "let", )), ));
final dc.dynamic arg$1=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8759__auto__", )), ));
final dc.dynamic o7310$1=(lcoc_core.concat.$_invoke$1((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "StringBuffer.", )), )), ));
late final dc.dynamic $if_$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
$if_$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic $1=(lcoc_core.list.$_invoke$1($if_$1, ));
final dc.dynamic o7310$2=(lcoc_core.concat.$_invoke$2(arg$1, $1, ));
late final dc.dynamic $if_$2;
if((o7310$2 is lcoc_core.ISeqable$iface)){
$if_$2=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$2=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
final dc.dynamic $2=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$2, ));
final dc.dynamic $7=(lcoc_core.list.$_invoke$1($2, ));
final dc.dynamic arg$2=(lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "binding", )), ));
final dc.dynamic o7310$3=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2("cljd.core", "*out*", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8759__auto__", )), )), ));
late final dc.dynamic $if_$3;
if((o7310$3 is lcoc_core.ISeqable$iface)){
$if_$3=((o7310$3 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$3=((lcoc_core.ISeqable.extensions((o7310$3 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$3 as dc.dynamic), ));
}
final dc.dynamic $3=(lcoc_core.apply.$_invoke$2(lcoc_core.vector, $if_$3, ));
final dc.dynamic $5=(lcoc_core.list.$_invoke$1($3, ));
final dc.dynamic o7310$4=(lcoc_core.concat.$_invoke$2((lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, ".toString", )), )), (lcoc_core.list.$_invoke$1((lcoc_core.symbol.$_invoke$2(null, "s__8759__auto__", )), )), ));
late final dc.dynamic $if_$4;
if((o7310$4 is lcoc_core.ISeqable$iface)){
$if_$4=((o7310$4 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$4=((lcoc_core.ISeqable.extensions((o7310$4 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$4 as dc.dynamic), ));
}
final dc.dynamic $4=(lcoc_core.list.$_invoke$1($if_$4, ));
final dc.dynamic o7310$5=(lcoc_core.concat.$_invoke$4(arg$2, $5, body$1, $4, ));
late final dc.dynamic $if_$5;
if((o7310$5 is lcoc_core.ISeqable$iface)){
$if_$5=((o7310$5 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
$if_$5=((lcoc_core.ISeqable.extensions((o7310$5 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$5 as dc.dynamic), ));
}
final dc.dynamic $6=(lcoc_core.list.$_invoke$1($if_$5, ));
final dc.dynamic o7310$6=(lcoc_core.concat.$_invoke$3(arg$3, $7, $6, ));
if((o7310$6 is lcoc_core.ISeqable$iface)){
return ((o7310$6 as lcoc_core.ISeqable$iface).$_seq$0());
}
return ((lcoc_core.ISeqable.extensions((o7310$6 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$6 as dc.dynamic), ));
}

dc.dynamic noSuchMethod(i)=>super.noSuchMethod(i);
}

// END with_out_str$ifn

// BEGIN xform-iterator
dc.dynamic xform_iterator(dc.dynamic xform$1, dc.dynamic mk_move_next$1, ){
final dc.List<dc.dynamic> buffer$1=[];
final dc.dynamic f$1=lcoc_core.Reify$49(null, buffer$1, );
final dc.dynamic rf$1=f$1;
late final dc.dynamic $if_$1;
if((xform$1 is dc.Function)){
$if_$1=(xform$1 as dc.Function)(rf$1, );
}else if((xform$1 is lcoc_core.IFn$iface)){
$if_$1=((xform$1 as lcoc_core.IFn$iface).$_invoke$1(rf$1, ));
}else{
$if_$1=(lcoc_core.IFn.extensions(xform$1, ).$_invoke$1(xform$1, rf$1, ));
}
late final dc.dynamic $if_$2;
if((mk_move_next$1 is dc.Function)){
$if_$2=(mk_move_next$1 as dc.Function)($if_$1, );
}else if((mk_move_next$1 is lcoc_core.IFn$iface)){
$if_$2=((mk_move_next$1 as lcoc_core.IFn$iface).$_invoke$1($if_$1, ));
}else{
$if_$2=(lcoc_core.IFn.extensions(mk_move_next$1, ).$_invoke$1(mk_move_next$1, $if_$1, ));
}
return lcoc_core.XformIterator(buffer$1, 0, $if_$2, true, );
}

// END xform-iterator

// BEGIN zero?
dc.bool zero$QMARK_(dc.dynamic num$1, ){
return (0==(num$1 as dc.num));
}

// END zero?

// BEGIN zipmap
dc.dynamic zipmap(dc.dynamic keys$1, dc.dynamic vals$1, ){
dc.dynamic map$1=lcoc_core.transient(lcoc_core.$_EMPTY_MAP, );
final dc.dynamic o7310$1=keys$1;
dc.dynamic ks$1;
if((o7310$1 is lcoc_core.ISeqable$iface)){
ks$1=((o7310$1 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
ks$1=((lcoc_core.ISeqable.extensions((o7310$1 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$1 as dc.dynamic), ));
}
final dc.dynamic o7310$2=vals$1;
dc.dynamic vs$1;
if((o7310$2 is lcoc_core.ISeqable$iface)){
vs$1=((o7310$2 as lcoc_core.ISeqable$iface).$_seq$0());
}else{
vs$1=((lcoc_core.ISeqable.extensions((o7310$2 as dc.dynamic), ) as lcoc_core.ISeqable$ext).$_seq$0((o7310$2 as dc.dynamic), ));
}
do {
final dc.dynamic and$7187_$AUTO_$1=ks$1;
late final dc.dynamic $if_$1;
if(((and$7187_$AUTO_$1!=false)&&(and$7187_$AUTO_$1!=null))){
$if_$1=vs$1;
}else{
$if_$1=and$7187_$AUTO_$1;
}
if((($if_$1!=false)&&($if_$1!=null))){
map$1=(lcoc_core.assoc$BANG_.$_invoke$3(map$1, lcoc_core.first(ks$1, ), lcoc_core.first(vs$1, ), ));
ks$1=lcoc_core.next(ks$1, );
vs$1=lcoc_core.next(vs$1, );
continue;
}
return lcoc_core.persistent$BANG_(map$1, );
} while(true);
}

// END zipmap
