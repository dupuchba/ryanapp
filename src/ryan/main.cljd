(ns ryan.main
  ;; pure dart package are imported using string
  (:require ["dart:async" :as a]
            ["dart:io" :as io]
            ["package:flutter/material.dart" :as m]
            ["package:google_fonts/google_fonts.dart" :as gf]
            ["package:intl/intl.dart" :as intl]
            [cljd.flutter.alpha :as f]))
;; dates utils
(defn ^String formatted-date [^DateTime date-time]
  (-> (intl/DateFormat "MMM d yyyy") (.format date-time)))

(defn ^String formatted-date-from-epoch [^int date-time]
  (formatted-date (DateTime/fromMillisecondsSinceEpoch (* 1000 date-time))))

;; color utils
(def primary-color (m/Color 0xff006837))
(def primary-dark-color (m/Color 0xff004012))
(def secondary-color (m/Color 0xffEFEFEF))
(def accent-color (m/Color 0xffBA5A31))
(def black m.Colors/black54)

;; initial data
(def initial-todos
  [{:id 0 :text "Do Nothing" :due-date (.now DateTime) :priority 3 :is-done false}
   {:id 1 :text "Get back to 1985" :due-date (-> DateTime (.now) (.add (Duration .hours 5))) :priority 5 :is-done false}
   {:id 2 :text "Buy a parrot and teach him to say ?help! I?ve been turned into a parrot!" :due-date (-> DateTime (.now) (.add (Duration .days 1))) :priority 4 :is-done false}
   {:id 3 :text "Order Diet water whenever I go out to eat" :due-date (-> DateTime (.now) (.add (Duration .days 2))) :priority 4 :is-done false}
   {:id 4 :text "Buy a turtle. Name it ?The Speed of Light.? Tell everyone that I can run faster than The Speed of Light." :due-date (-> DateTime (.now) (.add (Duration .days 3))) :priority 4 :is-done false}
   {:id 5 :text "Hire two private investigators. Get them to follow each other." :due-date (-> DateTime (.now) (.add (Duration .days 4))) :priority 3 :is-done false}
   {:id 6 :text "World Peace" :due-date (-> DateTime (.now) (.add (Duration .days 5))) :priority 2 :is-done false}
   {:id 7 :text "Become a teacher. Make a test where every answer is ?C?." :due-date (-> DateTime (.now) (.add (Duration .days 6))) :priority 1 :is-done false}])

;; fetch-todos can sometimes fail
(defn ^a/Future fetch-todos []
  (a.Future/delayed (Duration .seconds 4)
    (fn []
      (let [n (rand-int 100)]
        (if (< n 90)
          initial-todos
          (throw (Exception "Error while fetching todos")))))))

(defn on-reorder [app-state]
  (fn [old-idx new-idx]
    (swap! app-state
      (fn [s]
        (let [todos (:todos s)]
          (if (< new-idx old-idx)
            (let [p1 (conj (subvec todos 0 new-idx) (nth todos old-idx))
                  p2 (subvec todos new-idx old-idx)
                  p3 (subvec todos (inc old-idx))]
              (assoc s :todos (into p1 (concat p2 p3))))
            (let [p1 (subvec todos 0 old-idx)
                  p2 (conj (subvec todos (inc old-idx) new-idx) (nth todos old-idx))
                  p3 (subvec todos new-idx)]
              (assoc s :todos (into p1 (concat p2 p3))))))))))

(defn todo-item [idx {text :text priority :priority due-date :due-date todo-id :id is-done :is-done}]
  ;; todo-id does not change and a key is needed as it is a re-orderable list
  (f/widget
    :key todo-id
    :inherit [m/Theme :app-state]
    (let [text-theme (-> theme .-textTheme)
          color-scheme (-> theme .-colorScheme)
          item-color (-> color-scheme .-primary (.withOpacity (* 0.05 priority)))
          priority-icon-color (-> color-scheme .-secondaryVariant (.withOpacity (* 0.2 priority)))]
      (m/Column
        .children
        [(m/ListTile
           .shape (m/RoundedRectangleBorder .borderRadius (m.BorderRadius/circular 6))
           .tileColor item-color
           .contentPadding (m.EdgeInsets/symmetric .vertical 15 .horizontal 30)
           .title
           (m/Text text
             .style (-> text-theme .-subtitle1
                      (.copyWith .decoration (when is-done m.TextDecoration/lineThrough))))
           .subtitle
           (m/Text (formatted-date due-date)
             .style (-> text-theme .-bodyText2
                      (.copyWith .color accent-color .height 2
                        .decoration (when is-done
                                      m.TextDecoration/lineThrough))))
           .trailing
           (m/Row .mainAxisSize m.MainAxisSize/min
             .crossAxisAlignment m.CrossAxisAlignment/stretch
             .children
             [(f/widget
                :inherit [:app-state]
                (m/IconButton
                  .onPressed (fn [] (swap! app-state (fn [s] (assoc-in s [:todos idx :is-done] (not is-done)))) nil)
                  .icon (m/Icon (if is-done m.Icons/close_sharp m.Icons/check_sharp))
                  .iconSize 25))
              (m/IconButton
                .onPressed (when-not (zero? idx)
                             (fn [] ((on-reorder app-state) idx (dec idx)) nil))
                .icon (m/Icon m.Icons/arrow_upward_rounded .size 25 .color priority-icon-color)
                .iconSize 25)
              (m/SizedBox .width 8)
              (if-not io.Platform/isMacOS (m/Icon m.Icons/menu .size 25) m.SizedBox/shrink)]))]))))

(def add-todo-widget
  (let [new-todo (volatile! {})
        key (new #/(m/GlobalKey m/FormState))]
    (f/nest
      (m/Form .key key)
      (m/Padding .padding (m.EdgeInsets/all 15))
      (m/Column
        .mainAxisSize m.MainAxisSize/min
        .crossAxisAlignment m.CrossAxisAlignment/stretch
        .children
        [(f/widget
           :context ctx
           :inherit [m/FocusScope]
           :with [:let [initial-date (doto (DateTime/now)
                                       (->> (vswap! new-todo assoc :due-date)))]
                  controller (m/TextEditingController .text (formatted-date initial-date))]
           (m/TextFormField
             .controller controller
             .decoration (m/InputDecoration .labelText "Due Date")
             .onTap (fn []
                      (.unfocus focus-scope)
                      (let [date (await (m/showDatePicker
                                          .context ctx
                                          .initialDate (DateTime/now)
                                          .firstDate (DateTime/now)
                                          .lastDate  (.add (DateTime/now) (Duration .days 36500))))]
                        (when (and date (not= date initial-date))
                          (set! (.-text controller) (formatted-date date))
                          (vswap! new-todo assoc :due-date date)))
                      nil)))
         (m/TextFormField
           .decoration (m/InputDecoration .labelText "Todo")
           .validator (fn [^String value]
                        (when (or (nil? value) (.-isEmpty value))
                          "Please enter some text"))
           .onSaved (fn [value] (vswap! new-todo assoc :text value)))
         (m/TextFormField
           .keyboardType m.TextInputType/number
           .decoration (m/InputDecoration .labelText "Priority (0-5)")
           .validator (fn [value]
                        (cond
                          (or (nil? value) (nil? (int/tryParse value)))
                          "Please enter a number"
                          (not (<= 0 (int/parse value) 5))
                          "Please enter a number between 0 and 5"))
           .onSaved (fn [value] (vswap! new-todo assoc :priority (int/parse value))))
         (m/SizedBox .height 25)
         (f/widget
           :inherit [:todos-page/is-adding-todo :app-state]
           (f/nest
             (m/ElevatedButton
               .style (m/ButtonStyle .backgroundColor (. m/MaterialStateProperty #/(all m/Color) primary-color))
               .onPressed (fn []
                            (when (-> key .-currentState .validate)
                              (-> key .-currentState .save)
                              (-> key .-currentState .reset)
                              (swap! app-state
                                (fn [s]
                                  (-> s
                                    (update :todos conj (assoc @new-todo :id (:todos/count s)))
                                    (update :todos/count inc))))
                              (vreset! new-todo {})
                              (swap! is-adding-todo not))
                            nil))
             (m/Padding .padding (m.EdgeInsets/all 10))
             (f/widget
               :inherit [m/Theme]
               (m/Text "Submit" .style (-> theme .-textTheme .-headline6 (.copyWith .color m.Colors/white .fontSize 16))))))]))))

(def progress-widget (m/Center .child (m/CircularProgressIndicator .valueColor (m/AlwaysStoppedAnimation (.green m/Colors)))))

(def todos-page
  (f/widget
    ;; I don't use :state as I don't want to rebuild all todos-page when loading | adding-todo is happening.
    ;; could have used an atom in a let binding with a (f/widget :watch at..) where refresh is necessary
    :bind {:todos-page/is-loading true
           :todos-page/is-adding-todo false}
    (f/widget
      :inherit [:app-state :todos-page/completer :todos-page/is-loading :todos-page/is-adding-todo m/ScaffoldMessenger]
      ;; not happy with the way we handle async values with flutter.alpha but FutureBuilder/StreamBuilder sucks
      (when-not (.-isCompleted ^a/Completer @completer)
        (let [todos (fetch-todos)]
          (-> (.complete ^a/Completer @completer todos))
          (.then todos
            (fn [t]
              (swap! app-state
                (fn [s]
                  (let [s (update s :todos into t)]
                    (assoc s :todos/count (count (:todos s))))))
              (reset! is-loading false))
            .onError (fn [_]
                       (.showSnackBar scaffold-messenger
                         (m/SnackBar .content (m/Text "Error while fetching the todos!")))))))
      (f/nest
        (m/WillPopScope .onWillPop ^:async (fn [] (if @is-adding-todo
                                                    (do (swap! is-adding-todo not) false)
                                                    true)))
        (m/Scaffold
          .floatingActionButton
          (f/nest
            (m/FloatingActionButton .onPressed (fn [] (swap! is-adding-todo not)) .backgroundColor accent-color)
            (f/widget :inherit [:todos-page/is-adding-todo] (m/Icon (if @is-adding-todo m.Icons/close m.Icons/add) .color m.Colors/white)))
          .bottomSheet
          (f/widget
            :inherit [:todos-page/is-adding-todo]
            (if @is-adding-todo
              (m/BottomSheet
                .backgroundColor secondary-color
                .onClosing (fn [])
                .builder (fn [_] add-todo-widget))
              (m/SizedBox.shrink)))
          .body (f/widget
                  :inherit [:todos-page/is-loading]
                  (if @is-loading
                    progress-widget
                    (f/widget
                      :inherit [:app-state]
                      (m.ReorderableListView/builder
                        .padding (m.EdgeInsets/only .bottom 90)
                        .itemCount @(get app-state :todos/count)
                        .itemBuilder (fn [_ idx] (todo-item idx @(get-in app-state [:todos idx])))
                        .onReorder (on-reorder app-state))))))))))

;; Scaffold app components
(def bottom-navigation-bar
  (f/widget
    :inherit [:home-page/index]
    (m/BottomNavigationBar
      .currentIndex @index
      .onTap (fn [i] (reset! index i) nil)
      .items [(m/BottomNavigationBarItem
                .icon (m/Icon m.Icons/today_outlined)
                .label "Todos")
              (m/BottomNavigationBarItem
                .icon (m/Icon m.Icons/article)
                .label "News")])))

(def app-bar
  (m/AppBar
    .centerTitle true
    .title
    (f/widget
      :inherit [m/Theme]
      (m/Text "The Morning App"
        .style (-> theme .-textTheme .-headline6 (.copyWith .color m.Colors/white .fontSize 24))))))

(def home-page
  (let [pages [todos-page
               (f/nest m/Center (m/Text "NewsPage can be done following the todo page."))
               ;; TODO: homework for the brave
               #_(m/NewsPage :newsRepository (m/NewsRepository :remoteDataSource (m/NewsRemoteDataSource)))]]
    (f/widget :bind {:home-page/index 0}
      (m/Scaffold
        .appBar app-bar
        .body (f/widget :inherit [:home-page/index] (nth pages @index))
        .bottomNavigationBar bottom-navigation-bar))))

(defn main []
  (m.WidgetsFlutterBinding/ensureInitialized)
  (m/runApp
    (let [w700BitterFont (.bitter gf/GoogleFonts .fontWeight (.w700 m/FontWeight))]
      (f/widget
        ;; when using dragable widgets, :bind must be at the root of the widget tree
        ;; todos are empty when the application is created
        :bind {:app-state {:todos       []
                           :todos/count 0}
               :todos-page/completer (a/Completer)}
        (m/MaterialApp
          .title "The Morning App"
          .theme (m/ThemeData
                   .colorScheme (m.ColorScheme/fromSwatch .primarySwatch m.Colors/green)
                   .primaryColor primary-color
                   .primaryColorDark primary-dark-color
                   .accentColor secondary-color
                   .appBarTheme (m/AppBarTheme .brightness m.Brightness/dark)
                   .primaryTextTheme (m/TextTheme .headline6 w700BitterFont)
                   .textTheme (m/TextTheme
                                .subtitle1 (.apply w700BitterFont .color black)
                                .headline6 (.apply w700BitterFont .color black)
                                .bodyText2 (.apply w700BitterFont .color black)))
          .home home-page
          .debugShowCheckedModeBanner false)))))
