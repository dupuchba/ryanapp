(ns ryan.main
  ;; pure dart package are imported using string
  (:require ["package:flutter/material.dart" :as m]
            ["dart:async" :as a]
            ["package:intl/intl.dart" :as intl]
            ["package:google_fonts/google_fonts.dart" :as gf]
            [cljd.flutter.alpha :as f]))
;; dates utils
(defn ^String formatted-date [^DateTime date-time]
  (-> (intl/DateFormat "MMM d yyyy") (.format date-time)))

(defn ^String formatted-date-from-epoch [^int date-time]
  (formatted-date (DateTime/fromMillisecondsSinceEpoch (* 1000 date-time))))

;; ui/app_colors.dart
(def primary-color (m/Color 0xff006837))
(def primary-dark-color (m/Color 0xff004012))
(def secondary-color (m/Color 0xffEFEFEF))
(def accent-color (m/Color 0xffBA5A31))
(def black m.Colors/black54)

(def initial-todos
  [{:text "Do Nothing" :dueDate (.now DateTime) :priority 3 :is-done false}
   {:text "Get back to 1985" :dueDate (-> DateTime (.now) (.add (Duration :hours 5))) :priority 5 :is-done false}
   {:text "Buy a parrot and teach him to say ?help! I?ve been turned into a parrot!" :dueDate (-> DateTime (.now) (.add (Duration :days 1))) :priority 4 :is-done false}
   {:text "Order Diet water whenever I go out to eat" :dueDate (-> DateTime (.now) (.add (Duration :days 2))) :priority 4 :is-done false}
   {:text "Buy a turtle. Name it ?The Speed of Light.? Tell everyone that I can run faster than The Speed of Light." :dueDate (-> DateTime (.now) (.add (Duration :days 3))) :priority 4 :is-done false}
   {:text "Hire two private investigators. Get them to follow each other." :dueDate (-> DateTime (.now) (.add (Duration :days 4))) :priority 3 :is-done false}
   {:text "World Peace" :dueDate (-> DateTime (.now) (.add (Duration :days 5))) :priority 2 :is-done false}
   {:text "Become a teacher. Make a test where every answer is ?C?." :dueDate (-> DateTime (.now) (.add (Duration :days 6))) :priority 1 :is-done false}])

(defn ^a/Future fetch-todos []
  (a.Future/delayed (Duration :seconds 4)
    (fn []
      (let [n (rand-int 100)]
        (if (< n 90)
          initial-todos
          (throw (Exception "Error while fetching todos")))))))

;; ui/_shared/progress_widget.dart
(def progress-widget
  (f/nest
    m/Center
    (m/CircularProgressIndicator :valueColor (m/AlwaysStoppedAnimation (.green m/Colors)))))

(def app-bar
  (m/AppBar
    :centerTitle true
    :title
    (f/widget
      :inherit [m/Theme]
      (m/Text "The Morning App"
        :style (-> theme .-textTheme .headline6 (.copyWith :color (.white m/Colors) :fontSize 24))))))

(def bottom-navigation-bar
  (m/BottomNavigationBar
    :currentIndex 0
    :onTap (fn [index] nil)
    :items [(m/BottomNavigationBarItem
              :icon (m/Icon (.today_outlined m/Icons))
              :label "Todos")
            (m/BottomNavigationBarItem
              :icon (m/Icon (.article m/Icons))
              :label "News")]))

(defn todo-item [idx]
  (f/widget
    :inherit [:app-state m/Theme]
    (let [todo @(get-in app-state [:todos idx])
          priority (:priority todo)
          text-theme (-> theme .-textTheme)
          color-scheme (-> theme .-colorScheme)
          item-color (-> color-scheme .primary (.withOpacity (* 0.05 priority)))
          priority-icon-color (-> color-scheme .secondaryVariant (.withOpacity (* 0.2 priority)))
          is-deleted false]
      (if is-deleted
        m.SizedBox/shrink
        (m/Column
          :children
          [(f/widget
             :inherit [:app-state]
             (let [is-done @(get-in app-state [:todos idx :is-done])]
               (m/ListTile
                 :shape (m/RoundedRectangleBorder :borderRadius (m.BorderRadius/circular 6))
                 :tileColor item-color
                 :contentPadding (m.EdgeInsets/symmetric :vertical 15 :horizontal 30)
                 :title (m/Text (:text todo) :style (-> text-theme .subtitle1
                                                      (.copyWith :decoration (when is-done m.TextDecoration/lineThrough))))
                 :subtitle (m/Text (formatted-date (:dueDate todo))
                             :style (-> text-theme .bodyText2
                                      (.copyWith :color accent-color :height 2 :decoration (when is-done m.TextDecoration/lineThrough))))
                 :trailing
                 (m/Row :mainAxisSize m.MainAxisSize/min
                   :crossAxisAlignment m.CrossAxisAlignment/stretch
                   :children
                   [(m/IconButton :onPressed (fn [] (swap! app-state assoc-in [:todos idx :is-done] (not is-done)) nil)
                      :icon (m/Icon (if is-done m.Icons/close_sharp m.Icons/check_sharp))
                      :iconSize 25)
                    (m/Icon m.Icons/arrow_upward_rounded :size 25 :color priority-icon-color)
                    (m/SizedBox :width 8)
                    (m/Icon m.Icons/menu :size 25)]))))])))))

(defn add-todo-widget [toggle-is-adding-todo]
  (f/widget
    :with [:let [new-todo (volatile! {})
                 key (new #/(m/GlobalKey m/FormState))]]
    (f/nest
      (m/Form :key key)
      (m/Padding :padding (m.EdgeInsets/all 15))
      (m/Column
        :mainAxisSize m.MainAxisSize/min
        :crossAxisAlignment m.CrossAxisAlignment/stretch
        :children
        [(f/widget
           :context ctx
           :inherit [m/FocusScope]
           :with [:let [initial-date (doto (DateTime/now)
                                       (->> (vswap! new-todo assoc :dueDate)))]
                  controller (m/TextEditingController :text (formatted-date initial-date))]
           (m/TextFormField
             :controller controller
             :decoration (m/InputDecoration :labelText "Due Date")
             :onTap (fn []
                      (.unfocus focus-scope)
                      (let [date (await (m/showDatePicker
                                          :context ctx
                                          :initialDate (DateTime/now)
                                          :firstDate (DateTime/now)
                                          :lastDate  (.add (DateTime/now) (Duration :days 36500))))]
                        (when (and date (not= date initial-date))
                          (set! (.-text controller) (formatted-date date))
                          (vswap! new-todo assoc :dueDate date)))
                      nil)))
         (m/TextFormField
           :decoration (m/InputDecoration :labelText "Todo")
           :validator (fn [^String value]
                        (when (or (nil? value) (.isEmpty value))
                          "Please enter some text"))
           :onSaved (fn [value] (vswap! new-todo assoc :text value)))
         (m/TextFormField
           :keyboardType m.TextInputType/number
           :decoration (m/InputDecoration :labelText "Priority (0-5)")
           :validator (fn [value]
                        (cond
                          (or (nil? value) (nil? (int/tryParse value)))
                          "Please enter a number"
                          (not (<= 0 (int/parse value) 5))
                          "Please enter a number between 0 and 5"))
           :onSaved (fn [value] (vswap! new-todo assoc :priority (int/parse value))))
         (m/SizedBox :height 25)
         (f/widget
           :inherit [:app-state]
           (f/nest
             (m/ElevatedButton
               :style (m/ButtonStyle :backgroundColor (. m/MaterialStateProperty #/(all m/Color) primary-color))
               :onPressed (fn []
                            (when (-> key .currentState .validate)
                              (-> key .currentState .save)
                              (-> key .currentState .reset)
                              (swap! app-state
                                (fn [s]
                                  (doto (-> s
                                          (update :todos conj @new-todo)
                                          (update :todos/count inc))
                                    dart:core/print)))
                              (toggle-is-adding-todo))
                            nil))
             (m/Padding :padding (m.EdgeInsets/all 10))
             (f/widget
               :inherit [m/Theme]
               (m/Text "Submit" :style (-> theme .-textTheme .headline6 (.copyWith :color m.Colors/white :fontSize 16))))))]))))

(def todos-page
  (f/widget
    :inherit [:app-state m/ScaffoldMessenger]
    (f/widget
      :state [is-loading true]
      :with [:let [_ ((fn []
                            (try  (let [t (await (fetch-todos))]
                                    (swap! app-state
                                      (fn [s]
                                        (let [s (update s :todos into t)]
                                          (assoc s :todos/count (count (:todos s))))))
                                    (reset! is-loading false))
                                  (catch Exception e
                                    (.showSnackBar scaffold-messenger
                                      (m/SnackBar :content (m/Text "Error while fetching the todos!")))))))
                   is-adding-todo (m/ValueNotifier false)
                   toggle-is-adding-todo (fn [] (set! (.-value is-adding-todo) (not (.-value is-adding-todo))) nil)]]
      (f/nest
        (m/WillPopScope :onWillPop (fn []
                                     (when (.value is-adding-todo)
                                       (do (toggle-is-adding-todo) (.value a/Future false)))
                                     (.value a/Future true)))
        (m/Scaffold
          :floatingActionButton
          (f/nest
            (m/FloatingActionButton :onPressed (fn [] (toggle-is-adding-todo)) :backgroundColor accent-color)
            (m/ValueListenableBuilder
              :valueListenable is-adding-todo
              :builder
              (fn [_ is-adding-mode __]
                (m/Icon (if is-adding-mode m.Icons/close m.Icons/add) :color m.Colors/white))))
          :bottomSheet
          (f/nest
            (m/ValueListenableBuilder
              :valueListenable is-adding-todo
              :builder (fn [_ is-adding-mode child] (if (and is-adding-mode (not= child nil)) child m.SizedBox/shrink)))
            (m/BottomSheet
              :backgroundColor secondary-color
              :onClosing (fn [])
              :builder (fn [_] (add-todo-widget toggle-is-adding-todo))))
          :body (if @is-loading
                  progress-widget
                  (f/widget
                    :inherit [:app-state]
                    (m.ListView/builder
                      :padding (m.EdgeInsets/only :bottom 90)
                      :itemCount @(get app-state :todos/count)
                      :itemBuilder (fn [_ idx] (todo-item idx))))))))))

(def home-page
  (let [pages [todos-page
               #_(m/NewsPage :newsRepository (m/NewsRepository :remoteDataSource (m/NewsRemoteDataSource)))]]
    (m/Scaffold
      :appBar app-bar
      :body (nth pages 0)
      :bottomNavigationBar bottom-navigation-bar)))

(defn main []
  (m.WidgetsFlutterBinding/ensureInitialized)
  (m/runApp
    (let [w700BitterFont (.bitter gf/GoogleFonts :fontWeight (.w700 m/FontWeight))]
      (f/widget
        :bind {:app-state {:todos       []
                           :todos/count 0}}
        (m/MaterialApp
          :title "The Morning App"
          :theme (m/ThemeData
                   :colorScheme (m.ColorScheme/fromSwatch :primarySwatch m.Colors/green)
                   :primaryColor primary-color
                   :primaryColorDark primary-dark-color
                   :accentColor secondary-color
                   :appBarTheme (m/AppBarTheme :brightness m.Brightness/dark)
                   :primaryTextTheme (m/TextTheme :headline6 w700BitterFont)
                   :textTheme (m/TextTheme
                                :subtitle1 (.apply w700BitterFont :color black)
                                :headline6 (.apply w700BitterFont :color black)
                                :bodyText2 (.apply w700BitterFont :color black)))
          :home home-page
          :debugShowCheckedModeBanner false)))))
